
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08002b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000a0  08002c3c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08002c3c  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1b4  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003001  00000000  00000000  0002c27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a61d  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e89a  00000000  00000000  0004afa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882f2  00000000  00000000  0005983f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000325c  00000000  00000000  000e1b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b00 	.word	0x08002b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08002b00 	.word	0x08002b00

0800014c <_ZN4ILedC1Ev>:
 */

#ifndef INC_MODEL_LED_H_
#define INC_MODEL_LED_H_

class ILed {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <_ZN4ILedC1Ev+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	08002b50 	.word	0x08002b50

0800016c <_ZN3LedC1EP6Output>:
 *      Author: Nguyen Tran
 */

#include <component/led.h>

Led::Led(Output* pin)
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	6039      	str	r1, [r7, #0]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	4618      	mov	r0, r3
 800017a:	f7ff ffe7 	bl	800014c <_ZN4ILedC1Ev>
 800017e:	4a08      	ldr	r2, [pc, #32]	; (80001a0 <_ZN3LedC1EP6Output+0x34>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	721a      	strb	r2, [r3, #8]
{
    m_Pin = pin;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	683a      	ldr	r2, [r7, #0]
 8000194:	605a      	str	r2, [r3, #4]
}
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	08002b40 	.word	0x08002b40

080001a4 <_ZN3Led2OnEv>:

/*
 * Controls
 */
void Led::On()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    if (m_Pin->IsSet()) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 ff00 	bl	8000fb6 <_ZN6Output5IsSetEv>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d004      	beq.n	80001c6 <_ZN3Led2OnEv+0x22>
        m_Pin->Reset();
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 ff16 	bl	8000ff2 <_ZN6Output5ResetEv>
    }
    m_IsOn = true;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2201      	movs	r2, #1
 80001ca:	721a      	strb	r2, [r3, #8]
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <_ZN3Led3OffEv>:

void Led::Off()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    if (!m_Pin->IsSet()) {
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fee8 	bl	8000fb6 <_ZN6Output5IsSetEv>
 80001e6:	4603      	mov	r3, r0
 80001e8:	f083 0301 	eor.w	r3, r3, #1
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d004      	beq.n	80001fc <_ZN3Led3OffEv+0x28>
        m_Pin->Set();
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fee8 	bl	8000fcc <_ZN6Output3SetEv>
    }
    m_IsOn = false;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2200      	movs	r2, #0
 8000200:	721a      	strb	r2, [r3, #8]
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <_ZN10SegmentLedC1EPP3LedP6Output>:
 *      Author: Nguyen Tran
 */

#include "component/segment_led.h"

SegmentLed::SegmentLed(Led* led[7], Output* control)
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	607a      	str	r2, [r7, #4]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ff96 	bl	800014c <_ZN4ILedC1Ev>
 8000220:	4a11      	ldr	r2, [pc, #68]	; (8000268 <_ZN10SegmentLedC1EPP3LedP6Output+0x5c>)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	2200      	movs	r2, #0
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2200      	movs	r2, #0
 8000230:	625a      	str	r2, [r3, #36]	; 0x24
{
    for (int i = 0; i < 7; i += 1) {
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	2b06      	cmp	r3, #6
 800023a:	dc0d      	bgt.n	8000258 <_ZN10SegmentLedC1EPP3LedP6Output+0x4c>
        m_Led[i] = led[i];
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	4413      	add	r3, r2
 8000244:	6819      	ldr	r1, [r3, #0]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	697a      	ldr	r2, [r7, #20]
 800024a:	3202      	adds	r2, #2
 800024c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 7; i += 1) {
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	3301      	adds	r3, #1
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e7ee      	b.n	8000236 <_ZN10SegmentLedC1EPP3LedP6Output+0x2a>
    }
    m_Control = control;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	605a      	str	r2, [r3, #4]
}
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	4618      	mov	r0, r3
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	08002b60 	.word	0x08002b60

0800026c <_ZN10SegmentLed3OffEv>:

/*
 * Controls
 */
void SegmentLed::Off() { m_Control->Set(); }
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fea7 	bl	8000fcc <_ZN6Output3SetEv>
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <_ZN10SegmentLed2OnEv>:

void SegmentLed::On() { m_Control->Reset(); }
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fead 	bl	8000ff2 <_ZN6Output5ResetEv>
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <_ZN10SegmentLed5ClearEv>:

void SegmentLed::Clear()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    if (!m_Control->IsSet()) {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fe82 	bl	8000fb6 <_ZN6Output5IsSetEv>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f083 0301 	eor.w	r3, r3, #1
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d017      	beq.n	80002ee <_ZN10SegmentLed5ClearEv+0x4e>
        for (int i = 0; i < 7; i += 1) {
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	2b06      	cmp	r3, #6
 80002c6:	dc12      	bgt.n	80002ee <_ZN10SegmentLed5ClearEv+0x4e>
            m_Led[i]->Off();
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	3202      	adds	r2, #2
 80002ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	3202      	adds	r2, #2
 80002d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3304      	adds	r3, #4
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4608      	mov	r0, r1
 80002e4:	4798      	blx	r3
        for (int i = 0; i < 7; i += 1) {
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	e7e9      	b.n	80002c2 <_ZN10SegmentLed5ClearEv+0x22>
        }
    }
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZN10SegmentLed7DisplayEi>:

void SegmentLed::Display(int number)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
    if (!m_Control->IsSet()) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fe55 	bl	8000fb6 <_ZN6Output5IsSetEv>
 800030c:	4603      	mov	r3, r0
 800030e:	f083 0301 	eor.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	f000 8267 	beq.w	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        switch (number) {
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b09      	cmp	r3, #9
 800031e:	f200 8262 	bhi.w	80007e6 <_ZN10SegmentLed7DisplayEi+0x4ee>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <_ZN10SegmentLed7DisplayEi+0x30>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000351 	.word	0x08000351
 800032c:	080003c5 	.word	0x080003c5
 8000330:	08000441 	.word	0x08000441
 8000334:	080004b7 	.word	0x080004b7
 8000338:	0800052d 	.word	0x0800052d
 800033c:	080005a5 	.word	0x080005a5
 8000340:	0800061b 	.word	0x0800061b
 8000344:	0800068f 	.word	0x0800068f
 8000348:	08000701 	.word	0x08000701
 800034c:	08000773 	.word	0x08000773
        case 0:
            m_Led[0]->On();
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4610      	mov	r0, r2
 800035e:	4798      	blx	r3
            m_Led[1]->On();
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4610      	mov	r0, r2
 800036e:	4798      	blx	r3
            m_Led[2]->On();
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	691a      	ldr	r2, [r3, #16]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4610      	mov	r0, r2
 800037e:	4798      	blx	r3
            m_Led[3]->On();
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4610      	mov	r0, r2
 800038e:	4798      	blx	r3
            m_Led[4]->On();
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	699a      	ldr	r2, [r3, #24]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4610      	mov	r0, r2
 800039e:	4798      	blx	r3
            m_Led[5]->On();
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	69da      	ldr	r2, [r3, #28]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4610      	mov	r0, r2
 80003ae:	4798      	blx	r3
            m_Led[6]->Off();
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6a1a      	ldr	r2, [r3, #32]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6a1b      	ldr	r3, [r3, #32]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3304      	adds	r3, #4
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4610      	mov	r0, r2
 80003c0:	4798      	blx	r3
            break;
 80003c2:	e211      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 1:
            m_Led[0]->Off();
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3304      	adds	r3, #4
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4610      	mov	r0, r2
 80003d4:	4798      	blx	r3
            m_Led[1]->On();
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4610      	mov	r0, r2
 80003e4:	4798      	blx	r3
            m_Led[2]->On();
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	691a      	ldr	r2, [r3, #16]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4610      	mov	r0, r2
 80003f4:	4798      	blx	r3
            m_Led[3]->Off();
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3304      	adds	r3, #4
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4610      	mov	r0, r2
 8000406:	4798      	blx	r3
            m_Led[4]->Off();
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4610      	mov	r0, r2
 8000418:	4798      	blx	r3
            m_Led[5]->Off();
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	69da      	ldr	r2, [r3, #28]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3304      	adds	r3, #4
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4610      	mov	r0, r2
 800042a:	4798      	blx	r3
            m_Led[6]->Off();
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6a1a      	ldr	r2, [r3, #32]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6a1b      	ldr	r3, [r3, #32]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4610      	mov	r0, r2
 800043c:	4798      	blx	r3
            break;
 800043e:	e1d3      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 2:
            m_Led[0]->On();
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4610      	mov	r0, r2
 800044e:	4798      	blx	r3
            m_Led[1]->On();
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68da      	ldr	r2, [r3, #12]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4610      	mov	r0, r2
 800045e:	4798      	blx	r3
            m_Led[2]->Off();
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691a      	ldr	r2, [r3, #16]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	3304      	adds	r3, #4
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4610      	mov	r0, r2
 8000470:	4798      	blx	r3
            m_Led[3]->On();
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4610      	mov	r0, r2
 8000480:	4798      	blx	r3
            m_Led[4]->On();
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	699a      	ldr	r2, [r3, #24]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4610      	mov	r0, r2
 8000490:	4798      	blx	r3
            m_Led[5]->Off();
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	69da      	ldr	r2, [r3, #28]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3304      	adds	r3, #4
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4610      	mov	r0, r2
 80004a2:	4798      	blx	r3
            m_Led[6]->On();
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6a1a      	ldr	r2, [r3, #32]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6a1b      	ldr	r3, [r3, #32]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4610      	mov	r0, r2
 80004b2:	4798      	blx	r3
            break;
 80004b4:	e198      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 3:
            m_Led[0]->On();
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	689a      	ldr	r2, [r3, #8]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4610      	mov	r0, r2
 80004c4:	4798      	blx	r3
            m_Led[1]->On();
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	68da      	ldr	r2, [r3, #12]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4610      	mov	r0, r2
 80004d4:	4798      	blx	r3
            m_Led[2]->On();
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	691a      	ldr	r2, [r3, #16]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	691b      	ldr	r3, [r3, #16]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4610      	mov	r0, r2
 80004e4:	4798      	blx	r3
            m_Led[3]->On();
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4610      	mov	r0, r2
 80004f4:	4798      	blx	r3
            m_Led[4]->Off();
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3304      	adds	r3, #4
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4610      	mov	r0, r2
 8000506:	4798      	blx	r3
            m_Led[5]->Off();
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	69da      	ldr	r2, [r3, #28]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3304      	adds	r3, #4
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4610      	mov	r0, r2
 8000518:	4798      	blx	r3
            m_Led[6]->On();
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6a1a      	ldr	r2, [r3, #32]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6a1b      	ldr	r3, [r3, #32]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4610      	mov	r0, r2
 8000528:	4798      	blx	r3
            break;
 800052a:	e15d      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 4:
            m_Led[0]->Off();
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3304      	adds	r3, #4
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4610      	mov	r0, r2
 800053c:	4798      	blx	r3
            m_Led[1]->On();
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68da      	ldr	r2, [r3, #12]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4610      	mov	r0, r2
 800054c:	4798      	blx	r3
            m_Led[2]->On();
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	691a      	ldr	r2, [r3, #16]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4610      	mov	r0, r2
 800055c:	4798      	blx	r3
            m_Led[3]->Off();
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3304      	adds	r3, #4
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4610      	mov	r0, r2
 800056e:	4798      	blx	r3
            m_Led[4]->Off();
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	699a      	ldr	r2, [r3, #24]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3304      	adds	r3, #4
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4610      	mov	r0, r2
 8000580:	4798      	blx	r3
            m_Led[5]->On();
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4610      	mov	r0, r2
 8000590:	4798      	blx	r3
            m_Led[6]->On();
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6a1a      	ldr	r2, [r3, #32]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4610      	mov	r0, r2
 80005a0:	4798      	blx	r3
            break;
 80005a2:	e121      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 5:
            m_Led[0]->On();
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4610      	mov	r0, r2
 80005b2:	4798      	blx	r3
            m_Led[1]->Off();
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	68da      	ldr	r2, [r3, #12]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3304      	adds	r3, #4
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4610      	mov	r0, r2
 80005c4:	4798      	blx	r3
            m_Led[2]->On();
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	691a      	ldr	r2, [r3, #16]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4610      	mov	r0, r2
 80005d4:	4798      	blx	r3
            m_Led[3]->On();
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4610      	mov	r0, r2
 80005e4:	4798      	blx	r3
            m_Led[4]->Off();
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3304      	adds	r3, #4
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4610      	mov	r0, r2
 80005f6:	4798      	blx	r3
            m_Led[5]->On();
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4610      	mov	r0, r2
 8000606:	4798      	blx	r3
            m_Led[6]->On();
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6a1a      	ldr	r2, [r3, #32]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4610      	mov	r0, r2
 8000616:	4798      	blx	r3
            break;
 8000618:	e0e6      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 6:
            m_Led[0]->On();
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4610      	mov	r0, r2
 8000628:	4798      	blx	r3
            m_Led[1]->Off();
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68da      	ldr	r2, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3304      	adds	r3, #4
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4610      	mov	r0, r2
 800063a:	4798      	blx	r3
            m_Led[2]->On();
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	691a      	ldr	r2, [r3, #16]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4610      	mov	r0, r2
 800064a:	4798      	blx	r3
            m_Led[3]->On();
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4610      	mov	r0, r2
 800065a:	4798      	blx	r3
            m_Led[4]->On();
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	699a      	ldr	r2, [r3, #24]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4610      	mov	r0, r2
 800066a:	4798      	blx	r3
            m_Led[5]->On();
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4610      	mov	r0, r2
 800067a:	4798      	blx	r3
            m_Led[6]->On();
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6a1a      	ldr	r2, [r3, #32]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6a1b      	ldr	r3, [r3, #32]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4610      	mov	r0, r2
 800068a:	4798      	blx	r3
            break;
 800068c:	e0ac      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 7:
            m_Led[0]->On();
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4610      	mov	r0, r2
 800069c:	4798      	blx	r3
            m_Led[1]->On();
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4610      	mov	r0, r2
 80006ac:	4798      	blx	r3
            m_Led[2]->On();
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	691a      	ldr	r2, [r3, #16]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4610      	mov	r0, r2
 80006bc:	4798      	blx	r3
            m_Led[3]->On();
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4610      	mov	r0, r2
 80006cc:	4798      	blx	r3
            m_Led[4]->On();
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	699a      	ldr	r2, [r3, #24]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4610      	mov	r0, r2
 80006dc:	4798      	blx	r3
            m_Led[5]->On();
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4610      	mov	r0, r2
 80006ec:	4798      	blx	r3
            m_Led[6]->On();
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a1a      	ldr	r2, [r3, #32]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4610      	mov	r0, r2
 80006fc:	4798      	blx	r3
            break;
 80006fe:	e073      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 8:
            m_Led[0]->On();
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689a      	ldr	r2, [r3, #8]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4610      	mov	r0, r2
 800070e:	4798      	blx	r3
            m_Led[1]->On();
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4610      	mov	r0, r2
 800071e:	4798      	blx	r3
            m_Led[2]->On();
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4610      	mov	r0, r2
 800072e:	4798      	blx	r3
            m_Led[3]->On();
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4610      	mov	r0, r2
 800073e:	4798      	blx	r3
            m_Led[4]->On();
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4610      	mov	r0, r2
 800074e:	4798      	blx	r3
            m_Led[5]->On();
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	69da      	ldr	r2, [r3, #28]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4610      	mov	r0, r2
 800075e:	4798      	blx	r3
            m_Led[6]->On();
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6a1a      	ldr	r2, [r3, #32]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a1b      	ldr	r3, [r3, #32]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4610      	mov	r0, r2
 800076e:	4798      	blx	r3
            break;
 8000770:	e03a      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        case 9:
            m_Led[0]->On();
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4610      	mov	r0, r2
 8000780:	4798      	blx	r3
            m_Led[1]->On();
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4610      	mov	r0, r2
 8000790:	4798      	blx	r3
            m_Led[2]->On();
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4610      	mov	r0, r2
 80007a0:	4798      	blx	r3
            m_Led[3]->On();
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4610      	mov	r0, r2
 80007b0:	4798      	blx	r3
            m_Led[4]->Off();
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4610      	mov	r0, r2
 80007c2:	4798      	blx	r3
            m_Led[5]->On();
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69da      	ldr	r2, [r3, #28]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4610      	mov	r0, r2
 80007d2:	4798      	blx	r3
            m_Led[6]->On();
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6a1a      	ldr	r2, [r3, #32]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a1b      	ldr	r3, [r3, #32]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4610      	mov	r0, r2
 80007e2:	4798      	blx	r3
            break;
 80007e4:	e000      	b.n	80007e8 <_ZN10SegmentLed7DisplayEi+0x4f0>
        default:
            break;
 80007e6:	bf00      	nop
        }
    }
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_ZN6SwitchC1EP5Input>:
 *      Author: Nguyen Tran
 */

#include "component/switch.h"

Switch::Switch(Input* pin) { m_Pin = pin; }
 80007f0:	b490      	push	{r4, r7}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <_ZN6SwitchC1EP5Input+0x44>)
 80007fe:	461c      	mov	r4, r3
 8000800:	4613      	mov	r3, r2
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	741a      	strb	r2, [r3, #16]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	745a      	strb	r2, [r3, #17]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000820:	619a      	str	r2, [r3, #24]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bc90      	pop	{r4, r7}
 8000832:	4770      	bx	lr
 8000834:	08002b18 	.word	0x08002b18

08000838 <_ZN6Switch6ListenEv>:

/*
 * Listener
 */
void Switch::Listen()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    m_KeyReg[2] = m_KeyReg[1];
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
    m_KeyReg[1] = m_KeyReg[0];
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	605a      	str	r2, [r3, #4]
    m_KeyReg[0] = m_Pin->Read();
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fb88 	bl	8000f6a <_ZN5Input4ReadEv>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]

    if ((m_KeyReg[0] == m_KeyReg[1]) && (m_KeyReg[1] == m_KeyReg[2])) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	d12f      	bne.n	80008ce <_ZN6Switch6ListenEv+0x96>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	429a      	cmp	r2, r3
 8000878:	d129      	bne.n	80008ce <_ZN6Switch6ListenEv+0x96>
        if (m_KeyReg[2] != m_KeyReg[3]) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	d013      	beq.n	80008ae <_ZN6Switch6ListenEv+0x76>
            m_KeyReg[3] = m_KeyReg[2];
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]

            if (m_KeyReg[3] == PRESSED) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d107      	bne.n	80008a6 <_ZN6Switch6ListenEv+0x6e>
                c_Timeout = BUTTON_TIMEOUT / TICK;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800089c:	619a      	str	r2, [r3, #24]
                m_Flag = true;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	741a      	strb	r2, [r3, #16]
                    m_FlagLong = true;
                }
            }
        }
    }
}
 80008a4:	e013      	b.n	80008ce <_ZN6Switch6ListenEv+0x96>
                m_FlagLong = false;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	745a      	strb	r2, [r3, #17]
}
 80008ac:	e00f      	b.n	80008ce <_ZN6Switch6ListenEv+0x96>
            if (m_KeyReg[3] == PRESSED) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10b      	bne.n	80008ce <_ZN6Switch6ListenEv+0x96>
                c_Timeout -= 1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	619a      	str	r2, [r3, #24]
                if (c_Timeout == 0) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_ZN6Switch6ListenEv+0x96>
                    m_FlagLong = true;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	745a      	strb	r2, [r3, #17]
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZN6Switch9IsPressedEv>:

/*
 * Flag check
 */
bool Switch::IsPressed()
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
    if (m_Flag) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7c1b      	ldrb	r3, [r3, #16]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <_ZN6Switch9IsPressedEv+0x1a>
        m_Flag = false;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	741a      	strb	r2, [r3, #16]
        return true;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <_ZN6Switch9IsPressedEv+0x1c>
    }
    return false;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <_ZN6Switch13IsLongPressedEv>:

bool Switch::IsLongPressed()
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    return m_FlagLong;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7c5b      	ldrb	r3, [r3, #17]
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
	...

08000914 <_Z41__static_initialization_and_destruction_0ii>:
/*
 * Main controller
 * Controls the whole program
 */
Controller g_Controller;
LedController g_LedService;
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d17f      	bne.n	8000a24 <_Z41__static_initialization_and_destruction_0ii+0x110>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092a:	4293      	cmp	r3, r2
 800092c:	d17a      	bne.n	8000a24 <_Z41__static_initialization_and_destruction_0ii+0x110>
Output o_TEST_LED(O_TEST_LED_GPIO_Port, O_TEST_LED_Pin);
 800092e:	2202      	movs	r2, #2
 8000930:	493e      	ldr	r1, [pc, #248]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000932:	483f      	ldr	r0, [pc, #252]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8000934:	f000 fb2a 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_SIG(O_SEG_SIG_GPIO_Port, O_SEG_SIG_Pin);
 8000938:	2220      	movs	r2, #32
 800093a:	493c      	ldr	r1, [pc, #240]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800093c:	483d      	ldr	r0, [pc, #244]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800093e:	f000 fb25 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_A(O_SEG_A_GPIO_Port, O_SEG_A_Pin);
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	4939      	ldr	r1, [pc, #228]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000946:	483c      	ldr	r0, [pc, #240]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8000948:	f000 fb20 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_B(O_SEG_B_GPIO_Port, O_SEG_B_Pin);
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	4937      	ldr	r1, [pc, #220]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000950:	483a      	ldr	r0, [pc, #232]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8000952:	f000 fb1b 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_C(O_SEG_C_GPIO_Port, O_SEG_C_Pin);
 8000956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095a:	4934      	ldr	r1, [pc, #208]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800095c:	4838      	ldr	r0, [pc, #224]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800095e:	f000 fb15 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_D(O_SEG_D_GPIO_Port, O_SEG_D_Pin);
 8000962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000966:	4931      	ldr	r1, [pc, #196]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000968:	4836      	ldr	r0, [pc, #216]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800096a:	f000 fb0f 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_E(O_SEG_E_GPIO_Port, O_SEG_E_Pin);
 800096e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000972:	492e      	ldr	r1, [pc, #184]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000974:	4834      	ldr	r0, [pc, #208]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8000976:	f000 fb09 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_F(O_SEG_F_GPIO_Port, O_SEG_F_Pin);
 800097a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800097e:	492b      	ldr	r1, [pc, #172]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000980:	4832      	ldr	r0, [pc, #200]	; (8000a4c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8000982:	f000 fb03 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Output o_SEG_G(O_SEG_G_GPIO_Port, O_SEG_G_Pin);
 8000986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800098a:	4928      	ldr	r1, [pc, #160]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800098c:	4830      	ldr	r0, [pc, #192]	; (8000a50 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800098e:	f000 fafd 	bl	8000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>
Input i_BUT_RES(I_BUT_RES_GPIO_Port, I_BUT_RES_Pin);
 8000992:	2204      	movs	r2, #4
 8000994:	4925      	ldr	r1, [pc, #148]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8000996:	482f      	ldr	r0, [pc, #188]	; (8000a54 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8000998:	f000 fad1 	bl	8000f3e <_ZN5InputC1EP12GPIO_TypeDeft>
Input i_BUT_INC(I_BUT_INC_GPIO_Port, I_BUT_INC_Pin);
 800099c:	2208      	movs	r2, #8
 800099e:	4923      	ldr	r1, [pc, #140]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80009a2:	f000 facc 	bl	8000f3e <_ZN5InputC1EP12GPIO_TypeDeft>
Input i_BUT_DEC(I_BUT_SET_GPIO_Port, I_BUT_SET_Pin);
 80009a6:	2210      	movs	r2, #16
 80009a8:	4920      	ldr	r1, [pc, #128]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80009aa:	482c      	ldr	r0, [pc, #176]	; (8000a5c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80009ac:	f000 fac7 	bl	8000f3e <_ZN5InputC1EP12GPIO_TypeDeft>
Led g_LedTest(&o_TEST_LED);
 80009b0:	491f      	ldr	r1, [pc, #124]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80009b2:	482b      	ldr	r0, [pc, #172]	; (8000a60 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80009b4:	f7ff fbda 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedA(&o_SEG_A);
 80009b8:	491f      	ldr	r1, [pc, #124]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80009ba:	482a      	ldr	r0, [pc, #168]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80009bc:	f7ff fbd6 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedB(&o_SEG_B);
 80009c0:	491e      	ldr	r1, [pc, #120]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80009c2:	4829      	ldr	r0, [pc, #164]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80009c4:	f7ff fbd2 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedC(&o_SEG_C);
 80009c8:	491d      	ldr	r1, [pc, #116]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80009ca:	4828      	ldr	r0, [pc, #160]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80009cc:	f7ff fbce 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedD(&o_SEG_D);
 80009d0:	491c      	ldr	r1, [pc, #112]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80009d2:	4827      	ldr	r0, [pc, #156]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80009d4:	f7ff fbca 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedE(&o_SEG_E);
 80009d8:	491b      	ldr	r1, [pc, #108]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80009da:	4826      	ldr	r0, [pc, #152]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80009dc:	f7ff fbc6 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedF(&o_SEG_F);
 80009e0:	491a      	ldr	r1, [pc, #104]	; (8000a4c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80009e2:	4825      	ldr	r0, [pc, #148]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80009e4:	f7ff fbc2 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedG(&o_SEG_G);
 80009e8:	4919      	ldr	r1, [pc, #100]	; (8000a50 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80009ea:	4824      	ldr	r0, [pc, #144]	; (8000a7c <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80009ec:	f7ff fbbe 	bl	800016c <_ZN3LedC1EP6Output>
SegmentLed g_SegCounter(l_SegLed, &o_SEG_SIG);
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80009f2:	4923      	ldr	r1, [pc, #140]	; (8000a80 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80009f4:	4823      	ldr	r0, [pc, #140]	; (8000a84 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80009f6:	f7ff fc09 	bl	800020c <_ZN10SegmentLedC1EPP3LedP6Output>
Switch g_ButtonRes(&i_BUT_RES);
 80009fa:	4916      	ldr	r1, [pc, #88]	; (8000a54 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80009fc:	4822      	ldr	r0, [pc, #136]	; (8000a88 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80009fe:	f7ff fef7 	bl	80007f0 <_ZN6SwitchC1EP5Input>
Switch g_ButtonInc(&i_BUT_INC);
 8000a02:	4915      	ldr	r1, [pc, #84]	; (8000a58 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8000a06:	f7ff fef3 	bl	80007f0 <_ZN6SwitchC1EP5Input>
Switch g_ButtonDec(&i_BUT_DEC);
 8000a0a:	4914      	ldr	r1, [pc, #80]	; (8000a5c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8000a0c:	4820      	ldr	r0, [pc, #128]	; (8000a90 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8000a0e:	f7ff feef 	bl	80007f0 <_ZN6SwitchC1EP5Input>
Timer g_TimerGlobal;
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8000a14:	f000 fa23 	bl	8000e5e <_ZN5TimerC1Ev>
Timer g_TimerTestLed;
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8000a1a:	f000 fa20 	bl	8000e5e <_ZN5TimerC1Ev>
Timer g_TimerAutoDecrement;
 8000a1e:	481f      	ldr	r0, [pc, #124]	; (8000a9c <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8000a20:	f000 fa1d 	bl	8000e5e <_ZN5TimerC1Ev>
LedController g_LedService;
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	200000bc 	.word	0x200000bc
 8000a34:	200000c4 	.word	0x200000c4
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	200000dc 	.word	0x200000dc
 8000a44:	200000e4 	.word	0x200000e4
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	200000f4 	.word	0x200000f4
 8000a50:	200000fc 	.word	0x200000fc
 8000a54:	20000104 	.word	0x20000104
 8000a58:	2000010c 	.word	0x2000010c
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	2000011c 	.word	0x2000011c
 8000a64:	20000128 	.word	0x20000128
 8000a68:	20000134 	.word	0x20000134
 8000a6c:	20000140 	.word	0x20000140
 8000a70:	2000014c 	.word	0x2000014c
 8000a74:	20000158 	.word	0x20000158
 8000a78:	20000164 	.word	0x20000164
 8000a7c:	20000170 	.word	0x20000170
 8000a80:	20000000 	.word	0x20000000
 8000a84:	2000017c 	.word	0x2000017c
 8000a88:	200001a4 	.word	0x200001a4
 8000a8c:	200001c0 	.word	0x200001c0
 8000a90:	200001dc 	.word	0x200001dc
 8000a94:	200001f8 	.word	0x200001f8
 8000a98:	20000204 	.word	0x20000204
 8000a9c:	20000210 	.word	0x20000210

08000aa0 <_GLOBAL__sub_I_o_TEST_LED>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff33 	bl	8000914 <_Z41__static_initialization_and_destruction_0ii>
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick.
     */
    HAL_Init();
 8000ab4:	f000 fcaa 	bl	800140c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000ab8:	f000 f83a 	bl	8000b30 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_TIM2_Init();
 8000abc:	f000 f87e 	bl	8000bbc <_ZL12MX_TIM2_Initv>
    MX_GPIO_Init();
 8000ac0:	f000 f8d8 	bl	8000c74 <_ZL12MX_GPIO_Initv>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <main+0x28>)
 8000ac6:	f001 fbf5 	bl	80022b4 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        g_LedService.Run();
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <main+0x2c>)
 8000acc:	f000 fc2a 	bl	8001324 <_ZN13LedController3RunEv>
        g_Controller.Run();
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <main+0x30>)
 8000ad2:	f000 fad7 	bl	8001084 <_ZN10Controller3RunEv>
        g_LedService.Run();
 8000ad6:	e7f8      	b.n	8000aca <main+0x1a>
 8000ad8:	2000021c 	.word	0x2000021c
 8000adc:	20000024 	.word	0x20000024
 8000ae0:	2000001c 	.word	0x2000001c

08000ae4 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Callback, calls every 10ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    /*
     * Button listeners
     */
    g_ButtonRes.Listen();
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000aee:	f7ff fea3 	bl	8000838 <_ZN6Switch6ListenEv>
    g_ButtonInc.Listen();
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000af4:	f7ff fea0 	bl	8000838 <_ZN6Switch6ListenEv>
    g_ButtonDec.Listen();
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000afa:	f7ff fe9d 	bl	8000838 <_ZN6Switch6ListenEv>

    /*
     * Timer breathers
     */
    g_TimerGlobal.Breath();
 8000afe:	4809      	ldr	r0, [pc, #36]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b00:	f000 fa02 	bl	8000f08 <_ZN5Timer6BreathEv>
    g_TimerTestLed.Breath();
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b06:	f000 f9ff 	bl	8000f08 <_ZN5Timer6BreathEv>
    g_TimerAutoDecrement.Breath();
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b0c:	f000 f9fc 	bl	8000f08 <_ZN5Timer6BreathEv>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200001a4 	.word	0x200001a4
 8000b1c:	200001c0 	.word	0x200001c0
 8000b20:	200001dc 	.word	0x200001dc
 8000b24:	200001f8 	.word	0x200001f8
 8000b28:	20000204 	.word	0x20000204
 8000b2c:	20000210 	.word	0x20000210

08000b30 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	; 0x40
 8000b34:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 ff92 	bl	8002a68 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ff6c 	bl	8001a44 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <_Z18SystemClock_Configv+0x50>
        Error_Handler();
 8000b7c:	f000 f8ba 	bl	8000cf4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	607b      	str	r3, [r7, #4]
        | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 f9d5 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <_Z18SystemClock_Configv+0x82>
        Error_Handler();
 8000bae:	f000 f8a1 	bl	8000cf4 <Error_Handler>
    }
}
 8000bb2:	bf00      	nop
 8000bb4:	3740      	adds	r7, #64	; 0x40
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bde:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7999;
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000be2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000be6:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bf0:	2209      	movs	r2, #9
 8000bf2:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c00:	481b      	ldr	r0, [pc, #108]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c02:	f001 fb07 	bl	8002214 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bf14      	ite	ne
 8000c0c:	2301      	movne	r3, #1
 8000c0e:	2300      	moveq	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <_ZL12MX_TIM2_Initv+0x5e>
        Error_Handler();
 8000c16:	f000 f86d 	bl	8000cf4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c28:	f001 fc98 	bl	800255c <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <_ZL12MX_TIM2_Initv+0x84>
        Error_Handler();
 8000c3c:	f000 f85a 	bl	8000cf4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c4e:	f001 fe5b 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf14      	ite	ne
 8000c58:	2301      	movne	r3, #1
 8000c5a:	2300      	moveq	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <_ZL12MX_TIM2_Initv+0xaa>
        Error_Handler();
 8000c62:	f000 f847 	bl	8000cf4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000021c 	.word	0x2000021c

08000c74 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <_ZL12MX_GPIO_Initv+0x78>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <_ZL12MX_GPIO_Initv+0x78>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_ZL12MX_GPIO_Initv+0x78>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, O_TEST_LED_Pin | O_SEG_SIG_Pin | O_SEG_A_Pin | O_SEG_B_Pin | O_SEG_C_Pin | O_SEG_D_Pin | O_SEG_E_Pin | O_SEG_F_Pin | O_SEG_G_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f641 71e2 	movw	r1, #8162	; 0x1fe2
 8000ca6:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <_ZL12MX_GPIO_Initv+0x7c>)
 8000ca8:	f000 feb3 	bl	8001a12 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : O_TEST_LED_Pin O_SEG_SIG_Pin O_SEG_A_Pin O_SEG_B_Pin
                             O_SEG_C_Pin O_SEG_D_Pin O_SEG_E_Pin O_SEG_F_Pin
                             O_SEG_G_Pin */
    GPIO_InitStruct.Pin = O_TEST_LED_Pin | O_SEG_SIG_Pin | O_SEG_A_Pin | O_SEG_B_Pin
 8000cac:	f641 73e2 	movw	r3, #8162	; 0x1fe2
 8000cb0:	60bb      	str	r3, [r7, #8]
        | O_SEG_C_Pin | O_SEG_D_Pin | O_SEG_E_Pin | O_SEG_F_Pin
        | O_SEG_G_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <_ZL12MX_GPIO_Initv+0x7c>)
 8000cc6:	f000 fd11 	bl	80016ec <HAL_GPIO_Init>

    /*Configure GPIO pins : I_BUT_RES_Pin I_BUT_INC_Pin I_BUT_SET_Pin */
    GPIO_InitStruct.Pin = I_BUT_RES_Pin | I_BUT_INC_Pin | I_BUT_SET_Pin;
 8000cca:	231c      	movs	r3, #28
 8000ccc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <_ZL12MX_GPIO_Initv+0x7c>)
 8000cde:	f000 fd05 	bl	80016ec <HAL_GPIO_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x60>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_MspInit+0x60>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000

08000d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d113      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_TIM_Base_MspInit+0x44>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_TIM_Base_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_TIM_Base_MspInit+0x44>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	201c      	movs	r0, #28
 8000d94:	f000 fc73 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d98:	201c      	movs	r0, #28
 8000d9a:	f000 fc8c 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df2:	f000 fb51 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM2_IRQHandler+0x10>)
 8000e02:	f001 faa3 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000021c 	.word	0x2000021c

08000e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
    return 1;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <_kill>:

int _kill(int pid, int sig)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8000e28:	f001 fdf4 	bl	8002a14 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2216      	movs	r2, #22
 8000e30:	601a      	str	r2, [r3, #0]
    return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_exit>:

void _exit(int status)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8000e46:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffe7 	bl	8000e1e <_kill>
    while (1) { } /* Make sure we hang here */
 8000e50:	e7fe      	b.n	8000e50 <_exit+0x12>

08000e52 <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <_ZN5TimerC1Ev>:
 *      Author: Nguyen Tran
 */

#include "helper/timer.h"

Timer::Timer() { }
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <_ZN5Timer9HasSignalEv>:

/*
 * Flag check
 */
bool Timer::HasSignal()
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    if (m_Signal) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <_ZN5Timer9HasSignalEv+0x1a>
        m_Signal = false;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
        return true;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <_ZN5Timer9HasSignalEv+0x1c>
    }
    return false;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <_ZN5Timer5StartEv>:

/*
 * Controls
 */
void Timer::Start() { m_Remaining = m_Duration; }
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN5Timer5ResetEv>:
void Timer::Reset() { Start(); }
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ffec 	bl	8000eaa <_ZN5Timer5StartEv>
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <_ZN5Timer3SetEi>:

void Timer::Set(int duration)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    m_Duration = duration / TICK;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <_ZN5Timer3SetEi+0x28>)
 8000eea:	fb82 1203 	smull	r1, r2, r2, r3
 8000eee:	1092      	asrs	r2, r2, #2
 8000ef0:	17db      	asrs	r3, r3, #31
 8000ef2:	1ad2      	subs	r2, r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	605a      	str	r2, [r3, #4]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	66666667 	.word	0x66666667

08000f08 <_ZN5Timer6BreathEv>:

void Timer::Breath()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    if (m_Remaining > 0) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd0e      	ble.n	8000f36 <_ZN5Timer6BreathEv+0x2e>
        m_Remaining -= 1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]
        if (m_Remaining == 0) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d105      	bne.n	8000f36 <_ZN5Timer6BreathEv+0x2e>
            m_Signal = true;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
            Start();
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffba 	bl	8000eaa <_ZN5Timer5StartEv>
        }
    }
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_ZN5InputC1EP12GPIO_TypeDeft>:

Input::Input()
{
}

Input::Input(GPIO_TypeDef* port, uint16_t pin)
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f862 	bl	8001018 <_ZN3PinC1Ev>
{
    m_Port = port;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	601a      	str	r2, [r3, #0]
    m_Pin = pin;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	809a      	strh	r2, [r3, #4]
}
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZN5Input4ReadEv>:

GPIO_PinState Input::Read()
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(m_Port, m_Pin);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f000 fd31 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZN6OutputC1EP12GPIO_TypeDeft>:
Output::Output()
    : Pin()
{
}

Output::Output(GPIO_TypeDef* port, uint16_t pin)
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	80fb      	strh	r3, [r7, #6]
    : Pin(port, pin)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f843 	bl	800102c <_ZN3PinC1EP12GPIO_TypeDeft>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	719a      	strb	r2, [r3, #6]
{
}
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZN6Output5IsSetEv>:

/*
 * Flag check
 */
bool Output::IsSet()
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
    return m_IsSet;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	799b      	ldrb	r3, [r3, #6]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <_ZN6Output3SetEv>:

/*
 * Primitype control
 */
void Output::Set()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_Port, m_Pin, GPIO_PinState::GPIO_PIN_SET);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	889b      	ldrh	r3, [r3, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f000 fd17 	bl	8001a12 <HAL_GPIO_WritePin>
    m_IsSet = true;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	719a      	strb	r2, [r3, #6]
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_ZN6Output5ResetEv>:

void Output::Reset()
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_Port, m_Pin, GPIO_PinState::GPIO_PIN_RESET);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	f000 fd04 	bl	8001a12 <HAL_GPIO_WritePin>
    m_IsSet = false;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	719a      	strb	r2, [r3, #6]
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN3PinC1Ev>:
 *      Author: Nguyen Tran
 */

#include "model/pin.h"

Pin::Pin() { }
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <_ZN3PinC1EP12GPIO_TypeDeft>:

Pin::Pin(GPIO_TypeDef* port, uint16_t pin)
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	4613      	mov	r3, r2
 8001038:	80fb      	strh	r3, [r7, #6]
{
    m_Port = port;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	601a      	str	r2, [r3, #0]
    m_Pin = pin;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	809a      	strh	r2, [r3, #4]
}
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <_ZN10Controller8GetStateEv>:
#include "service/controller.h"

/*
 * State helpers
 */
State Controller::GetState() { return this->STATE; }
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <_ZN10Controller8SetStateE5State>:

void Controller::SetState(State to) { this->STATE = to; }
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <_ZN10Controller3RunEv>:
 * Runs in an infinite loop
 */
int CURRENT_NUMBER = 0;

void Controller::Run()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    switch (GetState()) {
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffe0 	bl	8001052 <_ZN10Controller8GetStateEv>
 8001092:	4603      	mov	r3, r0
 8001094:	2b05      	cmp	r3, #5
 8001096:	f200 8114 	bhi.w	80012c2 <_ZN10Controller3RunEv+0x23e>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <_ZN10Controller3RunEv+0x1c>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010f5 	.word	0x080010f5
 80010a8:	08001267 	.word	0x08001267
 80010ac:	08001277 	.word	0x08001277
 80010b0:	080012a1 	.word	0x080012a1
 80010b4:	080011df 	.word	0x080011df
    case State::INIT:
        CURRENT_NUMBER = 0;
 80010b8:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]

        g_TimerGlobal.Set(ONE_SECOND); // 1000
 80010be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c2:	4885      	ldr	r0, [pc, #532]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 80010c4:	f7ff ff0a 	bl	8000edc <_ZN5Timer3SetEi>
        g_TimerGlobal.Start();
 80010c8:	4883      	ldr	r0, [pc, #524]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 80010ca:	f7ff feee 	bl	8000eaa <_ZN5Timer5StartEv>

        // Timer used to trigger auto-decrement
        g_TimerAutoDecrement.Set(AUTO_MODE_TRIGGER_TIME); // 10000
 80010ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80010d2:	4882      	ldr	r0, [pc, #520]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 80010d4:	f7ff ff02 	bl	8000edc <_ZN5Timer3SetEi>
        g_TimerAutoDecrement.Start();
 80010d8:	4880      	ldr	r0, [pc, #512]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 80010da:	f7ff fee6 	bl	8000eaa <_ZN5Timer5StartEv>

        g_SegCounter.On(); // Set the Segment ANODE to 1
 80010de:	4880      	ldr	r0, [pc, #512]	; (80012e0 <_ZN10Controller3RunEv+0x25c>)
 80010e0:	f7ff f8d1 	bl	8000286 <_ZN10SegmentLed2OnEv>
        g_SegCounter.Clear();
 80010e4:	487e      	ldr	r0, [pc, #504]	; (80012e0 <_ZN10Controller3RunEv+0x25c>)
 80010e6:	f7ff f8db 	bl	80002a0 <_ZN10SegmentLed5ClearEv>

        SetState(State::WAIT_FOR_INPUT);
 80010ea:	2101      	movs	r1, #1
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffbb 	bl	8001068 <_ZN10Controller8SetStateE5State>
        break;
 80010f2:	e0eb      	b.n	80012cc <_ZN10Controller3RunEv+0x248>
    case State::WAIT_FOR_INPUT:
        g_SegCounter.Display(CURRENT_NUMBER);
 80010f4:	4b77      	ldr	r3, [pc, #476]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4879      	ldr	r0, [pc, #484]	; (80012e0 <_ZN10Controller3RunEv+0x25c>)
 80010fc:	f7ff f8fc 	bl	80002f8 <_ZN10SegmentLed7DisplayEi>

        /*
         * Switch to auto-decrement mode
         */
        if (g_TimerAutoDecrement.HasSignal()) {
 8001100:	4876      	ldr	r0, [pc, #472]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 8001102:	f7ff febf 	bl	8000e84 <_ZN5Timer9HasSignalEv>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00a      	beq.n	8001122 <_ZN10Controller3RunEv+0x9e>
            if (CURRENT_NUMBER > 0) {
 800110c:	4b71      	ldr	r3, [pc, #452]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd06      	ble.n	8001122 <_ZN10Controller3RunEv+0x9e>
                g_TimerGlobal.Reset();
 8001114:	4870      	ldr	r0, [pc, #448]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 8001116:	f7ff fed5 	bl	8000ec4 <_ZN5Timer5ResetEv>
                SetState(State::AUTO_DECREMENT);
 800111a:	2105      	movs	r1, #5
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffa3 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        /*
         * Long presses
         */
        if (g_ButtonInc.IsLongPressed() && g_TimerGlobal.HasSignal()) {
 8001122:	4870      	ldr	r0, [pc, #448]	; (80012e4 <_ZN10Controller3RunEv+0x260>)
 8001124:	f7ff fbea 	bl	80008fc <_ZN6Switch13IsLongPressedEv>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <_ZN10Controller3RunEv+0xba>
 800112e:	486a      	ldr	r0, [pc, #424]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 8001130:	f7ff fea8 	bl	8000e84 <_ZN5Timer9HasSignalEv>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZN10Controller3RunEv+0xba>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <_ZN10Controller3RunEv+0xbc>
 800113e:	2300      	movs	r3, #0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d009      	beq.n	8001158 <_ZN10Controller3RunEv+0xd4>
            g_TimerGlobal.Reset();
 8001144:	4864      	ldr	r0, [pc, #400]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 8001146:	f7ff febd 	bl	8000ec4 <_ZN5Timer5ResetEv>
            g_TimerAutoDecrement.Reset();
 800114a:	4864      	ldr	r0, [pc, #400]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 800114c:	f7ff feba 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::INCREMENT);
 8001150:	2103      	movs	r1, #3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff88 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        if (g_ButtonDec.IsLongPressed() && g_TimerGlobal.HasSignal()) {
 8001158:	4863      	ldr	r0, [pc, #396]	; (80012e8 <_ZN10Controller3RunEv+0x264>)
 800115a:	f7ff fbcf 	bl	80008fc <_ZN6Switch13IsLongPressedEv>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <_ZN10Controller3RunEv+0xf0>
 8001164:	485c      	ldr	r0, [pc, #368]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 8001166:	f7ff fe8d 	bl	8000e84 <_ZN5Timer9HasSignalEv>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <_ZN10Controller3RunEv+0xf0>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <_ZN10Controller3RunEv+0xf2>
 8001174:	2300      	movs	r3, #0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <_ZN10Controller3RunEv+0x10a>
            g_TimerGlobal.Reset();
 800117a:	4857      	ldr	r0, [pc, #348]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 800117c:	f7ff fea2 	bl	8000ec4 <_ZN5Timer5ResetEv>
            g_TimerAutoDecrement.Reset();
 8001180:	4856      	ldr	r0, [pc, #344]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 8001182:	f7ff fe9f 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::DECREMENT);
 8001186:	2104      	movs	r1, #4
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff6d 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        /*
         * Single presses
         */
        if (g_ButtonRes.IsPressed()) {
 800118e:	4857      	ldr	r0, [pc, #348]	; (80012ec <_ZN10Controller3RunEv+0x268>)
 8001190:	f7ff fba1 	bl	80008d6 <_ZN6Switch9IsPressedEv>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <_ZN10Controller3RunEv+0x124>
            g_TimerAutoDecrement.Reset();
 800119a:	4850      	ldr	r0, [pc, #320]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 800119c:	f7ff fe92 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::RESET);
 80011a0:	2102      	movs	r1, #2
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff60 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        if (g_ButtonInc.IsPressed()) {
 80011a8:	484e      	ldr	r0, [pc, #312]	; (80012e4 <_ZN10Controller3RunEv+0x260>)
 80011aa:	f7ff fb94 	bl	80008d6 <_ZN6Switch9IsPressedEv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <_ZN10Controller3RunEv+0x13e>
            g_TimerAutoDecrement.Reset();
 80011b4:	4849      	ldr	r0, [pc, #292]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 80011b6:	f7ff fe85 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::INCREMENT);
 80011ba:	2103      	movs	r1, #3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff53 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        if (g_ButtonDec.IsPressed()) {
 80011c2:	4849      	ldr	r0, [pc, #292]	; (80012e8 <_ZN10Controller3RunEv+0x264>)
 80011c4:	f7ff fb87 	bl	80008d6 <_ZN6Switch9IsPressedEv>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d07b      	beq.n	80012c6 <_ZN10Controller3RunEv+0x242>
            g_TimerAutoDecrement.Reset();
 80011ce:	4843      	ldr	r0, [pc, #268]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 80011d0:	f7ff fe78 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::DECREMENT);
 80011d4:	2104      	movs	r1, #4
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff46 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        break;
 80011dc:	e073      	b.n	80012c6 <_ZN10Controller3RunEv+0x242>
    case State::AUTO_DECREMENT:
        g_SegCounter.Display(CURRENT_NUMBER);
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4619      	mov	r1, r3
 80011e4:	483e      	ldr	r0, [pc, #248]	; (80012e0 <_ZN10Controller3RunEv+0x25c>)
 80011e6:	f7ff f887 	bl	80002f8 <_ZN10SegmentLed7DisplayEi>

        if (g_TimerGlobal.HasSignal()) {
 80011ea:	483b      	ldr	r0, [pc, #236]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 80011ec:	f7ff fe4a 	bl	8000e84 <_ZN5Timer9HasSignalEv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00f      	beq.n	8001216 <_ZN10Controller3RunEv+0x192>
            if (CURRENT_NUMBER > 0) {
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd04      	ble.n	8001208 <_ZN10Controller3RunEv+0x184>
                CURRENT_NUMBER -= 1;
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 8001206:	6013      	str	r3, [r2, #0]
            }
            g_TimerGlobal.Reset();
 8001208:	4833      	ldr	r0, [pc, #204]	; (80012d8 <_ZN10Controller3RunEv+0x254>)
 800120a:	f7ff fe5b 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::AUTO_DECREMENT);
 800120e:	2105      	movs	r1, #5
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <_ZN10Controller8SetStateE5State>

        /*
         * Single presses goes back to manual mode
         * No need long press because long press always trigger single presses first
         */
        if (g_ButtonRes.IsPressed()) {
 8001216:	4835      	ldr	r0, [pc, #212]	; (80012ec <_ZN10Controller3RunEv+0x268>)
 8001218:	f7ff fb5d 	bl	80008d6 <_ZN6Switch9IsPressedEv>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <_ZN10Controller3RunEv+0x1ac>
            g_TimerAutoDecrement.Reset();
 8001222:	482e      	ldr	r0, [pc, #184]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 8001224:	f7ff fe4e 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::RESET);
 8001228:	2102      	movs	r1, #2
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff1c 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        if (g_ButtonInc.IsPressed()) {
 8001230:	482c      	ldr	r0, [pc, #176]	; (80012e4 <_ZN10Controller3RunEv+0x260>)
 8001232:	f7ff fb50 	bl	80008d6 <_ZN6Switch9IsPressedEv>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <_ZN10Controller3RunEv+0x1c6>
            g_TimerAutoDecrement.Reset();
 800123c:	4827      	ldr	r0, [pc, #156]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 800123e:	f7ff fe41 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::INCREMENT);
 8001242:	2103      	movs	r1, #3
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff0f 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }

        if (g_ButtonDec.IsPressed()) {
 800124a:	4827      	ldr	r0, [pc, #156]	; (80012e8 <_ZN10Controller3RunEv+0x264>)
 800124c:	f7ff fb43 	bl	80008d6 <_ZN6Switch9IsPressedEv>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d039      	beq.n	80012ca <_ZN10Controller3RunEv+0x246>
            g_TimerAutoDecrement.Reset();
 8001256:	4821      	ldr	r0, [pc, #132]	; (80012dc <_ZN10Controller3RunEv+0x258>)
 8001258:	f7ff fe34 	bl	8000ec4 <_ZN5Timer5ResetEv>
            SetState(State::DECREMENT);
 800125c:	2104      	movs	r1, #4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff02 	bl	8001068 <_ZN10Controller8SetStateE5State>
        }
        break;
 8001264:	e031      	b.n	80012ca <_ZN10Controller3RunEv+0x246>
    case State::RESET:
        // Reset the display
        CURRENT_NUMBER = 0;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
        SetState(State::WAIT_FOR_INPUT);
 800126c:	2101      	movs	r1, #1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fefa 	bl	8001068 <_ZN10Controller8SetStateE5State>
        break;
 8001274:	e02a      	b.n	80012cc <_ZN10Controller3RunEv+0x248>
    case State::INCREMENT:
        /*
         * Increment the display
         * Goes to 0 from 9
         */
        CURRENT_NUMBER = (CURRENT_NUMBER + 1) % 10;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <_ZN10Controller3RunEv+0x26c>)
 800127e:	fb83 2301 	smull	r2, r3, r3, r1
 8001282:	109a      	asrs	r2, r3, #2
 8001284:	17cb      	asrs	r3, r1, #31
 8001286:	1ad2      	subs	r2, r2, r3
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	1aca      	subs	r2, r1, r3
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 8001294:	601a      	str	r2, [r3, #0]
        SetState(State::WAIT_FOR_INPUT);
 8001296:	2101      	movs	r1, #1
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fee5 	bl	8001068 <_ZN10Controller8SetStateE5State>
        break;
 800129e:	e015      	b.n	80012cc <_ZN10Controller3RunEv+0x248>
    case State::DECREMENT:
        /*
         * Decrement the display
         * Goes to 9 from 0
         */
        CURRENT_NUMBER -= 1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80012a8:	6013      	str	r3, [r2, #0]
        if (CURRENT_NUMBER < 0) {
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da02      	bge.n	80012b8 <_ZN10Controller3RunEv+0x234>
            CURRENT_NUMBER = 9;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_ZN10Controller3RunEv+0x250>)
 80012b4:	2209      	movs	r2, #9
 80012b6:	601a      	str	r2, [r3, #0]
        }
        SetState(State::WAIT_FOR_INPUT);
 80012b8:	2101      	movs	r1, #1
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fed4 	bl	8001068 <_ZN10Controller8SetStateE5State>
        break;
 80012c0:	e004      	b.n	80012cc <_ZN10Controller3RunEv+0x248>
    default:
        break;
 80012c2:	bf00      	nop
 80012c4:	e002      	b.n	80012cc <_ZN10Controller3RunEv+0x248>
        break;
 80012c6:	bf00      	nop
 80012c8:	e000      	b.n	80012cc <_ZN10Controller3RunEv+0x248>
        break;
 80012ca:	bf00      	nop
    }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000264 	.word	0x20000264
 80012d8:	200001f8 	.word	0x200001f8
 80012dc:	20000210 	.word	0x20000210
 80012e0:	2000017c 	.word	0x2000017c
 80012e4:	200001c0 	.word	0x200001c0
 80012e8:	200001dc 	.word	0x200001dc
 80012ec:	200001a4 	.word	0x200001a4
 80012f0:	66666667 	.word	0x66666667

080012f4 <_ZN13LedController8GetStateEv>:

/*
 * Helpers
 */
LedState LedController::GetState()
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return STATE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_ZN13LedController8SetStateE8LedState>:

void LedController::SetState(LedState to)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
    STATE = to;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	605a      	str	r2, [r3, #4]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <_ZN13LedController3RunEv>:

/*
 * Entry point
 */
void LedController::Run()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    /*
     * Controls the test LED
     */
    switch (GetState()) {
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffe1 	bl	80012f4 <_ZN13LedController8GetStateEv>
 8001332:	4603      	mov	r3, r0
 8001334:	2b02      	cmp	r3, #2
 8001336:	d024      	beq.n	8001382 <_ZN13LedController3RunEv+0x5e>
 8001338:	2b02      	cmp	r3, #2
 800133a:	dc33      	bgt.n	80013a4 <_ZN13LedController3RunEv+0x80>
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <_ZN13LedController3RunEv+0x22>
 8001340:	2b01      	cmp	r3, #1
 8001342:	d00d      	beq.n	8001360 <_ZN13LedController3RunEv+0x3c>
            g_TimerTestLed.Start();
            SetState(LedState::ON);
        }
        break;
    default:
        break;
 8001344:	e02e      	b.n	80013a4 <_ZN13LedController3RunEv+0x80>
        g_TimerTestLed.Set(ONE_SECOND); // 1000
 8001346:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <_ZN13LedController3RunEv+0x94>)
 800134c:	f7ff fdc6 	bl	8000edc <_ZN5Timer3SetEi>
        g_TimerTestLed.Start();
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <_ZN13LedController3RunEv+0x94>)
 8001352:	f7ff fdaa 	bl	8000eaa <_ZN5Timer5StartEv>
        SetState(LedState::ON);
 8001356:	2101      	movs	r1, #1
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffd6 	bl	800130a <_ZN13LedController8SetStateE8LedState>
        break;
 800135e:	e026      	b.n	80013ae <_ZN13LedController3RunEv+0x8a>
        g_LedTest.On();
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <_ZN13LedController3RunEv+0x98>)
 8001362:	f7fe ff1f 	bl	80001a4 <_ZN3Led2OnEv>
        if (g_TimerTestLed.HasSignal()) {
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <_ZN13LedController3RunEv+0x94>)
 8001368:	f7ff fd8c 	bl	8000e84 <_ZN5Timer9HasSignalEv>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01a      	beq.n	80013a8 <_ZN13LedController3RunEv+0x84>
            g_TimerTestLed.Start();
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <_ZN13LedController3RunEv+0x94>)
 8001374:	f7ff fd99 	bl	8000eaa <_ZN5Timer5StartEv>
            SetState(LedState::OFF);
 8001378:	2102      	movs	r1, #2
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffc5 	bl	800130a <_ZN13LedController8SetStateE8LedState>
        break;
 8001380:	e012      	b.n	80013a8 <_ZN13LedController3RunEv+0x84>
        g_LedTest.Off();
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <_ZN13LedController3RunEv+0x98>)
 8001384:	f7fe ff26 	bl	80001d4 <_ZN3Led3OffEv>
        if (g_TimerTestLed.HasSignal()) {
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <_ZN13LedController3RunEv+0x94>)
 800138a:	f7ff fd7b 	bl	8000e84 <_ZN5Timer9HasSignalEv>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <_ZN13LedController3RunEv+0x88>
            g_TimerTestLed.Start();
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <_ZN13LedController3RunEv+0x94>)
 8001396:	f7ff fd88 	bl	8000eaa <_ZN5Timer5StartEv>
            SetState(LedState::ON);
 800139a:	2101      	movs	r1, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffb4 	bl	800130a <_ZN13LedController8SetStateE8LedState>
        break;
 80013a2:	e003      	b.n	80013ac <_ZN13LedController3RunEv+0x88>
        break;
 80013a4:	bf00      	nop
 80013a6:	e002      	b.n	80013ae <_ZN13LedController3RunEv+0x8a>
        break;
 80013a8:	bf00      	nop
 80013aa:	e000      	b.n	80013ae <_ZN13LedController3RunEv+0x8a>
        break;
 80013ac:	bf00      	nop
    }
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000204 	.word	0x20000204
 80013bc:	2000011c 	.word	0x2000011c

080013c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e6:	f7ff fd34 	bl	8000e52 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f001 fb19 	bl	8002a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ee:	f7ff fb5f 	bl	8000ab0 <main>
  bx lr
 80013f2:	4770      	bx	lr
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80013fc:	08002b9c 	.word	0x08002b9c
  ldr r2, =_sbss
 8001400:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001404:	20000270 	.word	0x20000270

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x28>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x28>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f923 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fc6a 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f93b 	bl	80016d2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f903 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000002c 	.word	0x2000002c
 8001490:	20000034 	.word	0x20000034
 8001494:	20000030 	.word	0x20000030

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000034 	.word	0x20000034
 80014b8:	20000268 	.word	0x20000268

080014bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	20000268 	.word	0x20000268

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2d 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff42 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e161      	b.n	80019c4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8150 	bne.w	80019be <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a97      	ldr	r2, [pc, #604]	; (8001980 <HAL_GPIO_Init+0x294>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <HAL_GPIO_Init+0x294>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a95      	ldr	r2, [pc, #596]	; (8001984 <HAL_GPIO_Init+0x298>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a93      	ldr	r2, [pc, #588]	; (8001984 <HAL_GPIO_Init+0x298>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a93      	ldr	r2, [pc, #588]	; (8001988 <HAL_GPIO_Init+0x29c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a91      	ldr	r2, [pc, #580]	; (8001988 <HAL_GPIO_Init+0x29c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a91      	ldr	r2, [pc, #580]	; (800198c <HAL_GPIO_Init+0x2a0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a8f      	ldr	r2, [pc, #572]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a8f      	ldr	r2, [pc, #572]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a8d      	ldr	r2, [pc, #564]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a76      	ldr	r2, [pc, #472]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80a9 	beq.w	80019be <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a49      	ldr	r2, [pc, #292]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_GPIO_Init+0x2b4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x1dc>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3b      	ldr	r2, [pc, #236]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_Init+0x1d8>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1e2>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1e2>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1e2>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	492b      	ldr	r1, [pc, #172]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4927      	ldr	r1, [pc, #156]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001910:	4013      	ands	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4921      	ldr	r1, [pc, #132]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491d      	ldr	r1, [pc, #116]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4917      	ldr	r1, [pc, #92]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4913      	ldr	r1, [pc, #76]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001960:	4013      	ands	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01f      	beq.n	80019b0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	490d      	ldr	r1, [pc, #52]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e01f      	b.n	80019be <HAL_GPIO_Init+0x2d2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_GPIO_Init+0x2f4>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <HAL_GPIO_Init+0x2f4>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	3301      	adds	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f47f ae96 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	372c      	adds	r7, #44	; 0x2c
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e001      	b.n	8001a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a22:	787b      	ldrb	r3, [r7, #1]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	041a      	lsls	r2, r3, #16
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e272      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e24c      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fccc 	bl	80014bc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fcc8 	bl	80014bc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e200      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fcb8 	bl	80014bc <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fcb4 	bl	80014bc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1ec      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c0      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fc6d 	bl	80014bc <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc69 	bl	80014bc <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc4c 	bl	80014bc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc48 	bl	80014bc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e180      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fc2c 	bl	80014bc <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc28 	bl	80014bc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e160      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 faa6 	bl	80021d8 <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fc12 	bl	80014bc <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc0e 	bl	80014bc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e146      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a87      	ldr	r2, [pc, #540]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b82      	ldr	r3, [pc, #520]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fbcf 	bl	80014bc <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff fbcb 	bl	80014bc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	; 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e103      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a69      	ldr	r2, [pc, #420]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a66      	ldr	r2, [pc, #408]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a60      	ldr	r2, [pc, #384]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fb7f 	bl	80014bc <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fb7b 	bl	80014bc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0b1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb69 	bl	80014bc <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fb65 	bl	80014bc <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e09b      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff fb39 	bl	80014bc <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff fb35 	bl	80014bc <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e06d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4921      	ldr	r1, [pc, #132]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	491b      	ldr	r1, [pc, #108]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fb09 	bl	80014bc <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff fb05 	bl	80014bc <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e035      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff faf2 	bl	80014bc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff faee 	bl	80014bc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e026      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e01e      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e019      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x500>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d0      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4965      	ldr	r1, [pc, #404]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d040      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e073      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b39      	ldr	r3, [pc, #228]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4936      	ldr	r1, [pc, #216]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fa40 	bl	80014bc <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff fa3c 	bl	80014bc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e053      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d210      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4922      	ldr	r1, [pc, #136]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1cc>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f99e 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40021000 	.word	0x40021000
 8002110:	08002b68 	.word	0x08002b68
 8002114:	2000002c 	.word	0x2000002c
 8002118:	20000030 	.word	0x20000030

0800211c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b490      	push	{r4, r7}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002124:	1d3c      	adds	r4, r7, #4
 8002126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800212c:	f240 2301 	movw	r3, #513	; 0x201
 8002130:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d002      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x40>
 8002156:	2b08      	cmp	r3, #8
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x46>
 800215a:	e02b      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800215e:	623b      	str	r3, [r7, #32]
      break;
 8002160:	e02b      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3328      	adds	r3, #40	; 0x28
 800216c:	443b      	add	r3, r7
 800216e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002172:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0c5b      	lsrs	r3, r3, #17
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	3328      	adds	r3, #40	; 0x28
 800218a:	443b      	add	r3, r7
 800218c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002190:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002196:	fb03 f202 	mul.w	r2, r3, r2
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	e004      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	623b      	str	r3, [r7, #32]
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b6:	623b      	str	r3, [r7, #32]
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc90      	pop	{r4, r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	08002b28 	.word	0x08002b28
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <RCC_Delay+0x34>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <RCC_Delay+0x38>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f4:	bf00      	nop
  }
  while (Delay --);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	60fa      	str	r2, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <RCC_Delay+0x1c>
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	2000002c 	.word	0x2000002c
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e041      	b.n	80022aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fd92 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f000 fa6a 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d001      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e035      	b.n	8002338 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_TIM_Base_Start_IT+0x90>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0x4e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0x4e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_TIM_Base_Start_IT+0x94>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d010      	beq.n	8002336 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	e007      	b.n	8002336 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9b1 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9a4 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f9b3 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f987 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f97a 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f989 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f95d 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f950 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f95f 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f933 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f926 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f935 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fb0a 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa67 	bl	80029ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8f9 	bl	800271a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0220 	mvn.w	r2, #32
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa32 	bl	80029b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_TIM_ConfigClockSource+0x18>
 8002570:	2302      	movs	r3, #2
 8002572:	e0b3      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x180>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002592:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ac:	d03e      	beq.n	800262c <HAL_TIM_ConfigClockSource+0xd0>
 80025ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b2:	f200 8087 	bhi.w	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	f000 8085 	beq.w	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d87f      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025c4:	2b70      	cmp	r3, #112	; 0x70
 80025c6:	d01a      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0xa2>
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d87b      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025cc:	2b60      	cmp	r3, #96	; 0x60
 80025ce:	d050      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x116>
 80025d0:	2b60      	cmp	r3, #96	; 0x60
 80025d2:	d877      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025d4:	2b50      	cmp	r3, #80	; 0x50
 80025d6:	d03c      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0xf6>
 80025d8:	2b50      	cmp	r3, #80	; 0x50
 80025da:	d873      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d058      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x136>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d86f      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025e4:	2b30      	cmp	r3, #48	; 0x30
 80025e6:	d064      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
 80025e8:	2b30      	cmp	r3, #48	; 0x30
 80025ea:	d86b      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d060      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d867      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d05c      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d05a      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025fc:	e062      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f000 f95c 	bl	80028ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002620:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
      break;
 800262a:	e04e      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f000 f945 	bl	80028ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264e:	609a      	str	r2, [r3, #8]
      break;
 8002650:	e03b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	f000 f8bc 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2150      	movs	r1, #80	; 0x50
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f913 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002670:	e02b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	461a      	mov	r2, r3
 8002680:	f000 f8da 	bl	8002838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2160      	movs	r1, #96	; 0x60
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f903 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002690:	e01b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 f89c 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8f3 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 80026b0:	e00b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f000 f8ea 	bl	8002896 <TIM_ITRx_SetConfig>
        break;
 80026c2:	e002      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <TIM_Base_SetConfig+0xa8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <TIM_Base_SetConfig+0xac>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <TIM_Base_SetConfig+0xa8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <TIM_Base_SetConfig+0xac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <TIM_Base_SetConfig+0xa8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 030a 	bic.w	r3, r3, #10
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 0210 	bic.w	r2, r3, #16
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e041      	b.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d004      	beq.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10c      	bne.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400

080029b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <__cxa_pure_virtual>:
 80029dc:	b508      	push	{r3, lr}
 80029de:	f000 f80d 	bl	80029fc <_ZSt9terminatev>

080029e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80029e2:	b508      	push	{r3, lr}
 80029e4:	4780      	blx	r0
 80029e6:	f000 f80e 	bl	8002a06 <abort>
	...

080029ec <_ZSt13get_terminatev>:
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <_ZSt13get_terminatev+0xc>)
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f3bf 8f5b 	dmb	ish
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000038 	.word	0x20000038

080029fc <_ZSt9terminatev>:
 80029fc:	b508      	push	{r3, lr}
 80029fe:	f7ff fff5 	bl	80029ec <_ZSt13get_terminatev>
 8002a02:	f7ff ffee 	bl	80029e2 <_ZN10__cxxabiv111__terminateEPFvvE>

08002a06 <abort>:
 8002a06:	2006      	movs	r0, #6
 8002a08:	b508      	push	{r3, lr}
 8002a0a:	f000 f85d 	bl	8002ac8 <raise>
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7fe fa15 	bl	8000e3e <_exit>

08002a14 <__errno>:
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <__errno+0x8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000003c 	.word	0x2000003c

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2600      	movs	r6, #0
 8002a24:	4d0c      	ldr	r5, [pc, #48]	; (8002a58 <__libc_init_array+0x38>)
 8002a26:	4c0d      	ldr	r4, [pc, #52]	; (8002a5c <__libc_init_array+0x3c>)
 8002a28:	1b64      	subs	r4, r4, r5
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	f000 f866 	bl	8002b00 <_init>
 8002a34:	2600      	movs	r6, #0
 8002a36:	4d0a      	ldr	r5, [pc, #40]	; (8002a60 <__libc_init_array+0x40>)
 8002a38:	4c0a      	ldr	r4, [pc, #40]	; (8002a64 <__libc_init_array+0x44>)
 8002a3a:	1b64      	subs	r4, r4, r5
 8002a3c:	10a4      	asrs	r4, r4, #2
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	08002b90 	.word	0x08002b90
 8002a5c:	08002b90 	.word	0x08002b90
 8002a60:	08002b90 	.word	0x08002b90
 8002a64:	08002b98 	.word	0x08002b98

08002a68 <memset>:
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4402      	add	r2, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <_raise_r>:
 8002a78:	291f      	cmp	r1, #31
 8002a7a:	b538      	push	{r3, r4, r5, lr}
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	460d      	mov	r5, r1
 8002a80:	d904      	bls.n	8002a8c <_raise_r+0x14>
 8002a82:	2316      	movs	r3, #22
 8002a84:	6003      	str	r3, [r0, #0]
 8002a86:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002a8e:	b112      	cbz	r2, 8002a96 <_raise_r+0x1e>
 8002a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a94:	b94b      	cbnz	r3, 8002aaa <_raise_r+0x32>
 8002a96:	4620      	mov	r0, r4
 8002a98:	f000 f830 	bl	8002afc <_getpid_r>
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aa6:	f000 b817 	b.w	8002ad8 <_kill_r>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d00a      	beq.n	8002ac4 <_raise_r+0x4c>
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	d103      	bne.n	8002aba <_raise_r+0x42>
 8002ab2:	2316      	movs	r3, #22
 8002ab4:	6003      	str	r3, [r0, #0]
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	e7e7      	b.n	8002a8a <_raise_r+0x12>
 8002aba:	2400      	movs	r4, #0
 8002abc:	4628      	mov	r0, r5
 8002abe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002ac2:	4798      	blx	r3
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	e7e0      	b.n	8002a8a <_raise_r+0x12>

08002ac8 <raise>:
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <raise+0xc>)
 8002aca:	4601      	mov	r1, r0
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	f7ff bfd3 	b.w	8002a78 <_raise_r>
 8002ad2:	bf00      	nop
 8002ad4:	2000003c 	.word	0x2000003c

08002ad8 <_kill_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	2300      	movs	r3, #0
 8002adc:	4d06      	ldr	r5, [pc, #24]	; (8002af8 <_kill_r+0x20>)
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	602b      	str	r3, [r5, #0]
 8002ae6:	f7fe f99a 	bl	8000e1e <_kill>
 8002aea:	1c43      	adds	r3, r0, #1
 8002aec:	d102      	bne.n	8002af4 <_kill_r+0x1c>
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	b103      	cbz	r3, 8002af4 <_kill_r+0x1c>
 8002af2:	6023      	str	r3, [r4, #0]
 8002af4:	bd38      	pop	{r3, r4, r5, pc}
 8002af6:	bf00      	nop
 8002af8:	2000026c 	.word	0x2000026c

08002afc <_getpid_r>:
 8002afc:	f7fe b988 	b.w	8000e10 <_getpid>

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
