
Lab_5_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b24  08004b24  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004b24  08004b24  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b24  08004b24  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000088  08004bbc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08004bbc  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236b8  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c90  00000000  00000000  00043769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00048400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  000494e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccdd  00000000  00000000  0004a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e1e  00000000  00000000  00067125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cda4  00000000  00000000  0007df43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ace7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e64  00000000  00000000  0011ad38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080049e0 	.word	0x080049e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080049e0 	.word	0x080049e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN4ILedC1Ev>:
 */

#ifndef INC_MODEL_LED_H_
#define INC_MODEL_LED_H_

class ILed {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4a04      	ldr	r2, [pc, #16]	; (8000178 <_ZN4ILedC1Ev+0x1c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4618      	mov	r0, r3
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	08004a44 	.word	0x08004a44

0800017c <_ZN3LedC1EP6Output>:
 *      Author: Nguyen Tran
 */

#include <component/led.h>

Led::Led(Output* pin)
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	4618      	mov	r0, r3
 800018a:	f7ff ffe7 	bl	800015c <_ZN4ILedC1Ev>
 800018e:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <_ZN3LedC1EP6Output+0x34>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2200      	movs	r2, #0
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	721a      	strb	r2, [r3, #8]
{
    m_Pin = pin;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	683a      	ldr	r2, [r7, #0]
 80001a4:	605a      	str	r2, [r3, #4]
}
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4618      	mov	r0, r3
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	08004a34 	.word	0x08004a34

080001b4 <_ZN3Led2OnEv>:

/*
 * Controls
 */
void Led::On()
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
    if (m_Pin->IsSet()) {
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fd0c 	bl	8000bde <_ZN6Output5IsSetEv>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d004      	beq.n	80001d6 <_ZN3Led2OnEv+0x22>
        m_Pin->Reset();
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fd22 	bl	8000c1a <_ZN6Output5ResetEv>
    }
    m_IsOn = true;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2201      	movs	r2, #1
 80001da:	721a      	strb	r2, [r3, #8]
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <_ZN3Led3OffEv>:

void Led::Off()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    if (!m_Pin->IsSet()) {
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fcf4 	bl	8000bde <_ZN6Output5IsSetEv>
 80001f6:	4603      	mov	r3, r0
 80001f8:	f083 0301 	eor.w	r3, r3, #1
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d004      	beq.n	800020c <_ZN3Led3OffEv+0x28>
        m_Pin->Set();
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fcf4 	bl	8000bf4 <_ZN6Output3SetEv>
    }
    m_IsOn = false;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2200      	movs	r2, #0
 8000210:	721a      	strb	r2, [r3, #8]
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <_ZN11IControllerC1Ev>:
 */

#ifndef INC_HELPER_CONTROLLER_H_
#define INC_HELPER_CONTROLLER_H_

class IController {
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <_ZN11IControllerC1Ev+0x1c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	08004a54 	.word	0x08004a54

0800023c <_ZN13CommandParserC1Ev>:

#include "global.h"
#include "state.h"
#include <string>

class CommandParser : public IController {
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffe8 	bl	800021c <_ZN11IControllerC1Ev>
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <_ZN13CommandParserC1Ev+0x64>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4618      	mov	r0, r3
 800025e:	f003 fcc6 	bl	8003bee <_ZNSaIcEC1Ev>
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	461a      	mov	r2, r3
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <_ZN13CommandParserC1Ev+0x68>)
 800026a:	4620      	mov	r0, r4
 800026c:	f003 fe54 	bl	8003f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000270:	f107 030c 	add.w	r3, r7, #12
 8000274:	4618      	mov	r0, r3
 8000276:	f003 fcbb 	bl	8003bf0 <_ZNSaIcED1Ev>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2200      	movs	r2, #0
 8000294:	645a      	str	r2, [r3, #68]	; 0x44
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4618      	mov	r0, r3
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bd90      	pop	{r4, r7, pc}
 80002a0:	08004a78 	.word	0x08004a78
 80002a4:	080049f8 	.word	0x080049f8

080002a8 <_ZN13CommandParserD1Ev>:
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <_ZN13CommandParserD1Ev+0x24>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3324      	adds	r3, #36	; 0x24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fd3a 	bl	8003d34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4618      	mov	r0, r3
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	08004a78 	.word	0x08004a78

080002d0 <_Z41__static_initialization_and_destruction_0ii>:
 * Services
 */
Controller g_Controller;
LedController g_Led_Controller;
SensorReader g_SensorReader;
CommandParser g_CommandParser;
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d125      	bne.n	800032c <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d120      	bne.n	800032c <_Z41__static_initialization_and_destruction_0ii+0x5c>
Timer g_Timer;
 80002ea:	4818      	ldr	r0, [pc, #96]	; (800034c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80002ec:	f000 fbd4 	bl	8000a98 <_ZN5TimerC1Ev>
Timer g_TimerSensorReader;
 80002f0:	4817      	ldr	r0, [pc, #92]	; (8000350 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80002f2:	f000 fbd1 	bl	8000a98 <_ZN5TimerC1Ev>
Timer g_TimerParser;
 80002f6:	4817      	ldr	r0, [pc, #92]	; (8000354 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80002f8:	f000 fbce 	bl	8000a98 <_ZN5TimerC1Ev>
Scheduler g_Scheduler;
 80002fc:	4816      	ldr	r0, [pc, #88]	; (8000358 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80002fe:	f000 fbb3 	bl	8000a68 <_ZN9SchedulerC1Ev>
UARTInput uart2(&huart2, USART2);
 8000302:	4a16      	ldr	r2, [pc, #88]	; (800035c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000304:	4916      	ldr	r1, [pc, #88]	; (8000360 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000306:	4817      	ldr	r0, [pc, #92]	; (8000364 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000308:	f000 fcad 	bl	8000c66 <_ZN9UARTInputC1EP20__UART_HandleTypeDefP13USART_TypeDef>
ADCInput adc2(&hadc1);
 800030c:	4916      	ldr	r1, [pc, #88]	; (8000368 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800030e:	4817      	ldr	r0, [pc, #92]	; (800036c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000310:	f000 fc31 	bl	8000b76 <_ZN8ADCInputC1EP19__ADC_HandleTypeDef>
Output o_YEL_1(O_YEL_1_GPIO_Port, O_YEL_1_Pin);
 8000314:	2220      	movs	r2, #32
 8000316:	4916      	ldr	r1, [pc, #88]	; (8000370 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000318:	4816      	ldr	r0, [pc, #88]	; (8000374 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800031a:	f000 fc4b 	bl	8000bb4 <_ZN6OutputC1EP12GPIO_TypeDeft>
Led g_Yel_LED(&o_YEL_1);
 800031e:	4915      	ldr	r1, [pc, #84]	; (8000374 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000320:	4815      	ldr	r0, [pc, #84]	; (8000378 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8000322:	f7ff ff2b 	bl	800017c <_ZN3LedC1EP6Output>
CommandParser g_CommandParser;
 8000326:	4815      	ldr	r0, [pc, #84]	; (800037c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000328:	f7ff ff88 	bl	800023c <_ZN13CommandParserC1Ev>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000338:	4293      	cmp	r3, r2
 800033a:	d102      	bne.n	8000342 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800033c:	480f      	ldr	r0, [pc, #60]	; (800037c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800033e:	f7ff ffb3 	bl	80002a8 <_ZN13CommandParserD1Ev>
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000164 	.word	0x20000164
 8000350:	20000170 	.word	0x20000170
 8000354:	2000017c 	.word	0x2000017c
 8000358:	20000188 	.word	0x20000188
 800035c:	40004400 	.word	0x40004400
 8000360:	2000011c 	.word	0x2000011c
 8000364:	200004ac 	.word	0x200004ac
 8000368:	200000a4 	.word	0x200000a4
 800036c:	200004b4 	.word	0x200004b4
 8000370:	40010800 	.word	0x40010800
 8000374:	200004b8 	.word	0x200004b8
 8000378:	200004c0 	.word	0x200004c0
 800037c:	200004cc 	.word	0x200004cc

08000380 <_GLOBAL__sub_I_hadc1>:
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
 8000384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000388:	2001      	movs	r0, #1
 800038a:	f7ff ffa1 	bl	80002d0 <_Z41__static_initialization_and_destruction_0ii>
 800038e:	bd80      	pop	{r7, pc}

08000390 <_GLOBAL__sub_D_hadc1>:
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
 8000394:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ff99 	bl	80002d0 <_Z41__static_initialization_and_destruction_0ii>
 800039e:	bd80      	pop	{r7, pc}

080003a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80003a4:	f000 ff5a 	bl	800125c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80003a8:	f000 f870 	bl	800048c <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80003ac:	f000 f9a0 	bl	80006f0 <_ZL12MX_GPIO_Initv>
    MX_TIM2_Init();
 80003b0:	f000 f914 	bl	80005dc <_ZL12MX_TIM2_Initv>
    MX_USART2_UART_Init();
 80003b4:	f000 f96e 	bl	8000694 <_ZL19MX_USART2_UART_Initv>
    MX_ADC1_Init();
 80003b8:	f000 f8c8 	bl	800054c <_ZL12MX_ADC1_Initv>

    HAL_TIM_Base_Start_IT(&htim2);
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <main+0x48>)
 80003be:	f002 fb47 	bl	8002a50 <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start(&hadc1);
 80003c2:	480a      	ldr	r0, [pc, #40]	; (80003ec <main+0x4c>)
 80003c4:	f001 f884 	bl	80014d0 <HAL_ADC_Start>
    /* USER CODE BEGIN 2 */
    /* UART Helper */
    uart2.Receive(&g_Temp, 1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	4909      	ldr	r1, [pc, #36]	; (80003f0 <main+0x50>)
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <main+0x54>)
 80003ce:	f000 fc80 	bl	8000cd2 <_ZN9UARTInput7ReceiveEPht>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        g_Led_Controller.Run();
 80003d2:	4809      	ldr	r0, [pc, #36]	; (80003f8 <main+0x58>)
 80003d4:	f000 fe2c 	bl	8001030 <_ZN13LedController3RunEv>
        g_SensorReader.Run();
 80003d8:	4808      	ldr	r0, [pc, #32]	; (80003fc <main+0x5c>)
 80003da:	f000 fe8f 	bl	80010fc <_ZN12SensorReader3RunEv>
        g_CommandParser.Run();
 80003de:	4808      	ldr	r0, [pc, #32]	; (8000400 <main+0x60>)
 80003e0:	f000 fca2 	bl	8000d28 <_ZN13CommandParser3RunEv>
        g_Led_Controller.Run();
 80003e4:	e7f5      	b.n	80003d2 <main+0x32>
 80003e6:	bf00      	nop
 80003e8:	200000d4 	.word	0x200000d4
 80003ec:	200000a4 	.word	0x200000a4
 80003f0:	20000160 	.word	0x20000160
 80003f4:	200004ac 	.word	0x200004ac
 80003f8:	20000000 	.word	0x20000000
 80003fc:	20000008 	.word	0x20000008
 8000400:	200004cc 	.word	0x200004cc

08000404 <HAL_TIM_PeriodElapsedCallback>:
    }
    /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    /*
     * Timers
     */
    g_Timer.Breath();
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800040e:	f000 fb97 	bl	8000b40 <_ZN5Timer6BreathEv>
    g_TimerSensorReader.Breath();
 8000412:	4806      	ldr	r0, [pc, #24]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000414:	f000 fb94 	bl	8000b40 <_ZN5Timer6BreathEv>
    g_TimerParser.Breath();
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800041a:	f000 fb91 	bl	8000b40 <_ZN5Timer6BreathEv>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000164 	.word	0x20000164
 800042c:	20000170 	.word	0x20000170
 8000430:	2000017c 	.word	0x2000017c

08000434 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    /*
     * Inputs
     */
    /* Send back any character received from the terminal */
    if (huart->Instance == uart2.GetInstance()) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681c      	ldr	r4, [r3, #0]
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <HAL_UART_RxCpltCallback+0x4c>)
 8000442:	f000 fc28 	bl	8000c96 <_ZN9UARTInput11GetInstanceEv>
 8000446:	4603      	mov	r3, r0
 8000448:	429c      	cmp	r4, r3
 800044a:	bf0c      	ite	eq
 800044c:	2301      	moveq	r3, #1
 800044e:	2300      	movne	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d010      	beq.n	8000478 <HAL_UART_RxCpltCallback+0x44>
        g_CommandParser.BufferAdd(g_Temp);
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <HAL_UART_RxCpltCallback+0x50>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4619      	mov	r1, r3
 800045c:	480a      	ldr	r0, [pc, #40]	; (8000488 <HAL_UART_RxCpltCallback+0x54>)
 800045e:	f000 fd3b 	bl	8000ed8 <_ZN13CommandParser9BufferAddEh>
        uart2.Transmit(&g_Temp, 1, 50);
 8000462:	2332      	movs	r3, #50	; 0x32
 8000464:	2201      	movs	r2, #1
 8000466:	4907      	ldr	r1, [pc, #28]	; (8000484 <HAL_UART_RxCpltCallback+0x50>)
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <HAL_UART_RxCpltCallback+0x4c>)
 800046a:	f000 fc1f 	bl	8000cac <_ZN9UARTInput8TransmitEPhtm>
        uart2.Receive(&g_Temp, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	4904      	ldr	r1, [pc, #16]	; (8000484 <HAL_UART_RxCpltCallback+0x50>)
 8000472:	4803      	ldr	r0, [pc, #12]	; (8000480 <HAL_UART_RxCpltCallback+0x4c>)
 8000474:	f000 fc2d 	bl	8000cd2 <_ZN9UARTInput7ReceiveEPht>
    }
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bd90      	pop	{r4, r7, pc}
 8000480:	200004ac 	.word	0x200004ac
 8000484:	20000160 	.word	0x20000160
 8000488:	200004cc 	.word	0x200004cc

0800048c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b094      	sub	sp, #80	; 0x50
 8000490:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000496:	2228      	movs	r2, #40	; 0x28
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fe10 	bl	80040c0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004bc:	2302      	movs	r3, #2
 80004be:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c0:	2301      	movs	r3, #1
 80004c2:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c4:	2310      	movs	r3, #16
 80004c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fd9d 	bl	8002010 <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	bf14      	ite	ne
 80004dc:	2301      	movne	r3, #1
 80004de:	2300      	moveq	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <_Z18SystemClock_Configv+0x5e>
        Error_Handler();
 80004e6:	f000 f935 	bl	8000754 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	617b      	str	r3, [r7, #20]
        | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f002 f805 	bl	8002514 <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <_Z18SystemClock_Configv+0x92>
        Error_Handler();
 800051a:	f000 f91b 	bl	8000754 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800051e:	2302      	movs	r3, #2
 8000520:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4618      	mov	r0, r3
 800052a:	f002 f98b 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	bf14      	ite	ne
 8000534:	2301      	movne	r3, #1
 8000536:	2300      	moveq	r3, #0
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <_Z18SystemClock_Configv+0xb6>
        Error_Handler();
 800053e:	f000 f909 	bl	8000754 <Error_Handler>
    }
}
 8000542:	bf00      	nop
 8000544:	3750      	adds	r7, #80	; 0x50
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <_ZL12MX_ADC1_Initv+0x8c>)
 8000560:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 800056a:	2201      	movs	r2, #1
 800056c:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 8000570:	2200      	movs	r2, #0
 8000572:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 8000576:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800057a:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 8000584:	2201      	movs	r2, #1
 8000586:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 800058a:	f000 fec9 	bl	8001320 <HAL_ADC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <_ZL12MX_ADC1_Initv+0x56>
        Error_Handler();
 800059e:	f000 f8d9 	bl	8000754 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <_ZL12MX_ADC1_Initv+0x88>)
 80005b4:	f001 f846 	bl	8001644 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf14      	ite	ne
 80005be:	2301      	movne	r3, #1
 80005c0:	2300      	moveq	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <_ZL12MX_ADC1_Initv+0x80>
        Error_Handler();
 80005c8:	f000 f8c4 	bl	8000754 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000a4 	.word	0x200000a4
 80005d8:	40012400 	.word	0x40012400

080005dc <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 80005fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fe:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7999;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 8000602:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000606:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 8000610:	2209      	movs	r2, #9
 8000612:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 8000622:	f002 f9c5 	bl	80029b0 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <_ZL12MX_TIM2_Initv+0x5e>
        Error_Handler();
 8000636:	f000 f88d 	bl	8000754 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	4619      	mov	r1, r3
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 8000648:	f002 fb56 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <_ZL12MX_TIM2_Initv+0x84>
        Error_Handler();
 800065c:	f000 f87a 	bl	8000754 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <_ZL12MX_TIM2_Initv+0xb4>)
 800066e:	f002 fd19 	bl	80030a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <_ZL12MX_TIM2_Initv+0xaa>
        Error_Handler();
 8000682:	f000 f867 	bl	8000754 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000d4 	.word	0x200000d4

08000694 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006cc:	f002 fd54 	bl	8003178 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_ZL19MX_USART2_UART_Initv+0x50>
        Error_Handler();
 80006e0:	f000 f838 	bl	8000754 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000011c 	.word	0x2000011c
 80006ec:	40004400 	.word	0x40004400

080006f0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <_ZL12MX_GPIO_Initv+0x5c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <_ZL12MX_GPIO_Initv+0x5c>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <_ZL12MX_GPIO_Initv+0x5c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(O_YEL_1_GPIO_Port, O_YEL_1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2120      	movs	r1, #32
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <_ZL12MX_GPIO_Initv+0x60>)
 8000722:	f001 fc5d 	bl	8001fe0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : O_YEL_1_Pin */
    GPIO_InitStruct.Pin = O_YEL_1_Pin;
 8000726:	2320      	movs	r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(O_YEL_1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <_ZL12MX_GPIO_Initv+0x60>)
 800073e:	f001 fad3 	bl	8001ce8 <HAL_GPIO_Init>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x40>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <HAL_MspInit+0x40>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_MspInit+0x40>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x40>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_MspInit+0x40>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_MspInit+0x40>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <HAL_ADC_MspInit+0x6c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d121      	bne.n	8000808 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_ADC_MspInit+0x70>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <HAL_ADC_MspInit+0x70>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_ADC_MspInit+0x70>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_ADC_MspInit+0x70>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <HAL_ADC_MspInit+0x70>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_ADC_MspInit+0x70>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = UART_VOLT_U2_Pin;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(UART_VOLT_U2_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_ADC_MspInit+0x74>)
 8000804:	f001 fa70 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40012400 	.word	0x40012400
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800082c:	d113      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_TIM_Base_MspInit+0x44>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <HAL_TIM_Base_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x44>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	201c      	movs	r0, #28
 800084c:	f001 f965 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000850:	201c      	movs	r0, #28
 8000852:	f001 f97e 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <HAL_UART_MspInit+0x98>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d137      	bne.n	80008f4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <HAL_UART_MspInit+0x9c>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_UART_MspInit+0x9c>)
 800088a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088e:	61d3      	str	r3, [r2, #28]
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_UART_MspInit+0x9c>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x9c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x9c>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x9c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TER_RXD_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TER_RXD_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <HAL_UART_MspInit+0xa0>)
 80008c8:	f001 fa0e 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_TER_TXD_Pin;
 80008cc:	2308      	movs	r3, #8
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_TER_TXD_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <HAL_UART_MspInit+0xa0>)
 80008e0:	f001 fa02 	bl	8001ce8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2026      	movs	r0, #38	; 0x26
 80008ea:	f001 f916 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ee:	2026      	movs	r0, #38	; 0x26
 80008f0:	f001 f92f 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 fccb 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <TIM2_IRQHandler+0x10>)
 800095e:	f002 f8c3 	bl	8002ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000d4 	.word	0x200000d4

0800096c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <USART2_IRQHandler+0x10>)
 8000972:	f002 fd11 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000011c 	.word	0x2000011c

08000980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	return 1;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <_kill>:

int _kill(int pid, int sig)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000998:	f003 fb12 	bl	8003fc0 <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	2216      	movs	r2, #22
 80009a0:	601a      	str	r2, [r3, #0]
	return -1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_exit>:

void _exit (int status)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009b6:	f04f 31ff 	mov.w	r1, #4294967295
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffe7 	bl	800098e <_kill>
	while (1) {}		/* Make sure we hang here */
 80009c0:	e7fe      	b.n	80009c0 <_exit+0x12>
	...

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f003 fae4 	bl	8003fc0 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20002800 	.word	0x20002800
 8000a24:	00000400 	.word	0x00000400
 8000a28:	20000514 	.word	0x20000514
 8000a2c:	20000530 	.word	0x20000530

08000a30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <_ZN4TaskC1Ev>:

    /*
     * Task ID
     */
    int Id;
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	731a      	strb	r2, [r3, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <_ZN9SchedulerC1Ev>:
 *      Author: ttng
 */

#include "helper/scheduler.h"

Scheduler::Scheduler()
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2427      	movs	r4, #39	; 0x27
 8000a74:	461d      	mov	r5, r3
 8000a76:	2c00      	cmp	r4, #0
 8000a78:	db05      	blt.n	8000a86 <_ZN9SchedulerC1Ev+0x1e>
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	f7ff ffde 	bl	8000a3c <_ZN4TaskC1Ev>
 8000a80:	3514      	adds	r5, #20
 8000a82:	3c01      	subs	r4, #1
 8000a84:	e7f7      	b.n	8000a76 <_ZN9SchedulerC1Ev+0xe>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
{
}
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}

08000a98 <_ZN5TimerC1Ev>:
 *      Author: Nguyen Tran
 */

#include "helper/timer.h"

Timer::Timer() { }
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <_ZN5Timer9HasSignalEv>:

/*
 * Flag check
 */
bool Timer::HasSignal()
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
    if (m_Signal) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <_ZN5Timer9HasSignalEv+0x1a>
        m_Signal = false;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
        return true;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <_ZN5Timer9HasSignalEv+0x1c>
    }
    return false;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <_ZN5Timer5StartEv>:

/*
 * Controls
 */
void Timer::Start() { m_Remaining = m_Duration; }
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <_ZN5Timer5ResetEv>:
void Timer::Reset() { Start(); }
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffec 	bl	8000ae4 <_ZN5Timer5StartEv>
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN5Timer3SetEi>:

void Timer::Set(int duration)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    m_Duration = duration / TICK;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <_ZN5Timer3SetEi+0x28>)
 8000b22:	fb82 1203 	smull	r1, r2, r2, r3
 8000b26:	1092      	asrs	r2, r2, #2
 8000b28:	17db      	asrs	r3, r3, #31
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	605a      	str	r2, [r3, #4]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	66666667 	.word	0x66666667

08000b40 <_ZN5Timer6BreathEv>:

void Timer::Breath()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if (m_Remaining > 0) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd0e      	ble.n	8000b6e <_ZN5Timer6BreathEv+0x2e>
        m_Remaining -= 1;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
        if (m_Remaining == 0) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <_ZN5Timer6BreathEv+0x2e>
            m_Signal = true;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
            Start();
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ffbb 	bl	8000ae4 <_ZN5Timer5StartEv>
        }
    }
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_ZN8ADCInputC1EP19__ADC_HandleTypeDef>:
 *  Created on: Nov 4, 2022
 *      Author: Nguyen Tran
 */
#include "model/adc_input.h"

ADCInput::ADCInput(ADC_HandleTypeDef* def)
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
{
    m_TypeDef = def;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <_ZN8ADCInput3GetEv>:
{
    return m_TypeDef;
}

uint32_t ADCInput::Get()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    return HAL_ADC_GetValue(m_TypeDef);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fd41 	bl	800162c <HAL_ADC_GetValue>
 8000baa:	4603      	mov	r3, r0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_ZN6OutputC1EP12GPIO_TypeDeft>:
Output::Output()
    : Pin()
{
}

Output::Output(GPIO_TypeDef* port, uint16_t pin)
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
    : Pin(port, pin)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	88fa      	ldrh	r2, [r7, #6]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f839 	bl	8000c40 <_ZN3PinC1EP12GPIO_TypeDeft>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	719a      	strb	r2, [r3, #6]
{
}
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_ZN6Output5IsSetEv>:

/*
 * Flag check
 */
bool Output::IsSet()
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
    return m_IsSet;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	799b      	ldrb	r3, [r3, #6]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN6Output3SetEv>:

/*
 * Primitype control
 */
void Output::Set()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_Port, m_Pin, GPIO_PinState::GPIO_PIN_SET);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	889b      	ldrh	r3, [r3, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	f001 f9ea 	bl	8001fe0 <HAL_GPIO_WritePin>
    m_IsSet = true;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	719a      	strb	r2, [r3, #6]
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_ZN6Output5ResetEv>:

void Output::Reset()
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_Port, m_Pin, GPIO_PinState::GPIO_PIN_RESET);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	889b      	ldrh	r3, [r3, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f001 f9d7 	bl	8001fe0 <HAL_GPIO_WritePin>
    m_IsSet = false;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	719a      	strb	r2, [r3, #6]
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZN3PinC1EP12GPIO_TypeDeft>:

#include "model/pin.h"

Pin::Pin() { }

Pin::Pin(GPIO_TypeDef* port, uint16_t pin)
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	80fb      	strh	r3, [r7, #6]
{
    m_Port = port;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	601a      	str	r2, [r3, #0]
    m_Pin = pin;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	809a      	strh	r2, [r3, #4]
}
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <_ZN9UARTInputC1EP20__UART_HandleTypeDefP13USART_TypeDef>:
 *  Created on: Nov 4, 2022
 *      Author: Nguyen Tran
 */
#include "model/uart_input.h"

UARTInput::UARTInput(UART_HandleTypeDef* huart, USART_TypeDef* instance)
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
{
    m_Huart = huart;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	601a      	str	r2, [r3, #0]
    m_UART_Instance = instance;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	605a      	str	r2, [r3, #4]
}
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <_ZN9UARTInput11GetInstanceEv>:
{
    return m_Huart;
}

USART_TypeDef* UARTInput::GetInstance()
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    return m_UART_Instance;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
};
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <_ZN9UARTInput8TransmitEPhtm>:

void UARTInput::Transmit(uint8_t* data, uint16_t size, uint32_t timeout)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(m_Huart, data, size, timeout);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	f002 faa4 	bl	8003212 <HAL_UART_Transmit>
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_ZN9UARTInput7ReceiveEPht>:

void UARTInput::Receive(uint8_t* data, uint16_t size)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive_IT(m_Huart, data, size);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	88fa      	ldrh	r2, [r7, #6]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fb24 	bl	8003336 <HAL_UART_Receive_IT>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_ZN13CommandParser8GetStateEv>:

/*
 * Helpers
 */
CommandParserState CommandParser::GetState()
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
    return STATE;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <_ZN13CommandParser8SetStateE18CommandParserState>:

void CommandParser::SetState(CommandParserState to)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
    STATE = to;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <_ZN13CommandParser3RunEv>:

/*
 * Entry point
 */
void CommandParser::Run()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    switch (GetState()) {
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ffe0 	bl	8000cf6 <_ZN13CommandParser8GetStateEv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	f200 80b9 	bhi.w	8000eb0 <_ZN13CommandParser3RunEv+0x188>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <_ZN13CommandParser3RunEv+0x1c>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000d63 	.word	0x08000d63
 8000d4c:	08000d87 	.word	0x08000d87
 8000d50:	08000e43 	.word	0x08000e43
 8000d54:	08000db1 	.word	0x08000db1
    case CommandParserState::INIT:
        SetState(CommandParserState::WAIT);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffd6 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>
        break;
 8000d60:	e0af      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
    case CommandParserState::WAIT:
        if (m_HasInput) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80a3 	beq.w	8000eb4 <_ZN13CommandParser3RunEv+0x18c>
            /* Start timer to measure timeout */
            g_TimerParser.Start();
 8000d6e:	4857      	ldr	r0, [pc, #348]	; (8000ecc <_ZN13CommandParser3RunEv+0x1a4>)
 8000d70:	f7ff feb8 	bl	8000ae4 <_ZN5Timer5StartEv>

            SetState(CommandParserState::INTERRUPTED);
 8000d74:	2104      	movs	r1, #4
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffc8 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            m_HasInput = false;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        break;
 8000d84:	e096      	b.n	8000eb4 <_ZN13CommandParser3RunEv+0x18c>
    case CommandParserState::WAIT_AND_PRINT:
        if (m_HasInput) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 8093 	beq.w	8000eb8 <_ZN13CommandParser3RunEv+0x190>
            /* Start timer to measure timeout */
            g_TimerParser.Start();
 8000d92:	484e      	ldr	r0, [pc, #312]	; (8000ecc <_ZN13CommandParser3RunEv+0x1a4>)
 8000d94:	f7ff fea6 	bl	8000ae4 <_ZN5Timer5StartEv>

            /* Stop printing data */
            g_F_willPrintData = false;
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <_ZN13CommandParser3RunEv+0x1a8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
            SetState(CommandParserState::INTERRUPTED_WHILE_PRINTING);
 8000d9e:	2103      	movs	r1, #3
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ffb3 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            m_HasInput = false;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        break;
 8000dae:	e083      	b.n	8000eb8 <_ZN13CommandParser3RunEv+0x190>
    case CommandParserState::INTERRUPTED:
        if (_IsAskingForData()) {
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f8ed 	bl	8000f90 <_ZN13CommandParser16_IsAskingForDataEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00e      	beq.n	8000dda <_ZN13CommandParser3RunEv+0xb2>
            /* Print data */
            g_F_willPrintData = true;
 8000dbc:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <_ZN13CommandParser3RunEv+0x1a8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]

            /* Change to data printing state */
            SetState(CommandParserState::WAIT_AND_PRINT);
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffa1 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            _ClearBuffer();
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f8d0 	bl	8000f70 <_ZN13CommandParser12_ClearBufferEv>
            m_HasInput = false;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 8000dd8:	e073      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        }
        if (_IsStop()) {
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f8ea 	bl	8000fb4 <_ZN13CommandParser7_IsStopEv>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00e      	beq.n	8000e04 <_ZN13CommandParser3RunEv+0xdc>
            /* Stop printing */
            g_F_willPrintData = false;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <_ZN13CommandParser3RunEv+0x1a8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

            /* Change to normal waiting state */
            SetState(CommandParserState::WAIT);
 8000dec:	2101      	movs	r1, #1
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff8c 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            _ClearBuffer();
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f8bb 	bl	8000f70 <_ZN13CommandParser12_ClearBufferEv>
            m_HasInput = false;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 8000e02:	e05e      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        }

        if (m_HasInput) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <_ZN13CommandParser3RunEv+0xf6>
            /* If key is pressed again */
            g_Timer.Reset();
 8000e0e:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <_ZN13CommandParser3RunEv+0x1ac>)
 8000e10:	f7ff fe75 	bl	8000afe <_ZN5Timer5ResetEv>
            m_HasInput = false;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 8000e1c:	e051      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        }

        if (g_Timer.HasSignal()) {
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <_ZN13CommandParser3RunEv+0x1ac>)
 8000e20:	f7ff fe4d 	bl	8000abe <_ZN5Timer9HasSignalEv>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d048      	beq.n	8000ebc <_ZN13CommandParser3RunEv+0x194>
            SetState(CommandParserState::WAIT);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff6d 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            _ClearBuffer();
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f89c 	bl	8000f70 <_ZN13CommandParser12_ClearBufferEv>
            m_HasInput = false;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        break;
 8000e40:	e03c      	b.n	8000ebc <_ZN13CommandParser3RunEv+0x194>
    case CommandParserState::INTERRUPTED_WHILE_PRINTING:
        if (_IsStop()) {
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f8b6 	bl	8000fb4 <_ZN13CommandParser7_IsStopEv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00e      	beq.n	8000e6c <_ZN13CommandParser3RunEv+0x144>
            /* Stop printing */
            g_F_willPrintData = false;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <_ZN13CommandParser3RunEv+0x1a8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

            /* Back to normal waiting state */
            SetState(CommandParserState::WAIT);
 8000e54:	2101      	movs	r1, #1
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff58 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            _ClearBuffer();
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f887 	bl	8000f70 <_ZN13CommandParser12_ClearBufferEv>
            m_HasInput = false;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 8000e6a:	e02a      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        }

        if (m_HasInput) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <_ZN13CommandParser3RunEv+0x15e>
            /* If key is pressed again */
            g_Timer.Reset();
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <_ZN13CommandParser3RunEv+0x1ac>)
 8000e78:	f7ff fe41 	bl	8000afe <_ZN5Timer5ResetEv>
            m_HasInput = false;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 8000e84:	e01d      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        }

        if (g_Timer.HasSignal()) {
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <_ZN13CommandParser3RunEv+0x1ac>)
 8000e88:	f7ff fe19 	bl	8000abe <_ZN5Timer9HasSignalEv>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d016      	beq.n	8000ec0 <_ZN13CommandParser3RunEv+0x198>
            /* Continue printing */
            g_F_willPrintData = true;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <_ZN13CommandParser3RunEv+0x1a8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
            SetState(CommandParserState::WAIT_AND_PRINT);
 8000e98:	2102      	movs	r1, #2
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff36 	bl	8000d0c <_ZN13CommandParser8SetStateE18CommandParserState>

            _ClearBuffer();
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f865 	bl	8000f70 <_ZN13CommandParser12_ClearBufferEv>
            m_HasInput = false;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        break;
 8000eae:	e007      	b.n	8000ec0 <_ZN13CommandParser3RunEv+0x198>
    default:
        break;
 8000eb0:	bf00      	nop
 8000eb2:	e006      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        break;
 8000eb4:	bf00      	nop
 8000eb6:	e004      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        break;
 8000eb8:	bf00      	nop
 8000eba:	e002      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        break;
 8000ebc:	bf00      	nop
 8000ebe:	e000      	b.n	8000ec2 <_ZN13CommandParser3RunEv+0x19a>
        break;
 8000ec0:	bf00      	nop
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000017c 	.word	0x2000017c
 8000ed0:	20000161 	.word	0x20000161
 8000ed4:	20000164 	.word	0x20000164

08000ed8 <_ZN13CommandParser9BufferAddEh>:

void CommandParser::BufferAdd(uint8_t updated)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    if (updated == '\n') {
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d104      	bne.n	8000ef4 <_ZN13CommandParser9BufferAddEh+0x1c>
        /* If received new line */
        m_HasInput = true;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        return;
 8000ef2:	e038      	b.n	8000f66 <_ZN13CommandParser9BufferAddEh+0x8e>
    }

    if (m_StringBufLength == MAX_BUFFER_SIZE) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef8:	2b1e      	cmp	r3, #30
 8000efa:	d10d      	bne.n	8000f18 <_ZN13CommandParser9BufferAddEh+0x40>
        /* If buffer string is full (after the first 30 inputs) */
        m_StringBuf[m_BufIndex] = (char)updated;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	f002 ff18 	bl	8003d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000f10:	4602      	mov	r2, r0
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	7013      	strb	r3, [r2, #0]
 8000f16:	e00b      	b.n	8000f30 <_ZN13CommandParser9BufferAddEh+0x58>
    } else {
        m_StringBufLength += 1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c
        m_StringBuf += (char)updated;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3324      	adds	r3, #36	; 0x24
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 ff28 	bl	8003d80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
    }

    m_BufIndex += 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_BufIndex == MAX_BUFFER_SIZE) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f46:	2b1e      	cmp	r3, #30
 8000f48:	d109      	bne.n	8000f5e <_ZN13CommandParser9BufferAddEh+0x86>
        m_BufIndex = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        m_StringBuf = "";
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3324      	adds	r3, #36	; 0x24
 8000f56:	4905      	ldr	r1, [pc, #20]	; (8000f6c <_ZN13CommandParser9BufferAddEh+0x94>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 ffa2 	bl	8003ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
    }

    m_HasInput = true;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	080049fc 	.word	0x080049fc

08000f70 <_ZN13CommandParser12_ClearBufferEv>:

void CommandParser::_ClearBuffer()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    /* Clear buffer */
    m_StringBuf = "";
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3324      	adds	r3, #36	; 0x24
 8000f7c:	4903      	ldr	r1, [pc, #12]	; (8000f8c <_ZN13CommandParser12_ClearBufferEv+0x1c>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ff8f 	bl	8003ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	080049fc 	.word	0x080049fc

08000f90 <_ZN13CommandParser16_IsAskingForDataEv>:

bool CommandParser::_IsAskingForData()
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    /* TODO */
    return (m_StringBuf == "!RST#");
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3324      	adds	r3, #36	; 0x24
 8000f9c:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <_ZN13CommandParser16_IsAskingForDataEv+0x20>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f81a 	bl	8000fd8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08004a00 	.word	0x08004a00

08000fb4 <_ZN13CommandParser7_IsStopEv>:

bool CommandParser::_IsStop()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    /* TODO */
    return (m_StringBuf == "!OK#");
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3324      	adds	r3, #36	; 0x24
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <_ZN13CommandParser7_IsStopEv+0x20>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f808 	bl	8000fd8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08004a08 	.word	0x08004a08

08000fd8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f002 ff60 	bl	8003eaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN13LedController8GetStateEv>:

/*
 * Helpers
 */
LedState LedController::GetState()
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    return STATE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <_ZN13LedController8SetStateE8LedState>:

void LedController::SetState(LedState to)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    STATE = to;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	605a      	str	r2, [r3, #4]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
	...

08001030 <_ZN13LedController3RunEv>:

/*
 * Entry point
 */
void LedController::Run()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    switch (GetState()) {
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe0 	bl	8000ffe <_ZN13LedController8GetStateEv>
 800103e:	4603      	mov	r3, r0
 8001040:	2b02      	cmp	r3, #2
 8001042:	d024      	beq.n	800108e <_ZN13LedController3RunEv+0x5e>
 8001044:	2b02      	cmp	r3, #2
 8001046:	dc33      	bgt.n	80010b0 <_ZN13LedController3RunEv+0x80>
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <_ZN13LedController3RunEv+0x22>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d00d      	beq.n	800106c <_ZN13LedController3RunEv+0x3c>
            g_Timer.Reset();
            SetState(LedState::ON);
        }
        break;
    default:
        break;
 8001050:	e02e      	b.n	80010b0 <_ZN13LedController3RunEv+0x80>
        g_Timer.Set(1000);
 8001052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <_ZN13LedController3RunEv+0x94>)
 8001058:	f7ff fd5c 	bl	8000b14 <_ZN5Timer3SetEi>
        g_Timer.Start();
 800105c:	4819      	ldr	r0, [pc, #100]	; (80010c4 <_ZN13LedController3RunEv+0x94>)
 800105e:	f7ff fd41 	bl	8000ae4 <_ZN5Timer5StartEv>
        SetState(LedState::ON);
 8001062:	2101      	movs	r1, #1
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffd5 	bl	8001014 <_ZN13LedController8SetStateE8LedState>
        break;
 800106a:	e026      	b.n	80010ba <_ZN13LedController3RunEv+0x8a>
        g_Yel_LED.On();
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <_ZN13LedController3RunEv+0x98>)
 800106e:	f7ff f8a1 	bl	80001b4 <_ZN3Led2OnEv>
        if (g_Timer.HasSignal()) {
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <_ZN13LedController3RunEv+0x94>)
 8001074:	f7ff fd23 	bl	8000abe <_ZN5Timer9HasSignalEv>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d01a      	beq.n	80010b4 <_ZN13LedController3RunEv+0x84>
            g_Timer.Reset();
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <_ZN13LedController3RunEv+0x94>)
 8001080:	f7ff fd3d 	bl	8000afe <_ZN5Timer5ResetEv>
            SetState(LedState::OFF);
 8001084:	2102      	movs	r1, #2
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffc4 	bl	8001014 <_ZN13LedController8SetStateE8LedState>
        break;
 800108c:	e012      	b.n	80010b4 <_ZN13LedController3RunEv+0x84>
        g_Yel_LED.Off();
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <_ZN13LedController3RunEv+0x98>)
 8001090:	f7ff f8a8 	bl	80001e4 <_ZN3Led3OffEv>
        if (g_Timer.HasSignal()) {
 8001094:	480b      	ldr	r0, [pc, #44]	; (80010c4 <_ZN13LedController3RunEv+0x94>)
 8001096:	f7ff fd12 	bl	8000abe <_ZN5Timer9HasSignalEv>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <_ZN13LedController3RunEv+0x88>
            g_Timer.Reset();
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <_ZN13LedController3RunEv+0x94>)
 80010a2:	f7ff fd2c 	bl	8000afe <_ZN5Timer5ResetEv>
            SetState(LedState::ON);
 80010a6:	2101      	movs	r1, #1
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffb3 	bl	8001014 <_ZN13LedController8SetStateE8LedState>
        break;
 80010ae:	e003      	b.n	80010b8 <_ZN13LedController3RunEv+0x88>
        break;
 80010b0:	bf00      	nop
 80010b2:	e002      	b.n	80010ba <_ZN13LedController3RunEv+0x8a>
        break;
 80010b4:	bf00      	nop
 80010b6:	e000      	b.n	80010ba <_ZN13LedController3RunEv+0x8a>
        break;
 80010b8:	bf00      	nop
    }
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000164 	.word	0x20000164
 80010c8:	200004c0 	.word	0x200004c0

080010cc <_ZN12SensorReader8GetStateEv>:

/*
 * Helpers
 */
ReaderState SensorReader::GetState()
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    return STATE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_ZN12SensorReader8SetStateE11ReaderState>:

void SensorReader::SetState(ReaderState to)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
    STATE = to;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	605a      	str	r2, [r3, #4]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <_ZN12SensorReader3RunEv>:

/*
 * Entry point
 */
void SensorReader::Run()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    switch (GetState()) {
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffe1 	bl	80010cc <_ZN12SensorReader8GetStateEv>
 800110a:	4603      	mov	r3, r0
 800110c:	2b02      	cmp	r3, #2
 800110e:	d025      	beq.n	800115c <_ZN12SensorReader3RunEv+0x60>
 8001110:	2b02      	cmp	r3, #2
 8001112:	dc49      	bgt.n	80011a8 <_ZN12SensorReader3RunEv+0xac>
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <_ZN12SensorReader3RunEv+0x22>
 8001118:	2b01      	cmp	r3, #1
 800111a:	d028      	beq.n	800116e <_ZN12SensorReader3RunEv+0x72>
            g_TimerSensorReader.Reset();
            SetState(ReaderState::READY);
        }
        break;
    default:
        break;
 800111c:	e044      	b.n	80011a8 <_ZN12SensorReader3RunEv+0xac>
        g_TimerSensorReader.Set(500);
 800111e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001122:	4826      	ldr	r0, [pc, #152]	; (80011bc <_ZN12SensorReader3RunEv+0xc0>)
 8001124:	f7ff fcf6 	bl	8000b14 <_ZN5Timer3SetEi>
        g_TimerSensorReader.Start();
 8001128:	4824      	ldr	r0, [pc, #144]	; (80011bc <_ZN12SensorReader3RunEv+0xc0>)
 800112a:	f7ff fcdb 	bl	8000ae4 <_ZN5Timer5StartEv>
        m_SensorData = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
        if (!g_F_willPrintData) {
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <_ZN12SensorReader3RunEv+0xc4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d004      	beq.n	800114c <_ZN12SensorReader3RunEv+0x50>
            SetState(ReaderState::WAIT);
 8001142:	2102      	movs	r1, #2
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffcc 	bl	80010e2 <_ZN12SensorReader8SetStateE11ReaderState>
            break;
 800114a:	e032      	b.n	80011b2 <_ZN12SensorReader3RunEv+0xb6>
        _ReadSensor();
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f839 	bl	80011c4 <_ZN12SensorReader11_ReadSensorEv>
        SetState(ReaderState::READY);
 8001152:	2101      	movs	r1, #1
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffc4 	bl	80010e2 <_ZN12SensorReader8SetStateE11ReaderState>
        break;
 800115a:	e02a      	b.n	80011b2 <_ZN12SensorReader3RunEv+0xb6>
        if (g_F_willPrintData) {
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <_ZN12SensorReader3RunEv+0xc4>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <_ZN12SensorReader3RunEv+0xb0>
            SetState(ReaderState::INIT);
 8001164:	2100      	movs	r1, #0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffbb 	bl	80010e2 <_ZN12SensorReader8SetStateE11ReaderState>
        break;
 800116c:	e01e      	b.n	80011ac <_ZN12SensorReader3RunEv+0xb0>
        if (!g_F_willPrintData) {
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <_ZN12SensorReader3RunEv+0xc4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <_ZN12SensorReader3RunEv+0x8a>
            SetState(ReaderState::WAIT);
 800117c:	2102      	movs	r1, #2
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffaf 	bl	80010e2 <_ZN12SensorReader8SetStateE11ReaderState>
            break;
 8001184:	e015      	b.n	80011b2 <_ZN12SensorReader3RunEv+0xb6>
        if (g_TimerSensorReader.HasSignal()) {
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <_ZN12SensorReader3RunEv+0xc0>)
 8001188:	f7ff fc99 	bl	8000abe <_ZN5Timer9HasSignalEv>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00e      	beq.n	80011b0 <_ZN12SensorReader3RunEv+0xb4>
            _ReadSensor();
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f816 	bl	80011c4 <_ZN12SensorReader11_ReadSensorEv>
            g_TimerSensorReader.Reset();
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <_ZN12SensorReader3RunEv+0xc0>)
 800119a:	f7ff fcb0 	bl	8000afe <_ZN5Timer5ResetEv>
            SetState(ReaderState::READY);
 800119e:	2101      	movs	r1, #1
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff9e 	bl	80010e2 <_ZN12SensorReader8SetStateE11ReaderState>
        break;
 80011a6:	e003      	b.n	80011b0 <_ZN12SensorReader3RunEv+0xb4>
        break;
 80011a8:	bf00      	nop
 80011aa:	e002      	b.n	80011b2 <_ZN12SensorReader3RunEv+0xb6>
        break;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <_ZN12SensorReader3RunEv+0xb6>
        break;
 80011b0:	bf00      	nop
    }
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000170 	.word	0x20000170
 80011c0:	20000161 	.word	0x20000161

080011c4 <_ZN12SensorReader11_ReadSensorEv>:

void SensorReader::_ReadSensor()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    char* str = (char*)'0';
 80011cc:	2330      	movs	r3, #48	; 0x30
 80011ce:	60fb      	str	r3, [r7, #12]
    m_SensorData = adc2.Get();
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <_ZN12SensorReader11_ReadSensorEv+0x40>)
 80011d2:	f7ff fce1 	bl	8000b98 <_ZN8ADCInput3GetEv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	609a      	str	r2, [r3, #8]
    int size = sprintf(str, "!ADC=%ld#\r\n", m_SensorData);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4909      	ldr	r1, [pc, #36]	; (8001208 <_ZN12SensorReader11_ReadSensorEv+0x44>)
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f003 f8a3 	bl	8004330 <siprintf>
 80011ea:	60b8      	str	r0, [r7, #8]
    uart2.Transmit((uint8_t*)str, size, 1000);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	68f9      	ldr	r1, [r7, #12]
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <_ZN12SensorReader11_ReadSensorEv+0x48>)
 80011f8:	f7ff fd58 	bl	8000cac <_ZN9UARTInput8TransmitEPhtm>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200004b4 	.word	0x200004b4
 8001208:	08004a10 	.word	0x08004a10
 800120c:	200004ac 	.word	0x200004ac

08001210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001236:	f7ff fbfb 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f002 fec7 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff f8af 	bl	80003a0 <main>
  bx lr
 8001242:	4770      	bx	lr
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800124c:	08004b34 	.word	0x08004b34
  ldr r2, =_sbss
 8001250:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001254:	20000530 	.word	0x20000530

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_Init+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_Init+0x28>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 fc49 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fa72 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fc61 	bl	8001b6e <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 fc29 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000014 	.word	0x20000014
 80012e0:	2000001c 	.word	0x2000001c
 80012e4:	20000018 	.word	0x20000018

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_IncTick+0x1c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_IncTick+0x20>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	2000001c 	.word	0x2000001c
 8001308:	20000518 	.word	0x20000518

0800130c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <HAL_GetTick+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000518 	.word	0x20000518

08001320 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0be      	b.n	80014c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fa20 	bl	80007a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fabf 	bl	80018e8 <ADC_ConversionStop_Disable>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 8099 	bne.w	80014ae <HAL_ADC_Init+0x18e>
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 8095 	bne.w	80014ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138c:	f023 0302 	bic.w	r3, r3, #2
 8001390:	f043 0202 	orr.w	r2, r3, #2
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7b1b      	ldrb	r3, [r3, #12]
 80013a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b8:	d003      	beq.n	80013c2 <HAL_ADC_Init+0xa2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d102      	bne.n	80013c8 <HAL_ADC_Init+0xa8>
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	e000      	b.n	80013ca <HAL_ADC_Init+0xaa>
 80013c8:	2300      	movs	r3, #0
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7d1b      	ldrb	r3, [r3, #20]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d119      	bne.n	800140c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7b1b      	ldrb	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	035a      	lsls	r2, r3, #13
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	e00b      	b.n	800140c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_ADC_Init+0x1a8>)
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	430b      	orrs	r3, r1
 8001432:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143c:	d003      	beq.n	8001446 <HAL_ADC_Init+0x126>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d104      	bne.n	8001450 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	3b01      	subs	r3, #1
 800144c:	051b      	lsls	r3, r3, #20
 800144e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	430a      	orrs	r2, r1
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_ADC_Init+0x1ac>)
 800146c:	4013      	ands	r3, r2
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	429a      	cmp	r2, r3
 8001472:	d10b      	bne.n	800148c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800148a:	e018      	b.n	80014be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f023 0312 	bic.w	r3, r3, #18
 8001494:	f043 0210 	orr.w	r2, r3, #16
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ac:	e007      	b.n	80014be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	f043 0210 	orr.w	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014be:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	ffe1f7fd 	.word	0xffe1f7fd
 80014cc:	ff1f0efe 	.word	0xff1f0efe

080014d0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start+0x1a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e098      	b.n	800161c <HAL_ADC_Start+0x14c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f99e 	bl	8001834 <ADC_Enable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8087 	bne.w	8001612 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a41      	ldr	r2, [pc, #260]	; (8001624 <HAL_ADC_Start+0x154>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d105      	bne.n	800152e <HAL_ADC_Start+0x5e>
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_ADC_Start+0x158>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d115      	bne.n	800155a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d026      	beq.n	8001596 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001550:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001558:	e01d      	b.n	8001596 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_ADC_Start+0x158>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d004      	beq.n	800157a <HAL_ADC_Start+0xaa>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <HAL_ADC_Start+0x154>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10d      	bne.n	8001596 <HAL_ADC_Start+0xc6>
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_ADC_Start+0x158>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f023 0206 	bic.w	r2, r3, #6
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ae:	e002      	b.n	80015b6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f06f 0202 	mvn.w	r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015d6:	d113      	bne.n	8001600 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_ADC_Start+0x154>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d105      	bne.n	80015ee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_ADC_Start+0x158>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d108      	bne.n	8001600 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	e00c      	b.n	800161a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	e003      	b.n	800161a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40012800 	.word	0x40012800
 8001628:	40012400 	.word	0x40012400

0800162c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x20>
 8001660:	2302      	movs	r3, #2
 8001662:	e0dc      	b.n	800181e <HAL_ADC_ConfigChannel+0x1da>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b06      	cmp	r3, #6
 8001672:	d81c      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b05      	subs	r3, #5
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
 80016ac:	e03c      	b.n	8001728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d81c      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b23      	subs	r3, #35	; 0x23
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	; 0x23
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
 80016ee:	e01b      	b.n	8001728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b41      	subs	r3, #65	; 0x41
 8001702:	221f      	movs	r2, #31
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	4019      	ands	r1, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	; 0x41
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b09      	cmp	r3, #9
 800172e:	d91c      	bls.n	800176a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68d9      	ldr	r1, [r3, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	3b1e      	subs	r3, #30
 8001742:	2207      	movs	r2, #7
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6898      	ldr	r0, [r3, #8]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	3b1e      	subs	r3, #30
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	e019      	b.n	800179e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	2207      	movs	r2, #7
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	4019      	ands	r1, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6898      	ldr	r0, [r3, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017aa:	2b11      	cmp	r3, #17
 80017ac:	d132      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_ADC_ConfigChannel+0x1e4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d125      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d126      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d11a      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_ADC_ConfigChannel+0x1e8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x1ec>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9a      	lsrs	r2, r3, #18
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001802:	e007      	b.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012400 	.word	0x40012400
 800182c:	20000014 	.word	0x20000014
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d040      	beq.n	80018d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <ADC_Enable+0xac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <ADC_Enable+0xb0>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9b      	lsrs	r3, r3, #18
 800186e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001870:	e002      	b.n	8001878 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3b01      	subs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800187e:	f7ff fd45 	bl	800130c <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001884:	e01f      	b.n	80018c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001886:	f7ff fd41 	bl	800130c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d918      	bls.n	80018c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d011      	beq.n	80018c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d1d8      	bne.n	8001886 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000014 	.word	0x20000014
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d12e      	bne.n	8001960 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001912:	f7ff fcfb 	bl	800130c <HAL_GetTick>
 8001916:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001918:	e01b      	b.n	8001952 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800191a:	f7ff fcf7 	bl	800130c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d914      	bls.n	8001952 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10d      	bne.n	8001952 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e007      	b.n	8001962 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d0dc      	beq.n	800191a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4906      	ldr	r1, [pc, #24]	; (8001a04 <__NVIC_EnableIRQ+0x34>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff90 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff2d 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff42 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff90 	bl	8001a5c <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff35 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e020      	b.n	8001bf0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 020e 	bic.w	r2, r2, #14
 8001bbc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d005      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e051      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 020e 	bic.w	r2, r2, #14
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_DMA_Abort_IT+0xd0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d029      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xa0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <HAL_DMA_Abort_IT+0xd4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d022      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x9c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_DMA_Abort_IT+0xd8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d01a      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x96>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_DMA_Abort_IT+0xdc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d012      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x90>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_DMA_Abort_IT+0xe0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00a      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x8a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_DMA_Abort_IT+0xe4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d102      	bne.n	8001c80 <HAL_DMA_Abort_IT+0x84>
 8001c7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c7e:	e00e      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c84:	e00b      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8a:	e008      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c90:	e005      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	e002      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c98:	2310      	movs	r3, #16
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_DMA_Abort_IT+0xe8>)
 8001ca0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
    } 
  }
  return status;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020008 	.word	0x40020008
 8001cd0:	4002001c 	.word	0x4002001c
 8001cd4:	40020030 	.word	0x40020030
 8001cd8:	40020044 	.word	0x40020044
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	4002006c 	.word	0x4002006c
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e161      	b.n	8001fc0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8150 	bne.w	8001fba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a97      	ldr	r2, [pc, #604]	; (8001f7c <HAL_GPIO_Init+0x294>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a95      	ldr	r2, [pc, #596]	; (8001f7c <HAL_GPIO_Init+0x294>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d875      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a95      	ldr	r2, [pc, #596]	; (8001f80 <HAL_GPIO_Init+0x298>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d058      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d30:	4a93      	ldr	r2, [pc, #588]	; (8001f80 <HAL_GPIO_Init+0x298>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d86f      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d36:	4a93      	ldr	r2, [pc, #588]	; (8001f84 <HAL_GPIO_Init+0x29c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d052      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a91      	ldr	r2, [pc, #580]	; (8001f84 <HAL_GPIO_Init+0x29c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d869      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d42:	4a91      	ldr	r2, [pc, #580]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04c      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d48:	4a8f      	ldr	r2, [pc, #572]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d863      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a8f      	ldr	r2, [pc, #572]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d046      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d54:	4a8d      	ldr	r2, [pc, #564]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d85d      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d82a      	bhi.n	8001db4 <HAL_GPIO_Init+0xcc>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d859      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_GPIO_Init+0x80>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001dbd 	.word	0x08001dbd
 8001d70:	08001dcf 	.word	0x08001dcf
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e17 	.word	0x08001e17
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e17 	.word	0x08001e17
 8001d88:	08001e17 	.word	0x08001e17
 8001d8c:	08001e17 	.word	0x08001e17
 8001d90:	08001e17 	.word	0x08001e17
 8001d94:	08001e17 	.word	0x08001e17
 8001d98:	08001e17 	.word	0x08001e17
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001e17 	.word	0x08001e17
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e17 	.word	0x08001e17
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd9 	.word	0x08001dd9
 8001db4:	4a76      	ldr	r2, [pc, #472]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dba:	e02c      	b.n	8001e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e029      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e024      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e01f      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e01a      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dea:	2304      	movs	r3, #4
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e013      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	611a      	str	r2, [r3, #16]
          break;
 8001e02:	e009      	b.n	8001e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	615a      	str	r2, [r3, #20]
          break;
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          break;
 8001e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d801      	bhi.n	8001e22 <HAL_GPIO_Init+0x13a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_Init+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d802      	bhi.n	8001e34 <HAL_GPIO_Init+0x14c>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x152>
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3b08      	subs	r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	210f      	movs	r1, #15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80a9 	beq.w	8001fba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e80:	4a45      	ldr	r2, [pc, #276]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3d      	ldr	r2, [pc, #244]	; (8001f9c <HAL_GPIO_Init+0x2b4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1dc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3b      	ldr	r2, [pc, #236]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1d8>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1e2>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1e2>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1e2>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eda:	492f      	ldr	r1, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	492b      	ldr	r1, [pc, #172]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4927      	ldr	r1, [pc, #156]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4921      	ldr	r1, [pc, #132]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	491d      	ldr	r1, [pc, #116]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4917      	ldr	r1, [pc, #92]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4913      	ldr	r1, [pc, #76]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01f      	beq.n	8001fac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	490d      	ldr	r1, [pc, #52]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e01f      	b.n	8001fba <HAL_GPIO_Init+0x2d2>
 8001f7a:	bf00      	nop
 8001f7c:	10320000 	.word	0x10320000
 8001f80:	10310000 	.word	0x10310000
 8001f84:	10220000 	.word	0x10220000
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	10110000 	.word	0x10110000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_GPIO_Init+0x2f4>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4909      	ldr	r1, [pc, #36]	; (8001fdc <HAL_GPIO_Init+0x2f4>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae96 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	372c      	adds	r7, #44	; 0x2c
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e272      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8087 	beq.w	800213e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002030:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b04      	cmp	r3, #4
 800203a:	d00c      	beq.n	8002056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800203c:	4b8f      	ldr	r3, [pc, #572]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d112      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
 8002048:	4b8c      	ldr	r3, [pc, #560]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d10b      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d06c      	beq.n	800213c <HAL_RCC_OscConfig+0x12c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d168      	bne.n	800213c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e24c      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x76>
 8002078:	4b80      	ldr	r3, [pc, #512]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a7f      	ldr	r2, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e02e      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7a      	ldr	r2, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b78      	ldr	r3, [pc, #480]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a77      	ldr	r2, [pc, #476]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0xbc>
 80020b2:	4b72      	ldr	r3, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a71      	ldr	r2, [pc, #452]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a6e      	ldr	r2, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020cc:	4b6b      	ldr	r3, [pc, #428]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6a      	ldr	r2, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a67      	ldr	r2, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff f90e 	bl	800130c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f90a 	bl	800130c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e200      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe4>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f8fa 	bl	800130c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff f8f6 	bl	800130c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1ec      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x10c>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x18c>
 8002162:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1c0      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4939      	ldr	r1, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e03a      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x270>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff f8af 	bl	800130c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff f8ab 	bl	800130c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1a1      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x270>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f88e 	bl	800130c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff f88a 	bl	800130c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e180      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d03a      	beq.n	8002294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d019      	beq.n	800225a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7ff f86e 	bl	800130c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002234:	f7ff f86a 	bl	800130c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e160      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f000 fad8 	bl	8002808 <RCC_Delay>
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7ff f854 	bl	800130c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002266:	e00f      	b.n	8002288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff f850 	bl	800130c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d908      	bls.n	8002288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e146      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	42420000 	.word	0x42420000
 8002284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e9      	bne.n	8002268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80a6 	beq.w	80023ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a87      	ldr	r2, [pc, #540]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7e      	ldr	r2, [pc, #504]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff f811 	bl	800130c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7ff f80d 	bl	800130c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b64      	cmp	r3, #100	; 0x64
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e103      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x312>
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e02d      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x334>
 800232a:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a66      	ldr	r2, [pc, #408]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	e01c      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x356>
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	4b5e      	ldr	r3, [pc, #376]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002366:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b58      	ldr	r3, [pc, #352]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe ffc1 	bl	800130c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe ffbd 	bl	800130c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0b1      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ee      	beq.n	800238e <HAL_RCC_OscConfig+0x37e>
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe ffab 	bl	800130c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe ffa7 	bl	800130c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e09b      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8087 	beq.w	8002506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d061      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d146      	bne.n	800249a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <HAL_RCC_OscConfig+0x4cc>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe ff7b 	bl	800130c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe ff77 	bl	800130c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e06d      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4921      	ldr	r1, [pc, #132]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a19      	ldr	r1, [r3, #32]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	430b      	orrs	r3, r1
 8002466:	491b      	ldr	r1, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x4cc>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe ff4b 	bl	800130c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe ff47 	bl	800130c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x46a>
 8002498:	e035      	b.n	8002506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x4cc>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe ff34 	bl	800130c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe ff30 	bl	800130c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e026      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x498>
 80024c6:	e01e      	b.n	8002506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e019      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_OscConfig+0x500>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0d0      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d910      	bls.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4965      	ldr	r1, [pc, #404]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800257a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	494d      	ldr	r1, [pc, #308]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d040      	beq.n	8002634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d115      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e073      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06b      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f023 0203 	bic.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4936      	ldr	r1, [pc, #216]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002604:	f7fe fe82 	bl	800130c <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fe7e 	bl	800130c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e053      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d210      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0207 	bic.w	r2, r3, #7
 800264a:	4922      	ldr	r1, [pc, #136]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e032      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4916      	ldr	r1, [pc, #88]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f821 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490a      	ldr	r1, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1d0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fde0 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08004a58 	.word	0x08004a58
 80026e0:	20000014 	.word	0x20000014
 80026e4:	20000018 	.word	0x20000018

080026e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b490      	push	{r4, r7}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ee:	4b29      	ldr	r3, [pc, #164]	; (8002794 <HAL_RCC_GetSysClockFreq+0xac>)
 80026f0:	1d3c      	adds	r4, r7, #4
 80026f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f8:	f240 2301 	movw	r3, #513	; 0x201
 80026fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x40>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x46>
 8002726:	e02b      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_RCC_GetSysClockFreq+0xb4>)
 800272a:	623b      	str	r3, [r7, #32]
      break;
 800272c:	e02b      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3328      	adds	r3, #40	; 0x28
 8002738:	443b      	add	r3, r7
 800273a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800273e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d012      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb0>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0c5b      	lsrs	r3, r3, #17
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	3328      	adds	r3, #40	; 0x28
 8002756:	443b      	add	r3, r7
 8002758:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800275c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	e004      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	623b      	str	r3, [r7, #32]
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002782:	623b      	str	r3, [r7, #32]
      break;
 8002784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002786:	6a3b      	ldr	r3, [r7, #32]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc90      	pop	{r4, r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	08004a1c 	.word	0x08004a1c
 8002798:	40021000 	.word	0x40021000
 800279c:	007a1200 	.word	0x007a1200
 80027a0:	003d0900 	.word	0x003d0900

080027a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	20000014 	.word	0x20000014

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027bc:	f7ff fff2 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08004a68 	.word	0x08004a68

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	08004a68 	.word	0x08004a68

08002808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <RCC_Delay+0x34>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <RCC_Delay+0x38>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a5b      	lsrs	r3, r3, #9
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002824:	bf00      	nop
  }
  while (Delay --);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	60fa      	str	r2, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f9      	bne.n	8002824 <RCC_Delay+0x1c>
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	20000014 	.word	0x20000014
 8002840:	10624dd3 	.word	0x10624dd3

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d07d      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002864:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	4a4b      	ldr	r2, [pc, #300]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287a:	61d3      	str	r3, [r2, #28]
 800287c:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002888:	2301      	movs	r3, #1
 800288a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d118      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fd32 	bl	800130c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	e008      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe fd2e 	bl	800130c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e06d      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d02e      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d027      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028fe:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d014      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fcfd 	bl	800130c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	e00a      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fcf9 	bl	800130c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e036      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ee      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4917      	ldr	r1, [pc, #92]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	4313      	orrs	r3, r2
 8002948:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	490b      	ldr	r1, [pc, #44]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4904      	ldr	r1, [pc, #16]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	42420440 	.word	0x42420440

080029b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e041      	b.n	8002a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd ff20 	bl	800081c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fa6a 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e035      	b.n	8002ad4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_TIM_Base_Start_IT+0x90>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x4e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d004      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x4e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIM_Base_Start_IT+0x94>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d111      	bne.n	8002ac2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d010      	beq.n	8002ad2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	e007      	b.n	8002ad2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400

08002ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0202 	mvn.w	r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9b1 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9a4 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9b3 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0204 	mvn.w	r2, #4
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f987 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f97a 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f989 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f95d 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f950 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f95f 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0210 	mvn.w	r2, #16
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2208      	movs	r2, #8
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f933 	bl	8002e92 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f926 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f935 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0201 	mvn.w	r2, #1
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd fbcc 	bl	8000404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa67 	bl	8003166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8f9 	bl	8002eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0220 	mvn.w	r2, #32
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa32 	bl	8003154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIM_ConfigClockSource+0x18>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0b3      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x180>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d03e      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0xd0>
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	f200 8087 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	f000 8085 	beq.w	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	d87f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d01a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xa2>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d87b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d68:	2b60      	cmp	r3, #96	; 0x60
 8002d6a:	d050      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x116>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d877      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d03c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0xf6>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d873      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d058      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x136>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d86f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d064      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d86b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d060      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d867      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05c      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d05a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d98:	e062      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f000 f95c 	bl	8003066 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
      break;
 8002dc6:	e04e      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f000 f945 	bl	8003066 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dea:	609a      	str	r2, [r3, #8]
      break;
 8002dec:	e03b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 f8bc 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2150      	movs	r1, #80	; 0x50
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f913 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e02b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 f8da 	bl	8002fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2160      	movs	r1, #96	; 0x60
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f903 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e01b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f89c 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f8f3 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e00b      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 f8ea 	bl	8003032 <TIM_ITRx_SetConfig>
        break;
 8002e5e:	e002      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <TIM_Base_SetConfig+0xa8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x28>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x28>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <TIM_Base_SetConfig+0xac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <TIM_Base_SetConfig+0xa8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0x52>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0x52>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <TIM_Base_SetConfig+0xac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d108      	bne.n	8002f2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <TIM_Base_SetConfig+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	615a      	str	r2, [r3, #20]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400

08002f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f023 030a 	bic.w	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0210 	bic.w	r2, r3, #16
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	031b      	lsls	r3, r3, #12
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 0307 	orr.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003066:	b480      	push	{r7}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003080:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	431a      	orrs	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	609a      	str	r2, [r3, #8]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e041      	b.n	8003140 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d004      	beq.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10c      	bne.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	4313      	orrs	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400

08003154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e03f      	b.n	800320a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fb60 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fc85 	bl	8003acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b08a      	sub	sp, #40	; 0x28
 8003216:	af02      	add	r7, sp, #8
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d17c      	bne.n	800332c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_Transmit+0x2c>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e075      	b.n	800332e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Transmit+0x3e>
 800324c:	2302      	movs	r3, #2
 800324e:	e06e      	b.n	800332e <HAL_UART_Transmit+0x11c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2221      	movs	r2, #33	; 0x21
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003266:	f7fe f851 	bl	800130c <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d108      	bne.n	8003294 <HAL_UART_Transmit+0x82>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e003      	b.n	800329c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032a4:	e02a      	b.n	80032fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fa38 	bl	8003726 <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e036      	b.n	800332e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3302      	adds	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e007      	b.n	80032ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3301      	adds	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1cf      	bne.n	80032a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2140      	movs	r1, #64	; 0x40
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fa08 	bl	8003726 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e006      	b.n	800332e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	d11d      	bne.n	800338c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Receive_IT+0x26>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e016      	b.n	800338e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_UART_Receive_IT+0x38>
 800336a:	2302      	movs	r3, #2
 800336c:	e00f      	b.n	800338e <HAL_UART_Receive_IT+0x58>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	461a      	mov	r2, r3
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fa19 	bl	80037ba <UART_Start_Receive_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	e000      	b.n	800338e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_UART_IRQHandler+0x52>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fac9 	bl	800397a <UART_Receive_IT>
      return;
 80033e8:	e17b      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80b1 	beq.w	8003554 <HAL_UART_IRQHandler+0x1bc>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_UART_IRQHandler+0x70>
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a6 	beq.w	8003554 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_UART_IRQHandler+0x90>
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_UART_IRQHandler+0xb0>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0202 	orr.w	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_UART_IRQHandler+0xd0>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00f      	beq.n	8003492 <HAL_UART_IRQHandler+0xfa>
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_UART_IRQHandler+0xee>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 811e 	beq.w	80036d8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_UART_IRQHandler+0x11e>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa62 	bl	800397a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_UART_IRQHandler+0x146>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d031      	beq.n	8003542 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9a4 	bl	800382c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d023      	beq.n	800353a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003500:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	2b00      	cmp	r3, #0
 8003508:	d013      	beq.n	8003532 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	4a76      	ldr	r2, [pc, #472]	; (80036e8 <HAL_UART_IRQHandler+0x350>)
 8003510:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fb70 	bl	8001bfc <HAL_DMA_Abort_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352c:	4610      	mov	r0, r2
 800352e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e00e      	b.n	8003550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8e3 	bl	80036fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	e00a      	b.n	8003550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8df 	bl	80036fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e006      	b.n	8003550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8db 	bl	80036fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800354e:	e0c3      	b.n	80036d8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	bf00      	nop
    return;
 8003552:	e0c1      	b.n	80036d8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	2b01      	cmp	r3, #1
 800355a:	f040 80a1 	bne.w	80036a0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 809b 	beq.w	80036a0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8095 	beq.w	80036a0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04e      	beq.n	8003638 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80035a4:	8a3b      	ldrh	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8098 	beq.w	80036dc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035b0:	8a3a      	ldrh	r2, [r7, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	f080 8092 	bcs.w	80036dc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8a3a      	ldrh	r2, [r7, #16]
 80035bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d02b      	beq.n	8003620 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0210 	bic.w	r2, r2, #16
 8003614:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fab3 	bl	8001b86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003628:	b29b      	uxth	r3, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f86d 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003636:	e051      	b.n	80036dc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d047      	beq.n	80036e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003650:	8a7b      	ldrh	r3, [r7, #18]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d044      	beq.n	80036e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003664:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0210 	bic.w	r2, r2, #16
 8003692:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003694:	8a7b      	ldrh	r3, [r7, #18]
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f839 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800369e:	e01f      	b.n	80036e0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_UART_IRQHandler+0x324>
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8f9 	bl	80038ac <UART_Transmit_IT>
    return;
 80036ba:	e012      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_UART_IRQHandler+0x34a>
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f93a 	bl	800394a <UART_EndTransmit_IT>
    return;
 80036d6:	e004      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
    return;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036e0:	bf00      	nop
  }
}
 80036e2:	3728      	adds	r7, #40	; 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	08003885 	.word	0x08003885

080036ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003736:	e02c      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d028      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <UART_WaitOnFlagUntilTimeout+0x30>
 8003746:	f7fd fde1 	bl	800130c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	429a      	cmp	r2, r3
 8003754:	d21d      	bcs.n	8003792 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003764:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e00f      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d0c3      	beq.n	8003738 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	4613      	mov	r3, r2
 80037c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2222      	movs	r2, #34	; 0x22
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fe:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0220 	orr.w	r2, r2, #32
 800381e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003842:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0210 	bic.w	r2, r2, #16
 800386a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff ff2d 	bl	80036fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b21      	cmp	r3, #33	; 0x21
 80038be:	d13e      	bne.n	800393e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d114      	bne.n	80038f4 <UART_Transmit_IT+0x48>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d110      	bne.n	80038f4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	621a      	str	r2, [r3, #32]
 80038f2:	e008      	b.n	8003906 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	1c59      	adds	r1, r3, #1
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6211      	str	r1, [r2, #32]
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4619      	mov	r1, r3
 8003914:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003928:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003938:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff febe 	bl	80036ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b22      	cmp	r3, #34	; 0x22
 800398c:	f040 8099 	bne.w	8003ac2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003998:	d117      	bne.n	80039ca <UART_Receive_IT+0x50>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	1c9a      	adds	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
 80039c8:	e026      	b.n	8003a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d007      	beq.n	80039ee <UART_Receive_IT+0x74>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <UART_Receive_IT+0x82>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e008      	b.n	8003a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4619      	mov	r1, r3
 8003a26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d148      	bne.n	8003abe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0220 	bic.w	r2, r2, #32
 8003a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d123      	bne.n	8003ab4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0210 	bic.w	r2, r2, #16
 8003a80:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d10a      	bne.n	8003aa6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fe2f 	bl	8003710 <HAL_UARTEx_RxEventCallback>
 8003ab2:	e002      	b.n	8003aba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fc fcbd 	bl	8000434 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e002      	b.n	8003ac4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b06:	f023 030c 	bic.w	r3, r3, #12
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <UART_SetConfig+0x114>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d103      	bne.n	8003b3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7fe fe54 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	e002      	b.n	8003b42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe fe3c 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <UART_SetConfig+0x118>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	0119      	lsls	r1, r3, #4
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <UART_SetConfig+0x118>)
 8003b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2064      	movs	r0, #100	; 0x64
 8003b82:	fb00 f303 	mul.w	r3, r0, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	3332      	adds	r3, #50	; 0x32
 8003b8c:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <UART_SetConfig+0x118>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b98:	4419      	add	r1, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <UART_SetConfig+0x118>)
 8003bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2064      	movs	r0, #100	; 0x64
 8003bba:	fb00 f303 	mul.w	r3, r0, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	3332      	adds	r3, #50	; 0x32
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <UART_SetConfig+0x118>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40013800 	.word	0x40013800
 8003be4:	51eb851f 	.word	0x51eb851f

08003be8 <__cxa_pure_virtual>:
 8003be8:	b508      	push	{r3, lr}
 8003bea:	f000 f9b9 	bl	8003f60 <_ZSt9terminatev>

08003bee <_ZNSaIcEC1Ev>:
 8003bee:	4770      	bx	lr

08003bf0 <_ZNSaIcED1Ev>:
 8003bf0:	4770      	bx	lr

08003bf2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8003bf2:	b10a      	cbz	r2, 8003bf8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8003bf4:	f000 ba3c 	b.w	8004070 <memcpy>
 8003bf8:	4770      	bx	lr

08003bfa <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8003bfa:	b10a      	cbz	r2, 8003c00 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8003bfc:	f000 ba28 	b.w	8004050 <memcmp>
 8003c00:	4610      	mov	r0, r2
 8003c02:	4770      	bx	lr

08003c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003c04:	b508      	push	{r3, lr}
 8003c06:	680b      	ldr	r3, [r1, #0]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d302      	bcc.n	8003c14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8003c0e:	480d      	ldr	r0, [pc, #52]	; (8003c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8003c10:	f000 f9c2 	bl	8003f98 <_ZSt20__throw_length_errorPKc>
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d90b      	bls.n	8003c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003c18:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003c1c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8003c20:	d206      	bcs.n	8003c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003c22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c26:	bf2a      	itet	cs
 8003c28:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8003c2c:	6008      	strcc	r0, [r1, #0]
 8003c2e:	600b      	strcs	r3, [r1, #0]
 8003c30:	6808      	ldr	r0, [r1, #0]
 8003c32:	3001      	adds	r0, #1
 8003c34:	d501      	bpl.n	8003c3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8003c36:	f000 f9a9 	bl	8003f8c <_ZSt17__throw_bad_allocv>
 8003c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c3e:	f000 b994 	b.w	8003f6a <_Znwj>
 8003c42:	bf00      	nop
 8003c44:	08004a94 	.word	0x08004a94

08003c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f853 0b08 	ldr.w	r0, [r3], #8
 8003c4e:	4298      	cmp	r0, r3
 8003c50:	d001      	beq.n	8003c56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8003c52:	f000 b976 	b.w	8003f42 <_ZdlPv>
 8003c56:	4770      	bx	lr

08003c58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8003c58:	6840      	ldr	r0, [r0, #4]
 8003c5a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003c5e:	3901      	subs	r1, #1
 8003c60:	1a09      	subs	r1, r1, r0
 8003c62:	4291      	cmp	r1, r2
 8003c64:	b508      	push	{r3, lr}
 8003c66:	d202      	bcs.n	8003c6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f995 	bl	8003f98 <_ZSt20__throw_length_errorPKc>
 8003c6e:	bd08      	pop	{r3, pc}

08003c70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8003c70:	6803      	ldr	r3, [r0, #0]
 8003c72:	428b      	cmp	r3, r1
 8003c74:	d806      	bhi.n	8003c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8003c76:	6840      	ldr	r0, [r0, #4]
 8003c78:	4418      	add	r0, r3
 8003c7a:	4281      	cmp	r1, r0
 8003c7c:	bf94      	ite	ls
 8003c7e:	2000      	movls	r0, #0
 8003c80:	2001      	movhi	r0, #1
 8003c82:	4770      	bx	lr
 8003c84:	2001      	movs	r0, #1
 8003c86:	4770      	bx	lr

08003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003c88:	2a01      	cmp	r2, #1
 8003c8a:	b410      	push	{r4}
 8003c8c:	d103      	bne.n	8003c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 8003c8e:	780a      	ldrb	r2, [r1, #0]
 8003c90:	bc10      	pop	{r4}
 8003c92:	7002      	strb	r2, [r0, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bc10      	pop	{r4}
 8003c98:	f7ff bfab 	b.w	8003bf2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08003c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8003c9c:	2a01      	cmp	r2, #1
 8003c9e:	b430      	push	{r4, r5}
 8003ca0:	d103      	bne.n	8003caa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8003ca2:	780b      	ldrb	r3, [r1, #0]
 8003ca4:	7003      	strb	r3, [r0, #0]
 8003ca6:	bc30      	pop	{r4, r5}
 8003ca8:	4770      	bx	lr
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d0fb      	beq.n	8003ca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8003cae:	bc30      	pop	{r4, r5}
 8003cb0:	f000 b9ec 	b.w	800408c <memmove>

08003cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003cb4:	b508      	push	{r3, lr}
 8003cb6:	1a52      	subs	r2, r2, r1
 8003cb8:	f7ff ffe6 	bl	8003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003cbc:	bd08      	pop	{r3, pc}

08003cbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8003cbe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003cc4:	461f      	mov	r7, r3
 8003cc6:	6843      	ldr	r3, [r0, #4]
 8003cc8:	eb01 0802 	add.w	r8, r1, r2
 8003ccc:	1ab2      	subs	r2, r6, r2
 8003cce:	441a      	add	r2, r3
 8003cd0:	eba3 0908 	sub.w	r9, r3, r8
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	9201      	str	r2, [sp, #4]
 8003cd8:	f853 2b08 	ldr.w	r2, [r3], #8
 8003cdc:	460d      	mov	r5, r1
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	220f      	moveq	r2, #15
 8003ce4:	6882      	ldrne	r2, [r0, #8]
 8003ce6:	a901      	add	r1, sp, #4
 8003ce8:	4604      	mov	r4, r0
 8003cea:	f7ff ff8b 	bl	8003c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003cee:	4682      	mov	sl, r0
 8003cf0:	b11d      	cbz	r5, 8003cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	f7ff ffc7 	bl	8003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003cfa:	b137      	cbz	r7, 8003d0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8003cfc:	b12e      	cbz	r6, 8003d0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8003cfe:	4632      	mov	r2, r6
 8003d00:	4639      	mov	r1, r7
 8003d02:	eb0a 0005 	add.w	r0, sl, r5
 8003d06:	f7ff ffbf 	bl	8003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003d0a:	f1b9 0f00 	cmp.w	r9, #0
 8003d0e:	d007      	beq.n	8003d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 8003d10:	6821      	ldr	r1, [r4, #0]
 8003d12:	4435      	add	r5, r6
 8003d14:	464a      	mov	r2, r9
 8003d16:	4441      	add	r1, r8
 8003d18:	eb0a 0005 	add.w	r0, sl, r5
 8003d1c:	f7ff ffb4 	bl	8003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003d20:	4620      	mov	r0, r4
 8003d22:	f7ff ff91 	bl	8003c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003d26:	9b01      	ldr	r3, [sp, #4]
 8003d28:	f8c4 a000 	str.w	sl, [r4]
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	b002      	add	sp, #8
 8003d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	f7ff ff86 	bl	8003c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	bd10      	pop	{r4, pc}

08003d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8003d40:	6800      	ldr	r0, [r0, #0]
 8003d42:	4408      	add	r0, r1
 8003d44:	4770      	bx	lr

08003d46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8003d46:	4603      	mov	r3, r0
 8003d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d4a:	f853 2b08 	ldr.w	r2, [r3], #8
 8003d4e:	6846      	ldr	r6, [r0, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	bf0c      	ite	eq
 8003d54:	230f      	moveq	r3, #15
 8003d56:	6883      	ldrne	r3, [r0, #8]
 8003d58:	1c75      	adds	r5, r6, #1
 8003d5a:	429d      	cmp	r5, r3
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	460f      	mov	r7, r1
 8003d60:	d906      	bls.n	8003d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2a>
 8003d62:	2301      	movs	r3, #1
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	4631      	mov	r1, r6
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f7ff ffa7 	bl	8003cbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003d70:	2200      	movs	r2, #0
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	559f      	strb	r7, [r3, r6]
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	6065      	str	r5, [r4, #4]
 8003d7a:	555a      	strb	r2, [r3, r5]
 8003d7c:	b003      	add	sp, #12
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	f7ff ffdf 	bl	8003d46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8003d88:	4620      	mov	r0, r4
 8003d8a:	bd10      	pop	{r4, pc}

08003d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8003d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	4614      	mov	r4, r2
 8003d92:	4680      	mov	r8, r0
 8003d94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d96:	4689      	mov	r9, r1
 8003d98:	462a      	mov	r2, r5
 8003d9a:	461f      	mov	r7, r3
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8003da0:	f7ff ff5a 	bl	8003c58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003da4:	4642      	mov	r2, r8
 8003da6:	f852 6b08 	ldr.w	r6, [r2], #8
 8003daa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003dae:	4296      	cmp	r6, r2
 8003db0:	bf0c      	ite	eq
 8003db2:	220f      	moveq	r2, #15
 8003db4:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8003db8:	eba5 0b04 	sub.w	fp, r5, r4
 8003dbc:	eb03 0a0b 	add.w	sl, r3, fp
 8003dc0:	4552      	cmp	r2, sl
 8003dc2:	d351      	bcc.n	8003e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8003dc4:	444e      	add	r6, r9
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	44a1      	add	r9, r4
 8003dca:	4640      	mov	r0, r8
 8003dcc:	eba3 0909 	sub.w	r9, r3, r9
 8003dd0:	f7ff ff4e 	bl	8003c70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8003dd4:	b180      	cbz	r0, 8003df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8003dd6:	f1b9 0f00 	cmp.w	r9, #0
 8003dda:	d006      	beq.n	8003dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8003ddc:	42ac      	cmp	r4, r5
 8003dde:	d004      	beq.n	8003dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8003de0:	464a      	mov	r2, r9
 8003de2:	1931      	adds	r1, r6, r4
 8003de4:	1970      	adds	r0, r6, r5
 8003de6:	f7ff ff59 	bl	8003c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003dea:	b315      	cbz	r5, 8003e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003dec:	462a      	mov	r2, r5
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	f7ff ff49 	bl	8003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003df6:	e01c      	b.n	8003e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003df8:	b135      	cbz	r5, 8003e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8003dfa:	42ac      	cmp	r4, r5
 8003dfc:	d33c      	bcc.n	8003e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8003dfe:	462a      	mov	r2, r5
 8003e00:	4639      	mov	r1, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff ff4a 	bl	8003c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003e08:	f1b9 0f00 	cmp.w	r9, #0
 8003e0c:	d011      	beq.n	8003e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003e0e:	42ac      	cmp	r4, r5
 8003e10:	d00f      	beq.n	8003e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003e12:	464a      	mov	r2, r9
 8003e14:	1931      	adds	r1, r6, r4
 8003e16:	1970      	adds	r0, r6, r5
 8003e18:	f7ff ff40 	bl	8003c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003e1c:	42ac      	cmp	r4, r5
 8003e1e:	d208      	bcs.n	8003e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003e20:	4434      	add	r4, r6
 8003e22:	197b      	adds	r3, r7, r5
 8003e24:	429c      	cmp	r4, r3
 8003e26:	d30f      	bcc.n	8003e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8003e28:	462a      	mov	r2, r5
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f7ff ff35 	bl	8003c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003e32:	2200      	movs	r2, #0
 8003e34:	4640      	mov	r0, r8
 8003e36:	f8d8 3000 	ldr.w	r3, [r8]
 8003e3a:	f8c8 a004 	str.w	sl, [r8, #4]
 8003e3e:	f803 200a 	strb.w	r2, [r3, sl]
 8003e42:	b003      	add	sp, #12
 8003e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e48:	42bc      	cmp	r4, r7
 8003e4a:	d803      	bhi.n	8003e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	eb07 010b 	add.w	r1, r7, fp
 8003e52:	e7cd      	b.n	8003df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8003e54:	1be4      	subs	r4, r4, r7
 8003e56:	4622      	mov	r2, r4
 8003e58:	4639      	mov	r1, r7
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f7ff ff1e 	bl	8003c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003e60:	1b2a      	subs	r2, r5, r4
 8003e62:	1971      	adds	r1, r6, r5
 8003e64:	1930      	adds	r0, r6, r4
 8003e66:	e7c4      	b.n	8003df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8003e68:	463b      	mov	r3, r7
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	4640      	mov	r0, r8
 8003e70:	9500      	str	r5, [sp, #0]
 8003e72:	f7ff ff24 	bl	8003cbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003e76:	e7dc      	b.n	8003e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003e78:	f1b9 0f00 	cmp.w	r9, #0
 8003e7c:	d0d0      	beq.n	8003e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8003e7e:	e7c8      	b.n	8003e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8003e80:	08004aac 	.word	0x08004aac

08003e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8003e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	460d      	mov	r5, r1
 8003e8c:	f7fc f95e 	bl	800014c <strlen>
 8003e90:	462b      	mov	r3, r5
 8003e92:	9000      	str	r0, [sp, #0]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4620      	mov	r0, r4
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	f7ff ff77 	bl	8003d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8003e9e:	b003      	add	sp, #12
 8003ea0:	bd30      	pop	{r4, r5, pc}

08003ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8003ea2:	b508      	push	{r3, lr}
 8003ea4:	f7ff ffee 	bl	8003e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8003ea8:	bd08      	pop	{r3, pc}

08003eaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8003eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eac:	6847      	ldr	r7, [r0, #4]
 8003eae:	4605      	mov	r5, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	f7fc f94a 	bl	800014c <strlen>
 8003eb8:	4287      	cmp	r7, r0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	463a      	mov	r2, r7
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	bf28      	it	cs
 8003ec2:	4602      	movcs	r2, r0
 8003ec4:	6828      	ldr	r0, [r5, #0]
 8003ec6:	f7ff fe98 	bl	8003bfa <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8003eca:	b900      	cbnz	r0, 8003ece <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8003ecc:	1b38      	subs	r0, r7, r4
 8003ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003ed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	b919      	cbnz	r1, 8003ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003eda:	b112      	cbz	r2, 8003ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003edc:	480d      	ldr	r0, [pc, #52]	; (8003f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8003ede:	f000 f858 	bl	8003f92 <_ZSt19__throw_logic_errorPKc>
 8003ee2:	1b73      	subs	r3, r6, r5
 8003ee4:	2b0f      	cmp	r3, #15
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	d907      	bls.n	8003efa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8003eea:	2200      	movs	r2, #0
 8003eec:	4620      	mov	r0, r4
 8003eee:	a901      	add	r1, sp, #4
 8003ef0:	f7ff fe88 	bl	8003c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003ef4:	9b01      	ldr	r3, [sp, #4]
 8003ef6:	6020      	str	r0, [r4, #0]
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	4632      	mov	r2, r6
 8003efc:	4629      	mov	r1, r5
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	f7ff fed8 	bl	8003cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003f04:	2100      	movs	r1, #0
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	6063      	str	r3, [r4, #4]
 8003f0c:	54d1      	strb	r1, [r2, r3]
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	bf00      	nop
 8003f14:	08004ac5 	.word	0x08004ac5

08003f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	f100 0308 	add.w	r3, r0, #8
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460d      	mov	r5, r1
 8003f22:	6003      	str	r3, [r0, #0]
 8003f24:	b159      	cbz	r1, 8003f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8003f26:	4608      	mov	r0, r1
 8003f28:	f7fc f910 	bl	800014c <strlen>
 8003f2c:	182a      	adds	r2, r5, r0
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	4629      	mov	r1, r5
 8003f36:	f7ff ffcb 	bl	8003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
 8003f3e:	2201      	movs	r2, #1
 8003f40:	e7f5      	b.n	8003f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08003f42 <_ZdlPv>:
 8003f42:	f000 b86f 	b.w	8004024 <free>

08003f46 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003f46:	b508      	push	{r3, lr}
 8003f48:	4780      	blx	r0
 8003f4a:	f000 f831 	bl	8003fb0 <abort>
	...

08003f50 <_ZSt13get_terminatev>:
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <_ZSt13get_terminatev+0xc>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	f3bf 8f5b 	dmb	ish
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000020 	.word	0x20000020

08003f60 <_ZSt9terminatev>:
 8003f60:	b508      	push	{r3, lr}
 8003f62:	f7ff fff5 	bl	8003f50 <_ZSt13get_terminatev>
 8003f66:	f7ff ffee 	bl	8003f46 <_ZN10__cxxabiv111__terminateEPFvvE>

08003f6a <_Znwj>:
 8003f6a:	2801      	cmp	r0, #1
 8003f6c:	bf38      	it	cc
 8003f6e:	2001      	movcc	r0, #1
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4604      	mov	r4, r0
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 f84d 	bl	8004014 <malloc>
 8003f7a:	b930      	cbnz	r0, 8003f8a <_Znwj+0x20>
 8003f7c:	f000 f810 	bl	8003fa0 <_ZSt15get_new_handlerv>
 8003f80:	b908      	cbnz	r0, 8003f86 <_Znwj+0x1c>
 8003f82:	f000 f815 	bl	8003fb0 <abort>
 8003f86:	4780      	blx	r0
 8003f88:	e7f4      	b.n	8003f74 <_Znwj+0xa>
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <_ZSt17__throw_bad_allocv>:
 8003f8c:	b508      	push	{r3, lr}
 8003f8e:	f000 f80f 	bl	8003fb0 <abort>

08003f92 <_ZSt19__throw_logic_errorPKc>:
 8003f92:	b508      	push	{r3, lr}
 8003f94:	f000 f80c 	bl	8003fb0 <abort>

08003f98 <_ZSt20__throw_length_errorPKc>:
 8003f98:	b508      	push	{r3, lr}
 8003f9a:	f000 f809 	bl	8003fb0 <abort>
	...

08003fa0 <_ZSt15get_new_handlerv>:
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <_ZSt15get_new_handlerv+0xc>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	f3bf 8f5b 	dmb	ish
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	2000051c 	.word	0x2000051c

08003fb0 <abort>:
 8003fb0:	2006      	movs	r0, #6
 8003fb2:	b508      	push	{r3, lr}
 8003fb4:	f000 f9a0 	bl	80042f8 <raise>
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f7fc fcf8 	bl	80009ae <_exit>
	...

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000024 	.word	0x20000024

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	2600      	movs	r6, #0
 8003fd0:	4d0c      	ldr	r5, [pc, #48]	; (8004004 <__libc_init_array+0x38>)
 8003fd2:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	f000 fd00 	bl	80049e0 <_init>
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	4d0a      	ldr	r5, [pc, #40]	; (800400c <__libc_init_array+0x40>)
 8003fe4:	4c0a      	ldr	r4, [pc, #40]	; (8004010 <__libc_init_array+0x44>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	08004b24 	.word	0x08004b24
 8004008:	08004b24 	.word	0x08004b24
 800400c:	08004b24 	.word	0x08004b24
 8004010:	08004b2c 	.word	0x08004b2c

08004014 <malloc>:
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <malloc+0xc>)
 8004016:	4601      	mov	r1, r0
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f000 b8c1 	b.w	80041a0 <_malloc_r>
 800401e:	bf00      	nop
 8004020:	20000024 	.word	0x20000024

08004024 <free>:
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <free+0xc>)
 8004026:	4601      	mov	r1, r0
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	f000 b851 	b.w	80040d0 <_free_r>
 800402e:	bf00      	nop
 8004030:	20000024 	.word	0x20000024

08004034 <memchr>:
 8004034:	4603      	mov	r3, r0
 8004036:	b510      	push	{r4, lr}
 8004038:	b2c9      	uxtb	r1, r1
 800403a:	4402      	add	r2, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	4618      	mov	r0, r3
 8004040:	d101      	bne.n	8004046 <memchr+0x12>
 8004042:	2000      	movs	r0, #0
 8004044:	e003      	b.n	800404e <memchr+0x1a>
 8004046:	7804      	ldrb	r4, [r0, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	428c      	cmp	r4, r1
 800404c:	d1f6      	bne.n	800403c <memchr+0x8>
 800404e:	bd10      	pop	{r4, pc}

08004050 <memcmp>:
 8004050:	b510      	push	{r4, lr}
 8004052:	3901      	subs	r1, #1
 8004054:	4402      	add	r2, r0
 8004056:	4290      	cmp	r0, r2
 8004058:	d101      	bne.n	800405e <memcmp+0xe>
 800405a:	2000      	movs	r0, #0
 800405c:	e005      	b.n	800406a <memcmp+0x1a>
 800405e:	7803      	ldrb	r3, [r0, #0]
 8004060:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004064:	42a3      	cmp	r3, r4
 8004066:	d001      	beq.n	800406c <memcmp+0x1c>
 8004068:	1b18      	subs	r0, r3, r4
 800406a:	bd10      	pop	{r4, pc}
 800406c:	3001      	adds	r0, #1
 800406e:	e7f2      	b.n	8004056 <memcmp+0x6>

08004070 <memcpy>:
 8004070:	440a      	add	r2, r1
 8004072:	4291      	cmp	r1, r2
 8004074:	f100 33ff 	add.w	r3, r0, #4294967295
 8004078:	d100      	bne.n	800407c <memcpy+0xc>
 800407a:	4770      	bx	lr
 800407c:	b510      	push	{r4, lr}
 800407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004082:	4291      	cmp	r1, r2
 8004084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004088:	d1f9      	bne.n	800407e <memcpy+0xe>
 800408a:	bd10      	pop	{r4, pc}

0800408c <memmove>:
 800408c:	4288      	cmp	r0, r1
 800408e:	b510      	push	{r4, lr}
 8004090:	eb01 0402 	add.w	r4, r1, r2
 8004094:	d902      	bls.n	800409c <memmove+0x10>
 8004096:	4284      	cmp	r4, r0
 8004098:	4623      	mov	r3, r4
 800409a:	d807      	bhi.n	80040ac <memmove+0x20>
 800409c:	1e43      	subs	r3, r0, #1
 800409e:	42a1      	cmp	r1, r4
 80040a0:	d008      	beq.n	80040b4 <memmove+0x28>
 80040a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040aa:	e7f8      	b.n	800409e <memmove+0x12>
 80040ac:	4601      	mov	r1, r0
 80040ae:	4402      	add	r2, r0
 80040b0:	428a      	cmp	r2, r1
 80040b2:	d100      	bne.n	80040b6 <memmove+0x2a>
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040be:	e7f7      	b.n	80040b0 <memmove+0x24>

080040c0 <memset>:
 80040c0:	4603      	mov	r3, r0
 80040c2:	4402      	add	r2, r0
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d100      	bne.n	80040ca <memset+0xa>
 80040c8:	4770      	bx	lr
 80040ca:	f803 1b01 	strb.w	r1, [r3], #1
 80040ce:	e7f9      	b.n	80040c4 <memset+0x4>

080040d0 <_free_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4605      	mov	r5, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d040      	beq.n	800415a <_free_r+0x8a>
 80040d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040dc:	1f0c      	subs	r4, r1, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfb8      	it	lt
 80040e2:	18e4      	addlt	r4, r4, r3
 80040e4:	f000 f944 	bl	8004370 <__malloc_lock>
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <_free_r+0x8c>)
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	b933      	cbnz	r3, 80040fc <_free_r+0x2c>
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6014      	str	r4, [r2, #0]
 80040f2:	4628      	mov	r0, r5
 80040f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f8:	f000 b940 	b.w	800437c <__malloc_unlock>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x42>
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	1821      	adds	r1, r4, r0
 8004104:	428b      	cmp	r3, r1
 8004106:	bf01      	itttt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	1809      	addeq	r1, r1, r0
 800410e:	6021      	streq	r1, [r4, #0]
 8004110:	e7ed      	b.n	80040ee <_free_r+0x1e>
 8004112:	461a      	mov	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b10b      	cbz	r3, 800411c <_free_r+0x4c>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d9fa      	bls.n	8004112 <_free_r+0x42>
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	1850      	adds	r0, r2, r1
 8004120:	42a0      	cmp	r0, r4
 8004122:	d10b      	bne.n	800413c <_free_r+0x6c>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	4401      	add	r1, r0
 8004128:	1850      	adds	r0, r2, r1
 800412a:	4283      	cmp	r3, r0
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	d1e0      	bne.n	80040f2 <_free_r+0x22>
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4401      	add	r1, r0
 8004136:	6011      	str	r1, [r2, #0]
 8004138:	6053      	str	r3, [r2, #4]
 800413a:	e7da      	b.n	80040f2 <_free_r+0x22>
 800413c:	d902      	bls.n	8004144 <_free_r+0x74>
 800413e:	230c      	movs	r3, #12
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	e7d6      	b.n	80040f2 <_free_r+0x22>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	1821      	adds	r1, r4, r0
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1809      	addeq	r1, r1, r0
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	6054      	str	r4, [r2, #4]
 8004158:	e7cb      	b.n	80040f2 <_free_r+0x22>
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000520 	.word	0x20000520

08004160 <sbrk_aligned>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	4e0e      	ldr	r6, [pc, #56]	; (800419c <sbrk_aligned+0x3c>)
 8004164:	460c      	mov	r4, r1
 8004166:	6831      	ldr	r1, [r6, #0]
 8004168:	4605      	mov	r5, r0
 800416a:	b911      	cbnz	r1, 8004172 <sbrk_aligned+0x12>
 800416c:	f000 f88c 	bl	8004288 <_sbrk_r>
 8004170:	6030      	str	r0, [r6, #0]
 8004172:	4621      	mov	r1, r4
 8004174:	4628      	mov	r0, r5
 8004176:	f000 f887 	bl	8004288 <_sbrk_r>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	d00a      	beq.n	8004194 <sbrk_aligned+0x34>
 800417e:	1cc4      	adds	r4, r0, #3
 8004180:	f024 0403 	bic.w	r4, r4, #3
 8004184:	42a0      	cmp	r0, r4
 8004186:	d007      	beq.n	8004198 <sbrk_aligned+0x38>
 8004188:	1a21      	subs	r1, r4, r0
 800418a:	4628      	mov	r0, r5
 800418c:	f000 f87c 	bl	8004288 <_sbrk_r>
 8004190:	3001      	adds	r0, #1
 8004192:	d101      	bne.n	8004198 <sbrk_aligned+0x38>
 8004194:	f04f 34ff 	mov.w	r4, #4294967295
 8004198:	4620      	mov	r0, r4
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	20000524 	.word	0x20000524

080041a0 <_malloc_r>:
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	1ccd      	adds	r5, r1, #3
 80041a6:	f025 0503 	bic.w	r5, r5, #3
 80041aa:	3508      	adds	r5, #8
 80041ac:	2d0c      	cmp	r5, #12
 80041ae:	bf38      	it	cc
 80041b0:	250c      	movcc	r5, #12
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	4607      	mov	r7, r0
 80041b6:	db01      	blt.n	80041bc <_malloc_r+0x1c>
 80041b8:	42a9      	cmp	r1, r5
 80041ba:	d905      	bls.n	80041c8 <_malloc_r+0x28>
 80041bc:	230c      	movs	r3, #12
 80041be:	2600      	movs	r6, #0
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4630      	mov	r0, r6
 80041c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c8:	4e2e      	ldr	r6, [pc, #184]	; (8004284 <_malloc_r+0xe4>)
 80041ca:	f000 f8d1 	bl	8004370 <__malloc_lock>
 80041ce:	6833      	ldr	r3, [r6, #0]
 80041d0:	461c      	mov	r4, r3
 80041d2:	bb34      	cbnz	r4, 8004222 <_malloc_r+0x82>
 80041d4:	4629      	mov	r1, r5
 80041d6:	4638      	mov	r0, r7
 80041d8:	f7ff ffc2 	bl	8004160 <sbrk_aligned>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	4604      	mov	r4, r0
 80041e0:	d14d      	bne.n	800427e <_malloc_r+0xde>
 80041e2:	6834      	ldr	r4, [r6, #0]
 80041e4:	4626      	mov	r6, r4
 80041e6:	2e00      	cmp	r6, #0
 80041e8:	d140      	bne.n	800426c <_malloc_r+0xcc>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	4631      	mov	r1, r6
 80041ee:	4638      	mov	r0, r7
 80041f0:	eb04 0803 	add.w	r8, r4, r3
 80041f4:	f000 f848 	bl	8004288 <_sbrk_r>
 80041f8:	4580      	cmp	r8, r0
 80041fa:	d13a      	bne.n	8004272 <_malloc_r+0xd2>
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	3503      	adds	r5, #3
 8004200:	1a6d      	subs	r5, r5, r1
 8004202:	f025 0503 	bic.w	r5, r5, #3
 8004206:	3508      	adds	r5, #8
 8004208:	2d0c      	cmp	r5, #12
 800420a:	bf38      	it	cc
 800420c:	250c      	movcc	r5, #12
 800420e:	4638      	mov	r0, r7
 8004210:	4629      	mov	r1, r5
 8004212:	f7ff ffa5 	bl	8004160 <sbrk_aligned>
 8004216:	3001      	adds	r0, #1
 8004218:	d02b      	beq.n	8004272 <_malloc_r+0xd2>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	442b      	add	r3, r5
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	e00e      	b.n	8004240 <_malloc_r+0xa0>
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	1b52      	subs	r2, r2, r5
 8004226:	d41e      	bmi.n	8004266 <_malloc_r+0xc6>
 8004228:	2a0b      	cmp	r2, #11
 800422a:	d916      	bls.n	800425a <_malloc_r+0xba>
 800422c:	1961      	adds	r1, r4, r5
 800422e:	42a3      	cmp	r3, r4
 8004230:	6025      	str	r5, [r4, #0]
 8004232:	bf18      	it	ne
 8004234:	6059      	strne	r1, [r3, #4]
 8004236:	6863      	ldr	r3, [r4, #4]
 8004238:	bf08      	it	eq
 800423a:	6031      	streq	r1, [r6, #0]
 800423c:	5162      	str	r2, [r4, r5]
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	4638      	mov	r0, r7
 8004242:	f104 060b 	add.w	r6, r4, #11
 8004246:	f000 f899 	bl	800437c <__malloc_unlock>
 800424a:	f026 0607 	bic.w	r6, r6, #7
 800424e:	1d23      	adds	r3, r4, #4
 8004250:	1af2      	subs	r2, r6, r3
 8004252:	d0b6      	beq.n	80041c2 <_malloc_r+0x22>
 8004254:	1b9b      	subs	r3, r3, r6
 8004256:	50a3      	str	r3, [r4, r2]
 8004258:	e7b3      	b.n	80041c2 <_malloc_r+0x22>
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	42a3      	cmp	r3, r4
 800425e:	bf0c      	ite	eq
 8004260:	6032      	streq	r2, [r6, #0]
 8004262:	605a      	strne	r2, [r3, #4]
 8004264:	e7ec      	b.n	8004240 <_malloc_r+0xa0>
 8004266:	4623      	mov	r3, r4
 8004268:	6864      	ldr	r4, [r4, #4]
 800426a:	e7b2      	b.n	80041d2 <_malloc_r+0x32>
 800426c:	4634      	mov	r4, r6
 800426e:	6876      	ldr	r6, [r6, #4]
 8004270:	e7b9      	b.n	80041e6 <_malloc_r+0x46>
 8004272:	230c      	movs	r3, #12
 8004274:	4638      	mov	r0, r7
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	f000 f880 	bl	800437c <__malloc_unlock>
 800427c:	e7a1      	b.n	80041c2 <_malloc_r+0x22>
 800427e:	6025      	str	r5, [r4, #0]
 8004280:	e7de      	b.n	8004240 <_malloc_r+0xa0>
 8004282:	bf00      	nop
 8004284:	20000520 	.word	0x20000520

08004288 <_sbrk_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	2300      	movs	r3, #0
 800428c:	4d05      	ldr	r5, [pc, #20]	; (80042a4 <_sbrk_r+0x1c>)
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f7fc fb96 	bl	80009c4 <_sbrk>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_sbrk_r+0x1a>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_sbrk_r+0x1a>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000528 	.word	0x20000528

080042a8 <_raise_r>:
 80042a8:	291f      	cmp	r1, #31
 80042aa:	b538      	push	{r3, r4, r5, lr}
 80042ac:	4604      	mov	r4, r0
 80042ae:	460d      	mov	r5, r1
 80042b0:	d904      	bls.n	80042bc <_raise_r+0x14>
 80042b2:	2316      	movs	r3, #22
 80042b4:	6003      	str	r3, [r0, #0]
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042be:	b112      	cbz	r2, 80042c6 <_raise_r+0x1e>
 80042c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80042c4:	b94b      	cbnz	r3, 80042da <_raise_r+0x32>
 80042c6:	4620      	mov	r0, r4
 80042c8:	f000 f830 	bl	800432c <_getpid_r>
 80042cc:	462a      	mov	r2, r5
 80042ce:	4601      	mov	r1, r0
 80042d0:	4620      	mov	r0, r4
 80042d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042d6:	f000 b817 	b.w	8004308 <_kill_r>
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d00a      	beq.n	80042f4 <_raise_r+0x4c>
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	d103      	bne.n	80042ea <_raise_r+0x42>
 80042e2:	2316      	movs	r3, #22
 80042e4:	6003      	str	r3, [r0, #0]
 80042e6:	2001      	movs	r0, #1
 80042e8:	e7e7      	b.n	80042ba <_raise_r+0x12>
 80042ea:	2400      	movs	r4, #0
 80042ec:	4628      	mov	r0, r5
 80042ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042f2:	4798      	blx	r3
 80042f4:	2000      	movs	r0, #0
 80042f6:	e7e0      	b.n	80042ba <_raise_r+0x12>

080042f8 <raise>:
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <raise+0xc>)
 80042fa:	4601      	mov	r1, r0
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f7ff bfd3 	b.w	80042a8 <_raise_r>
 8004302:	bf00      	nop
 8004304:	20000024 	.word	0x20000024

08004308 <_kill_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	2300      	movs	r3, #0
 800430c:	4d06      	ldr	r5, [pc, #24]	; (8004328 <_kill_r+0x20>)
 800430e:	4604      	mov	r4, r0
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	f7fc fb3a 	bl	800098e <_kill>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	d102      	bne.n	8004324 <_kill_r+0x1c>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	b103      	cbz	r3, 8004324 <_kill_r+0x1c>
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	bd38      	pop	{r3, r4, r5, pc}
 8004326:	bf00      	nop
 8004328:	20000528 	.word	0x20000528

0800432c <_getpid_r>:
 800432c:	f7fc bb28 	b.w	8000980 <_getpid>

08004330 <siprintf>:
 8004330:	b40e      	push	{r1, r2, r3}
 8004332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004336:	b500      	push	{lr}
 8004338:	b09c      	sub	sp, #112	; 0x70
 800433a:	ab1d      	add	r3, sp, #116	; 0x74
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	9107      	str	r1, [sp, #28]
 8004342:	9104      	str	r1, [sp, #16]
 8004344:	4808      	ldr	r0, [pc, #32]	; (8004368 <siprintf+0x38>)
 8004346:	4909      	ldr	r1, [pc, #36]	; (800436c <siprintf+0x3c>)
 8004348:	f853 2b04 	ldr.w	r2, [r3], #4
 800434c:	9105      	str	r1, [sp, #20]
 800434e:	6800      	ldr	r0, [r0, #0]
 8004350:	a902      	add	r1, sp, #8
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	f000 f874 	bl	8004440 <_svfiprintf_r>
 8004358:	2200      	movs	r2, #0
 800435a:	9b02      	ldr	r3, [sp, #8]
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	b01c      	add	sp, #112	; 0x70
 8004360:	f85d eb04 	ldr.w	lr, [sp], #4
 8004364:	b003      	add	sp, #12
 8004366:	4770      	bx	lr
 8004368:	20000024 	.word	0x20000024
 800436c:	ffff0208 	.word	0xffff0208

08004370 <__malloc_lock>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__malloc_lock+0x8>)
 8004372:	f000 bafb 	b.w	800496c <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	2000052c 	.word	0x2000052c

0800437c <__malloc_unlock>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__malloc_unlock+0x8>)
 800437e:	f000 baf6 	b.w	800496e <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	2000052c 	.word	0x2000052c

08004388 <__ssputs_r>:
 8004388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	688e      	ldr	r6, [r1, #8]
 800438e:	4682      	mov	sl, r0
 8004390:	429e      	cmp	r6, r3
 8004392:	460c      	mov	r4, r1
 8004394:	4690      	mov	r8, r2
 8004396:	461f      	mov	r7, r3
 8004398:	d838      	bhi.n	800440c <__ssputs_r+0x84>
 800439a:	898a      	ldrh	r2, [r1, #12]
 800439c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043a0:	d032      	beq.n	8004408 <__ssputs_r+0x80>
 80043a2:	6825      	ldr	r5, [r4, #0]
 80043a4:	6909      	ldr	r1, [r1, #16]
 80043a6:	3301      	adds	r3, #1
 80043a8:	eba5 0901 	sub.w	r9, r5, r1
 80043ac:	6965      	ldr	r5, [r4, #20]
 80043ae:	444b      	add	r3, r9
 80043b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043b8:	106d      	asrs	r5, r5, #1
 80043ba:	429d      	cmp	r5, r3
 80043bc:	bf38      	it	cc
 80043be:	461d      	movcc	r5, r3
 80043c0:	0553      	lsls	r3, r2, #21
 80043c2:	d531      	bpl.n	8004428 <__ssputs_r+0xa0>
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7ff feeb 	bl	80041a0 <_malloc_r>
 80043ca:	4606      	mov	r6, r0
 80043cc:	b950      	cbnz	r0, 80043e4 <__ssputs_r+0x5c>
 80043ce:	230c      	movs	r3, #12
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	f8ca 3000 	str.w	r3, [sl]
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e4:	464a      	mov	r2, r9
 80043e6:	6921      	ldr	r1, [r4, #16]
 80043e8:	f7ff fe42 	bl	8004070 <memcpy>
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	6126      	str	r6, [r4, #16]
 80043fa:	444e      	add	r6, r9
 80043fc:	6026      	str	r6, [r4, #0]
 80043fe:	463e      	mov	r6, r7
 8004400:	6165      	str	r5, [r4, #20]
 8004402:	eba5 0509 	sub.w	r5, r5, r9
 8004406:	60a5      	str	r5, [r4, #8]
 8004408:	42be      	cmp	r6, r7
 800440a:	d900      	bls.n	800440e <__ssputs_r+0x86>
 800440c:	463e      	mov	r6, r7
 800440e:	4632      	mov	r2, r6
 8004410:	4641      	mov	r1, r8
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	f7ff fe3a 	bl	800408c <memmove>
 8004418:	68a3      	ldr	r3, [r4, #8]
 800441a:	2000      	movs	r0, #0
 800441c:	1b9b      	subs	r3, r3, r6
 800441e:	60a3      	str	r3, [r4, #8]
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	4433      	add	r3, r6
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	e7db      	b.n	80043e0 <__ssputs_r+0x58>
 8004428:	462a      	mov	r2, r5
 800442a:	f000 faa1 	bl	8004970 <_realloc_r>
 800442e:	4606      	mov	r6, r0
 8004430:	2800      	cmp	r0, #0
 8004432:	d1e1      	bne.n	80043f8 <__ssputs_r+0x70>
 8004434:	4650      	mov	r0, sl
 8004436:	6921      	ldr	r1, [r4, #16]
 8004438:	f7ff fe4a 	bl	80040d0 <_free_r>
 800443c:	e7c7      	b.n	80043ce <__ssputs_r+0x46>
	...

08004440 <_svfiprintf_r>:
 8004440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004444:	4698      	mov	r8, r3
 8004446:	898b      	ldrh	r3, [r1, #12]
 8004448:	4607      	mov	r7, r0
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	460d      	mov	r5, r1
 800444e:	4614      	mov	r4, r2
 8004450:	b09d      	sub	sp, #116	; 0x74
 8004452:	d50e      	bpl.n	8004472 <_svfiprintf_r+0x32>
 8004454:	690b      	ldr	r3, [r1, #16]
 8004456:	b963      	cbnz	r3, 8004472 <_svfiprintf_r+0x32>
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	f7ff fea1 	bl	80041a0 <_malloc_r>
 800445e:	6028      	str	r0, [r5, #0]
 8004460:	6128      	str	r0, [r5, #16]
 8004462:	b920      	cbnz	r0, 800446e <_svfiprintf_r+0x2e>
 8004464:	230c      	movs	r3, #12
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	e0d1      	b.n	8004612 <_svfiprintf_r+0x1d2>
 800446e:	2340      	movs	r3, #64	; 0x40
 8004470:	616b      	str	r3, [r5, #20]
 8004472:	2300      	movs	r3, #0
 8004474:	9309      	str	r3, [sp, #36]	; 0x24
 8004476:	2320      	movs	r3, #32
 8004478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800447c:	2330      	movs	r3, #48	; 0x30
 800447e:	f04f 0901 	mov.w	r9, #1
 8004482:	f8cd 800c 	str.w	r8, [sp, #12]
 8004486:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800462c <_svfiprintf_r+0x1ec>
 800448a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800448e:	4623      	mov	r3, r4
 8004490:	469a      	mov	sl, r3
 8004492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004496:	b10a      	cbz	r2, 800449c <_svfiprintf_r+0x5c>
 8004498:	2a25      	cmp	r2, #37	; 0x25
 800449a:	d1f9      	bne.n	8004490 <_svfiprintf_r+0x50>
 800449c:	ebba 0b04 	subs.w	fp, sl, r4
 80044a0:	d00b      	beq.n	80044ba <_svfiprintf_r+0x7a>
 80044a2:	465b      	mov	r3, fp
 80044a4:	4622      	mov	r2, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff ff6d 	bl	8004388 <__ssputs_r>
 80044ae:	3001      	adds	r0, #1
 80044b0:	f000 80aa 	beq.w	8004608 <_svfiprintf_r+0x1c8>
 80044b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b6:	445a      	add	r2, fp
 80044b8:	9209      	str	r2, [sp, #36]	; 0x24
 80044ba:	f89a 3000 	ldrb.w	r3, [sl]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80a2 	beq.w	8004608 <_svfiprintf_r+0x1c8>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ce:	f10a 0a01 	add.w	sl, sl, #1
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	9307      	str	r3, [sp, #28]
 80044d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044da:	931a      	str	r3, [sp, #104]	; 0x68
 80044dc:	4654      	mov	r4, sl
 80044de:	2205      	movs	r2, #5
 80044e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e4:	4851      	ldr	r0, [pc, #324]	; (800462c <_svfiprintf_r+0x1ec>)
 80044e6:	f7ff fda5 	bl	8004034 <memchr>
 80044ea:	9a04      	ldr	r2, [sp, #16]
 80044ec:	b9d8      	cbnz	r0, 8004526 <_svfiprintf_r+0xe6>
 80044ee:	06d0      	lsls	r0, r2, #27
 80044f0:	bf44      	itt	mi
 80044f2:	2320      	movmi	r3, #32
 80044f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f8:	0711      	lsls	r1, r2, #28
 80044fa:	bf44      	itt	mi
 80044fc:	232b      	movmi	r3, #43	; 0x2b
 80044fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004502:	f89a 3000 	ldrb.w	r3, [sl]
 8004506:	2b2a      	cmp	r3, #42	; 0x2a
 8004508:	d015      	beq.n	8004536 <_svfiprintf_r+0xf6>
 800450a:	4654      	mov	r4, sl
 800450c:	2000      	movs	r0, #0
 800450e:	f04f 0c0a 	mov.w	ip, #10
 8004512:	9a07      	ldr	r2, [sp, #28]
 8004514:	4621      	mov	r1, r4
 8004516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800451a:	3b30      	subs	r3, #48	; 0x30
 800451c:	2b09      	cmp	r3, #9
 800451e:	d94e      	bls.n	80045be <_svfiprintf_r+0x17e>
 8004520:	b1b0      	cbz	r0, 8004550 <_svfiprintf_r+0x110>
 8004522:	9207      	str	r2, [sp, #28]
 8004524:	e014      	b.n	8004550 <_svfiprintf_r+0x110>
 8004526:	eba0 0308 	sub.w	r3, r0, r8
 800452a:	fa09 f303 	lsl.w	r3, r9, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	46a2      	mov	sl, r4
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	e7d2      	b.n	80044dc <_svfiprintf_r+0x9c>
 8004536:	9b03      	ldr	r3, [sp, #12]
 8004538:	1d19      	adds	r1, r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9103      	str	r1, [sp, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfbb      	ittet	lt
 8004542:	425b      	neglt	r3, r3
 8004544:	f042 0202 	orrlt.w	r2, r2, #2
 8004548:	9307      	strge	r3, [sp, #28]
 800454a:	9307      	strlt	r3, [sp, #28]
 800454c:	bfb8      	it	lt
 800454e:	9204      	strlt	r2, [sp, #16]
 8004550:	7823      	ldrb	r3, [r4, #0]
 8004552:	2b2e      	cmp	r3, #46	; 0x2e
 8004554:	d10c      	bne.n	8004570 <_svfiprintf_r+0x130>
 8004556:	7863      	ldrb	r3, [r4, #1]
 8004558:	2b2a      	cmp	r3, #42	; 0x2a
 800455a:	d135      	bne.n	80045c8 <_svfiprintf_r+0x188>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	3402      	adds	r4, #2
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	9203      	str	r2, [sp, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	bfb8      	it	lt
 800456a:	f04f 33ff 	movlt.w	r3, #4294967295
 800456e:	9305      	str	r3, [sp, #20]
 8004570:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004630 <_svfiprintf_r+0x1f0>
 8004574:	2203      	movs	r2, #3
 8004576:	4650      	mov	r0, sl
 8004578:	7821      	ldrb	r1, [r4, #0]
 800457a:	f7ff fd5b 	bl	8004034 <memchr>
 800457e:	b140      	cbz	r0, 8004592 <_svfiprintf_r+0x152>
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	eba0 000a 	sub.w	r0, r0, sl
 8004586:	fa03 f000 	lsl.w	r0, r3, r0
 800458a:	9b04      	ldr	r3, [sp, #16]
 800458c:	3401      	adds	r4, #1
 800458e:	4303      	orrs	r3, r0
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004596:	2206      	movs	r2, #6
 8004598:	4826      	ldr	r0, [pc, #152]	; (8004634 <_svfiprintf_r+0x1f4>)
 800459a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800459e:	f7ff fd49 	bl	8004034 <memchr>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d038      	beq.n	8004618 <_svfiprintf_r+0x1d8>
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <_svfiprintf_r+0x1f8>)
 80045a8:	bb1b      	cbnz	r3, 80045f2 <_svfiprintf_r+0x1b2>
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	3307      	adds	r3, #7
 80045ae:	f023 0307 	bic.w	r3, r3, #7
 80045b2:	3308      	adds	r3, #8
 80045b4:	9303      	str	r3, [sp, #12]
 80045b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b8:	4433      	add	r3, r6
 80045ba:	9309      	str	r3, [sp, #36]	; 0x24
 80045bc:	e767      	b.n	800448e <_svfiprintf_r+0x4e>
 80045be:	460c      	mov	r4, r1
 80045c0:	2001      	movs	r0, #1
 80045c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c6:	e7a5      	b.n	8004514 <_svfiprintf_r+0xd4>
 80045c8:	2300      	movs	r3, #0
 80045ca:	f04f 0c0a 	mov.w	ip, #10
 80045ce:	4619      	mov	r1, r3
 80045d0:	3401      	adds	r4, #1
 80045d2:	9305      	str	r3, [sp, #20]
 80045d4:	4620      	mov	r0, r4
 80045d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045da:	3a30      	subs	r2, #48	; 0x30
 80045dc:	2a09      	cmp	r2, #9
 80045de:	d903      	bls.n	80045e8 <_svfiprintf_r+0x1a8>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0c5      	beq.n	8004570 <_svfiprintf_r+0x130>
 80045e4:	9105      	str	r1, [sp, #20]
 80045e6:	e7c3      	b.n	8004570 <_svfiprintf_r+0x130>
 80045e8:	4604      	mov	r4, r0
 80045ea:	2301      	movs	r3, #1
 80045ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f0:	e7f0      	b.n	80045d4 <_svfiprintf_r+0x194>
 80045f2:	ab03      	add	r3, sp, #12
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	462a      	mov	r2, r5
 80045f8:	4638      	mov	r0, r7
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <_svfiprintf_r+0x1fc>)
 80045fc:	a904      	add	r1, sp, #16
 80045fe:	f3af 8000 	nop.w
 8004602:	1c42      	adds	r2, r0, #1
 8004604:	4606      	mov	r6, r0
 8004606:	d1d6      	bne.n	80045b6 <_svfiprintf_r+0x176>
 8004608:	89ab      	ldrh	r3, [r5, #12]
 800460a:	065b      	lsls	r3, r3, #25
 800460c:	f53f af2c 	bmi.w	8004468 <_svfiprintf_r+0x28>
 8004610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004612:	b01d      	add	sp, #116	; 0x74
 8004614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004618:	ab03      	add	r3, sp, #12
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	462a      	mov	r2, r5
 800461e:	4638      	mov	r0, r7
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <_svfiprintf_r+0x1fc>)
 8004622:	a904      	add	r1, sp, #16
 8004624:	f000 f87c 	bl	8004720 <_printf_i>
 8004628:	e7eb      	b.n	8004602 <_svfiprintf_r+0x1c2>
 800462a:	bf00      	nop
 800462c:	08004aef 	.word	0x08004aef
 8004630:	08004af5 	.word	0x08004af5
 8004634:	08004af9 	.word	0x08004af9
 8004638:	00000000 	.word	0x00000000
 800463c:	08004389 	.word	0x08004389

08004640 <_printf_common>:
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	4616      	mov	r6, r2
 8004646:	4699      	mov	r9, r3
 8004648:	688a      	ldr	r2, [r1, #8]
 800464a:	690b      	ldr	r3, [r1, #16]
 800464c:	4607      	mov	r7, r0
 800464e:	4293      	cmp	r3, r2
 8004650:	bfb8      	it	lt
 8004652:	4613      	movlt	r3, r2
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800465a:	460c      	mov	r4, r1
 800465c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004660:	b10a      	cbz	r2, 8004666 <_printf_common+0x26>
 8004662:	3301      	adds	r3, #1
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	0699      	lsls	r1, r3, #26
 800466a:	bf42      	ittt	mi
 800466c:	6833      	ldrmi	r3, [r6, #0]
 800466e:	3302      	addmi	r3, #2
 8004670:	6033      	strmi	r3, [r6, #0]
 8004672:	6825      	ldr	r5, [r4, #0]
 8004674:	f015 0506 	ands.w	r5, r5, #6
 8004678:	d106      	bne.n	8004688 <_printf_common+0x48>
 800467a:	f104 0a19 	add.w	sl, r4, #25
 800467e:	68e3      	ldr	r3, [r4, #12]
 8004680:	6832      	ldr	r2, [r6, #0]
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	42ab      	cmp	r3, r5
 8004686:	dc28      	bgt.n	80046da <_printf_common+0x9a>
 8004688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800468c:	1e13      	subs	r3, r2, #0
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	bf18      	it	ne
 8004692:	2301      	movne	r3, #1
 8004694:	0692      	lsls	r2, r2, #26
 8004696:	d42d      	bmi.n	80046f4 <_printf_common+0xb4>
 8004698:	4649      	mov	r1, r9
 800469a:	4638      	mov	r0, r7
 800469c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a0:	47c0      	blx	r8
 80046a2:	3001      	adds	r0, #1
 80046a4:	d020      	beq.n	80046e8 <_printf_common+0xa8>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	68e5      	ldr	r5, [r4, #12]
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	bf18      	it	ne
 80046b2:	2500      	movne	r5, #0
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	f04f 0600 	mov.w	r6, #0
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	bf08      	it	eq
 80046be:	1aad      	subeq	r5, r5, r2
 80046c0:	6922      	ldr	r2, [r4, #16]
 80046c2:	bf08      	it	eq
 80046c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bfc4      	itt	gt
 80046cc:	1a9b      	subgt	r3, r3, r2
 80046ce:	18ed      	addgt	r5, r5, r3
 80046d0:	341a      	adds	r4, #26
 80046d2:	42b5      	cmp	r5, r6
 80046d4:	d11a      	bne.n	800470c <_printf_common+0xcc>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e008      	b.n	80046ec <_printf_common+0xac>
 80046da:	2301      	movs	r3, #1
 80046dc:	4652      	mov	r2, sl
 80046de:	4649      	mov	r1, r9
 80046e0:	4638      	mov	r0, r7
 80046e2:	47c0      	blx	r8
 80046e4:	3001      	adds	r0, #1
 80046e6:	d103      	bne.n	80046f0 <_printf_common+0xb0>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f0:	3501      	adds	r5, #1
 80046f2:	e7c4      	b.n	800467e <_printf_common+0x3e>
 80046f4:	2030      	movs	r0, #48	; 0x30
 80046f6:	18e1      	adds	r1, r4, r3
 80046f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004702:	4422      	add	r2, r4
 8004704:	3302      	adds	r3, #2
 8004706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800470a:	e7c5      	b.n	8004698 <_printf_common+0x58>
 800470c:	2301      	movs	r3, #1
 800470e:	4622      	mov	r2, r4
 8004710:	4649      	mov	r1, r9
 8004712:	4638      	mov	r0, r7
 8004714:	47c0      	blx	r8
 8004716:	3001      	adds	r0, #1
 8004718:	d0e6      	beq.n	80046e8 <_printf_common+0xa8>
 800471a:	3601      	adds	r6, #1
 800471c:	e7d9      	b.n	80046d2 <_printf_common+0x92>
	...

08004720 <_printf_i>:
 8004720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	7e0f      	ldrb	r7, [r1, #24]
 8004726:	4691      	mov	r9, r2
 8004728:	2f78      	cmp	r7, #120	; 0x78
 800472a:	4680      	mov	r8, r0
 800472c:	460c      	mov	r4, r1
 800472e:	469a      	mov	sl, r3
 8004730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004736:	d807      	bhi.n	8004748 <_printf_i+0x28>
 8004738:	2f62      	cmp	r7, #98	; 0x62
 800473a:	d80a      	bhi.n	8004752 <_printf_i+0x32>
 800473c:	2f00      	cmp	r7, #0
 800473e:	f000 80d9 	beq.w	80048f4 <_printf_i+0x1d4>
 8004742:	2f58      	cmp	r7, #88	; 0x58
 8004744:	f000 80a4 	beq.w	8004890 <_printf_i+0x170>
 8004748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800474c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004750:	e03a      	b.n	80047c8 <_printf_i+0xa8>
 8004752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004756:	2b15      	cmp	r3, #21
 8004758:	d8f6      	bhi.n	8004748 <_printf_i+0x28>
 800475a:	a101      	add	r1, pc, #4	; (adr r1, 8004760 <_printf_i+0x40>)
 800475c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047cd 	.word	0x080047cd
 8004768:	08004749 	.word	0x08004749
 800476c:	08004749 	.word	0x08004749
 8004770:	08004749 	.word	0x08004749
 8004774:	08004749 	.word	0x08004749
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004749 	.word	0x08004749
 8004780:	08004749 	.word	0x08004749
 8004784:	08004749 	.word	0x08004749
 8004788:	08004749 	.word	0x08004749
 800478c:	080048db 	.word	0x080048db
 8004790:	080047fd 	.word	0x080047fd
 8004794:	080048bd 	.word	0x080048bd
 8004798:	08004749 	.word	0x08004749
 800479c:	08004749 	.word	0x08004749
 80047a0:	080048fd 	.word	0x080048fd
 80047a4:	08004749 	.word	0x08004749
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004749 	.word	0x08004749
 80047b0:	08004749 	.word	0x08004749
 80047b4:	080048c5 	.word	0x080048c5
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	602a      	str	r2, [r5, #0]
 80047c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0a4      	b.n	8004916 <_printf_i+0x1f6>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	6829      	ldr	r1, [r5, #0]
 80047d0:	0606      	lsls	r6, r0, #24
 80047d2:	f101 0304 	add.w	r3, r1, #4
 80047d6:	d50a      	bpl.n	80047ee <_printf_i+0xce>
 80047d8:	680e      	ldr	r6, [r1, #0]
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	2e00      	cmp	r6, #0
 80047de:	da03      	bge.n	80047e8 <_printf_i+0xc8>
 80047e0:	232d      	movs	r3, #45	; 0x2d
 80047e2:	4276      	negs	r6, r6
 80047e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e8:	230a      	movs	r3, #10
 80047ea:	485e      	ldr	r0, [pc, #376]	; (8004964 <_printf_i+0x244>)
 80047ec:	e019      	b.n	8004822 <_printf_i+0x102>
 80047ee:	680e      	ldr	r6, [r1, #0]
 80047f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	bf18      	it	ne
 80047f8:	b236      	sxthne	r6, r6
 80047fa:	e7ef      	b.n	80047dc <_printf_i+0xbc>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	1d19      	adds	r1, r3, #4
 8004802:	6029      	str	r1, [r5, #0]
 8004804:	0601      	lsls	r1, r0, #24
 8004806:	d501      	bpl.n	800480c <_printf_i+0xec>
 8004808:	681e      	ldr	r6, [r3, #0]
 800480a:	e002      	b.n	8004812 <_printf_i+0xf2>
 800480c:	0646      	lsls	r6, r0, #25
 800480e:	d5fb      	bpl.n	8004808 <_printf_i+0xe8>
 8004810:	881e      	ldrh	r6, [r3, #0]
 8004812:	2f6f      	cmp	r7, #111	; 0x6f
 8004814:	bf0c      	ite	eq
 8004816:	2308      	moveq	r3, #8
 8004818:	230a      	movne	r3, #10
 800481a:	4852      	ldr	r0, [pc, #328]	; (8004964 <_printf_i+0x244>)
 800481c:	2100      	movs	r1, #0
 800481e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004822:	6865      	ldr	r5, [r4, #4]
 8004824:	2d00      	cmp	r5, #0
 8004826:	bfa8      	it	ge
 8004828:	6821      	ldrge	r1, [r4, #0]
 800482a:	60a5      	str	r5, [r4, #8]
 800482c:	bfa4      	itt	ge
 800482e:	f021 0104 	bicge.w	r1, r1, #4
 8004832:	6021      	strge	r1, [r4, #0]
 8004834:	b90e      	cbnz	r6, 800483a <_printf_i+0x11a>
 8004836:	2d00      	cmp	r5, #0
 8004838:	d04d      	beq.n	80048d6 <_printf_i+0x1b6>
 800483a:	4615      	mov	r5, r2
 800483c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004840:	fb03 6711 	mls	r7, r3, r1, r6
 8004844:	5dc7      	ldrb	r7, [r0, r7]
 8004846:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800484a:	4637      	mov	r7, r6
 800484c:	42bb      	cmp	r3, r7
 800484e:	460e      	mov	r6, r1
 8004850:	d9f4      	bls.n	800483c <_printf_i+0x11c>
 8004852:	2b08      	cmp	r3, #8
 8004854:	d10b      	bne.n	800486e <_printf_i+0x14e>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	07de      	lsls	r6, r3, #31
 800485a:	d508      	bpl.n	800486e <_printf_i+0x14e>
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	6861      	ldr	r1, [r4, #4]
 8004860:	4299      	cmp	r1, r3
 8004862:	bfde      	ittt	le
 8004864:	2330      	movle	r3, #48	; 0x30
 8004866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800486a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800486e:	1b52      	subs	r2, r2, r5
 8004870:	6122      	str	r2, [r4, #16]
 8004872:	464b      	mov	r3, r9
 8004874:	4621      	mov	r1, r4
 8004876:	4640      	mov	r0, r8
 8004878:	f8cd a000 	str.w	sl, [sp]
 800487c:	aa03      	add	r2, sp, #12
 800487e:	f7ff fedf 	bl	8004640 <_printf_common>
 8004882:	3001      	adds	r0, #1
 8004884:	d14c      	bne.n	8004920 <_printf_i+0x200>
 8004886:	f04f 30ff 	mov.w	r0, #4294967295
 800488a:	b004      	add	sp, #16
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	4834      	ldr	r0, [pc, #208]	; (8004964 <_printf_i+0x244>)
 8004892:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004896:	6829      	ldr	r1, [r5, #0]
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f851 6b04 	ldr.w	r6, [r1], #4
 800489e:	6029      	str	r1, [r5, #0]
 80048a0:	061d      	lsls	r5, r3, #24
 80048a2:	d514      	bpl.n	80048ce <_printf_i+0x1ae>
 80048a4:	07df      	lsls	r7, r3, #31
 80048a6:	bf44      	itt	mi
 80048a8:	f043 0320 	orrmi.w	r3, r3, #32
 80048ac:	6023      	strmi	r3, [r4, #0]
 80048ae:	b91e      	cbnz	r6, 80048b8 <_printf_i+0x198>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f023 0320 	bic.w	r3, r3, #32
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2310      	movs	r3, #16
 80048ba:	e7af      	b.n	800481c <_printf_i+0xfc>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	f043 0320 	orr.w	r3, r3, #32
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	2378      	movs	r3, #120	; 0x78
 80048c6:	4828      	ldr	r0, [pc, #160]	; (8004968 <_printf_i+0x248>)
 80048c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048cc:	e7e3      	b.n	8004896 <_printf_i+0x176>
 80048ce:	0659      	lsls	r1, r3, #25
 80048d0:	bf48      	it	mi
 80048d2:	b2b6      	uxthmi	r6, r6
 80048d4:	e7e6      	b.n	80048a4 <_printf_i+0x184>
 80048d6:	4615      	mov	r5, r2
 80048d8:	e7bb      	b.n	8004852 <_printf_i+0x132>
 80048da:	682b      	ldr	r3, [r5, #0]
 80048dc:	6826      	ldr	r6, [r4, #0]
 80048de:	1d18      	adds	r0, r3, #4
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	6028      	str	r0, [r5, #0]
 80048e4:	0635      	lsls	r5, r6, #24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	d501      	bpl.n	80048ee <_printf_i+0x1ce>
 80048ea:	6019      	str	r1, [r3, #0]
 80048ec:	e002      	b.n	80048f4 <_printf_i+0x1d4>
 80048ee:	0670      	lsls	r0, r6, #25
 80048f0:	d5fb      	bpl.n	80048ea <_printf_i+0x1ca>
 80048f2:	8019      	strh	r1, [r3, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	4615      	mov	r5, r2
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	e7ba      	b.n	8004872 <_printf_i+0x152>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	2100      	movs	r1, #0
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	602a      	str	r2, [r5, #0]
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	4628      	mov	r0, r5
 800490a:	f7ff fb93 	bl	8004034 <memchr>
 800490e:	b108      	cbz	r0, 8004914 <_printf_i+0x1f4>
 8004910:	1b40      	subs	r0, r0, r5
 8004912:	6060      	str	r0, [r4, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	2300      	movs	r3, #0
 800491a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800491e:	e7a8      	b.n	8004872 <_printf_i+0x152>
 8004920:	462a      	mov	r2, r5
 8004922:	4649      	mov	r1, r9
 8004924:	4640      	mov	r0, r8
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	47d0      	blx	sl
 800492a:	3001      	adds	r0, #1
 800492c:	d0ab      	beq.n	8004886 <_printf_i+0x166>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	079b      	lsls	r3, r3, #30
 8004932:	d413      	bmi.n	800495c <_printf_i+0x23c>
 8004934:	68e0      	ldr	r0, [r4, #12]
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	4298      	cmp	r0, r3
 800493a:	bfb8      	it	lt
 800493c:	4618      	movlt	r0, r3
 800493e:	e7a4      	b.n	800488a <_printf_i+0x16a>
 8004940:	2301      	movs	r3, #1
 8004942:	4632      	mov	r2, r6
 8004944:	4649      	mov	r1, r9
 8004946:	4640      	mov	r0, r8
 8004948:	47d0      	blx	sl
 800494a:	3001      	adds	r0, #1
 800494c:	d09b      	beq.n	8004886 <_printf_i+0x166>
 800494e:	3501      	adds	r5, #1
 8004950:	68e3      	ldr	r3, [r4, #12]
 8004952:	9903      	ldr	r1, [sp, #12]
 8004954:	1a5b      	subs	r3, r3, r1
 8004956:	42ab      	cmp	r3, r5
 8004958:	dcf2      	bgt.n	8004940 <_printf_i+0x220>
 800495a:	e7eb      	b.n	8004934 <_printf_i+0x214>
 800495c:	2500      	movs	r5, #0
 800495e:	f104 0619 	add.w	r6, r4, #25
 8004962:	e7f5      	b.n	8004950 <_printf_i+0x230>
 8004964:	08004b00 	.word	0x08004b00
 8004968:	08004b11 	.word	0x08004b11

0800496c <__retarget_lock_acquire_recursive>:
 800496c:	4770      	bx	lr

0800496e <__retarget_lock_release_recursive>:
 800496e:	4770      	bx	lr

08004970 <_realloc_r>:
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	4680      	mov	r8, r0
 8004976:	4614      	mov	r4, r2
 8004978:	460e      	mov	r6, r1
 800497a:	b921      	cbnz	r1, 8004986 <_realloc_r+0x16>
 800497c:	4611      	mov	r1, r2
 800497e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004982:	f7ff bc0d 	b.w	80041a0 <_malloc_r>
 8004986:	b92a      	cbnz	r2, 8004994 <_realloc_r+0x24>
 8004988:	f7ff fba2 	bl	80040d0 <_free_r>
 800498c:	4625      	mov	r5, r4
 800498e:	4628      	mov	r0, r5
 8004990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004994:	f000 f81b 	bl	80049ce <_malloc_usable_size_r>
 8004998:	4284      	cmp	r4, r0
 800499a:	4607      	mov	r7, r0
 800499c:	d802      	bhi.n	80049a4 <_realloc_r+0x34>
 800499e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049a2:	d812      	bhi.n	80049ca <_realloc_r+0x5a>
 80049a4:	4621      	mov	r1, r4
 80049a6:	4640      	mov	r0, r8
 80049a8:	f7ff fbfa 	bl	80041a0 <_malloc_r>
 80049ac:	4605      	mov	r5, r0
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d0ed      	beq.n	800498e <_realloc_r+0x1e>
 80049b2:	42bc      	cmp	r4, r7
 80049b4:	4622      	mov	r2, r4
 80049b6:	4631      	mov	r1, r6
 80049b8:	bf28      	it	cs
 80049ba:	463a      	movcs	r2, r7
 80049bc:	f7ff fb58 	bl	8004070 <memcpy>
 80049c0:	4631      	mov	r1, r6
 80049c2:	4640      	mov	r0, r8
 80049c4:	f7ff fb84 	bl	80040d0 <_free_r>
 80049c8:	e7e1      	b.n	800498e <_realloc_r+0x1e>
 80049ca:	4635      	mov	r5, r6
 80049cc:	e7df      	b.n	800498e <_realloc_r+0x1e>

080049ce <_malloc_usable_size_r>:
 80049ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d2:	1f18      	subs	r0, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bfbc      	itt	lt
 80049d8:	580b      	ldrlt	r3, [r1, r0]
 80049da:	18c0      	addlt	r0, r0, r3
 80049dc:	4770      	bx	lr
	...

080049e0 <_init>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr

080049ec <_fini>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr
