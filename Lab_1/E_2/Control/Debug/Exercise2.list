
Exercise2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000960  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000a80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000a80  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002388  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b51  00000000  00000000  000223bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00022f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  00023268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015367  00000000  00000000  00023548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003898  00000000  00000000  000388af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000794b8  00000000  00000000  0003c147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b55ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b64  00000000  00000000  000b5650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000a54 	.word	0x08000a54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000a54 	.word	0x08000a54

0800014c <SwitchRed>:

typedef enum ColorState {
	Red, Yellow, Green
} E_ColorState;

void SwitchRed(E_LEDState state) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (state == On) {
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d104      	bne.n	8000166 <SwitchRed+0x1a>
		HAL_GPIO_WritePin(O_RED_LED_GPIO_Port, O_RED_LED_Pin, RESET);
 800015c:	2200      	movs	r2, #0
 800015e:	2120      	movs	r1, #32
 8000160:	4807      	ldr	r0, [pc, #28]	; (8000180 <SwitchRed+0x34>)
 8000162:	f000 fc3b 	bl	80009dc <HAL_GPIO_WritePin>
	}
	if (state == Off) {
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d104      	bne.n	8000176 <SwitchRed+0x2a>
		HAL_GPIO_WritePin(O_RED_LED_GPIO_Port, O_RED_LED_Pin, SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2120      	movs	r1, #32
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <SwitchRed+0x34>)
 8000172:	f000 fc33 	bl	80009dc <HAL_GPIO_WritePin>
	}
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <SwitchYellow>:

void SwitchYellow(E_LEDState state) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	if (state == On) {
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d104      	bne.n	800019e <SwitchYellow+0x1a>
		HAL_GPIO_WritePin(O_YEL_LED_GPIO_Port, O_YEL_LED_Pin, RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	2140      	movs	r1, #64	; 0x40
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <SwitchYellow+0x34>)
 800019a:	f000 fc1f 	bl	80009dc <HAL_GPIO_WritePin>
	}
	if (state == Off) {
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d104      	bne.n	80001ae <SwitchYellow+0x2a>
		HAL_GPIO_WritePin(O_YEL_LED_GPIO_Port, O_YEL_LED_Pin, SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2140      	movs	r1, #64	; 0x40
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <SwitchYellow+0x34>)
 80001aa:	f000 fc17 	bl	80009dc <HAL_GPIO_WritePin>
	}
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40010800 	.word	0x40010800

080001bc <SwitchGreen>:

void SwitchGreen(E_LEDState state) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	if (state == On) {
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d104      	bne.n	80001d6 <SwitchGreen+0x1a>
		HAL_GPIO_WritePin(O_GRE_LED_GPIO_Port, O_GRE_LED_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2180      	movs	r1, #128	; 0x80
 80001d0:	4807      	ldr	r0, [pc, #28]	; (80001f0 <SwitchGreen+0x34>)
 80001d2:	f000 fc03 	bl	80009dc <HAL_GPIO_WritePin>
	}
	if (state == Off) {
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d104      	bne.n	80001e6 <SwitchGreen+0x2a>
		HAL_GPIO_WritePin(O_GRE_LED_GPIO_Port, O_GRE_LED_Pin, SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	2180      	movs	r1, #128	; 0x80
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <SwitchGreen+0x34>)
 80001e2:	f000 fbfb 	bl	80009dc <HAL_GPIO_WritePin>
	}
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010800 	.word	0x40010800

080001f4 <main>:

int main(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0

	HAL_Init();
 80001fa:	f000 f909 	bl	8000410 <HAL_Init>

	MX_GPIO_Init();
 80001fe:	f000 f85f 	bl	80002c0 <MX_GPIO_Init>

	E_ColorState v_State;
	v_State = Yellow;
 8000202:	2301      	movs	r3, #1
 8000204:	73fb      	strb	r3, [r7, #15]

	E_ColorState v_PreviousState;
	v_PreviousState = Red;
 8000206:	2300      	movs	r3, #0
 8000208:	73bb      	strb	r3, [r7, #14]

	int v_Counter = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]

	while (1) {
		if (v_Counter == 0) {
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d149      	bne.n	80002a8 <main+0xb4>
			E_ColorState v_NextState;
			if (v_State == Red) {
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d10e      	bne.n	8000238 <main+0x44>
				// Currently red
				// Back to yellow
				v_NextState = Yellow;
 800021a:	2301      	movs	r3, #1
 800021c:	71fb      	strb	r3, [r7, #7]
				v_PreviousState = Red;
 800021e:	2300      	movs	r3, #0
 8000220:	73bb      	strb	r3, [r7, #14]
				v_Counter = T_YELLOW;
 8000222:	2302      	movs	r3, #2
 8000224:	60bb      	str	r3, [r7, #8]

				SwitchRed(Off);
 8000226:	2001      	movs	r0, #1
 8000228:	f7ff ff90 	bl	800014c <SwitchRed>
				SwitchYellow(On);
 800022c:	2000      	movs	r0, #0
 800022e:	f7ff ffa9 	bl	8000184 <SwitchYellow>
				SwitchGreen(Off);
 8000232:	2001      	movs	r0, #1
 8000234:	f7ff ffc2 	bl	80001bc <SwitchGreen>
			}
			if (v_State == Green) {
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d10e      	bne.n	800025c <main+0x68>
				// Currently green
				// Back to yellow
				v_NextState = Yellow;
 800023e:	2301      	movs	r3, #1
 8000240:	71fb      	strb	r3, [r7, #7]
				v_PreviousState = Green;
 8000242:	2302      	movs	r3, #2
 8000244:	73bb      	strb	r3, [r7, #14]
				v_Counter = T_YELLOW;
 8000246:	2302      	movs	r3, #2
 8000248:	60bb      	str	r3, [r7, #8]

				SwitchGreen(Off);
 800024a:	2001      	movs	r0, #1
 800024c:	f7ff ffb6 	bl	80001bc <SwitchGreen>
				SwitchYellow(On);
 8000250:	2000      	movs	r0, #0
 8000252:	f7ff ff97 	bl	8000184 <SwitchYellow>
				SwitchRed(Off);
 8000256:	2001      	movs	r0, #1
 8000258:	f7ff ff78 	bl	800014c <SwitchRed>
			}
			if (v_State == Yellow) {
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d11f      	bne.n	80002a2 <main+0xae>
				// Currently yellow
				// Check if previous light was red or green
				if (v_PreviousState == Red) {
 8000262:	7bbb      	ldrb	r3, [r7, #14]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d10c      	bne.n	8000282 <main+0x8e>
					// Was red before
					// Switch to green
					v_NextState = Green;
 8000268:	2302      	movs	r3, #2
 800026a:	71fb      	strb	r3, [r7, #7]
					v_Counter = T_GREEN;
 800026c:	2303      	movs	r3, #3
 800026e:	60bb      	str	r3, [r7, #8]

					SwitchYellow(Off);
 8000270:	2001      	movs	r0, #1
 8000272:	f7ff ff87 	bl	8000184 <SwitchYellow>
					SwitchGreen(On);
 8000276:	2000      	movs	r0, #0
 8000278:	f7ff ffa0 	bl	80001bc <SwitchGreen>
					SwitchRed(Off);
 800027c:	2001      	movs	r0, #1
 800027e:	f7ff ff65 	bl	800014c <SwitchRed>
				}
				if (v_PreviousState == Green) {
 8000282:	7bbb      	ldrb	r3, [r7, #14]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d10c      	bne.n	80002a2 <main+0xae>
					// Was green before
					// Switch to red
					v_NextState = Red;
 8000288:	2300      	movs	r3, #0
 800028a:	71fb      	strb	r3, [r7, #7]
					v_Counter = T_RED;
 800028c:	2305      	movs	r3, #5
 800028e:	60bb      	str	r3, [r7, #8]

					SwitchYellow(Off);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ff77 	bl	8000184 <SwitchYellow>
					SwitchRed(On);
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff58 	bl	800014c <SwitchRed>
					SwitchGreen(Off);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff8d 	bl	80001bc <SwitchGreen>
				}
			}
			v_State = v_NextState;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	73fb      	strb	r3, [r7, #15]
			continue;
 80002a6:	e009      	b.n	80002bc <main+0xc8>
		}
		if (v_Counter > 0) {
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	dd02      	ble.n	80002b4 <main+0xc0>
			v_Counter -= 1;
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
		}
		HAL_Delay(1000);
 80002b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b8:	f000 f90c 	bl	80004d4 <HAL_Delay>
		if (v_Counter == 0) {
 80002bc:	e7a7      	b.n	800020e <main+0x1a>
	...

080002c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_GPIO_Init+0x5c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a10      	ldr	r2, [pc, #64]	; (800031c <MX_GPIO_Init+0x5c>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_GPIO_Init+0x5c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0304 	and.w	r3, r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, O_RED_LED_Pin | O_YEL_LED_Pin | O_GRE_LED_Pin,
 80002ec:	2200      	movs	r2, #0
 80002ee:	21e0      	movs	r1, #224	; 0xe0
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <MX_GPIO_Init+0x60>)
 80002f2:	f000 fb73 	bl	80009dc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : O_RED_LED_Pin O_YEL_LED_Pin O_GRE_LED_Pin */
	GPIO_InitStruct.Pin = O_RED_LED_Pin | O_YEL_LED_Pin | O_GRE_LED_Pin;
 80002f6:	23e0      	movs	r3, #224	; 0xe0
 80002f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	2302      	movs	r3, #2
 8000304:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_GPIO_Init+0x60>)
 800030e:	f000 f9e9 	bl	80006e4 <HAL_GPIO_Init>

}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800

08000324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <HAL_MspInit+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <HAL_MspInit+0x40>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <HAL_MspInit+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <HAL_MspInit+0x40>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <HAL_MspInit+0x40>)
 8000348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_MspInit+0x40>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ae:	f000 f875 	bl	800049c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ea:	f7ff ffe4 	bl	80003b6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 fb0d 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff feff 	bl	80001f4 <main>
  bx lr
 80003f6:	4770      	bx	lr
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000400:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 8000404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000408:	2000002c 	.word	0x2000002c

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_Init+0x28>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a07      	ldr	r2, [pc, #28]	; (8000438 <HAL_Init+0x28>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000420:	2003      	movs	r0, #3
 8000422:	f000 f92b 	bl	800067c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	200f      	movs	r0, #15
 8000428:	f000 f808 	bl	800043c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800042c:	f7ff ff7a 	bl	8000324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40022000 	.word	0x40022000

0800043c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_InitTick+0x54>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_InitTick+0x58>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4619      	mov	r1, r3
 800044e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000452:	fbb3 f3f1 	udiv	r3, r3, r1
 8000456:	fbb2 f3f3 	udiv	r3, r2, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f935 	bl	80006ca <HAL_SYSTICK_Config>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000466:	2301      	movs	r3, #1
 8000468:	e00e      	b.n	8000488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	d80a      	bhi.n	8000486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000470:	2200      	movs	r2, #0
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f000 f90b 	bl	8000692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <HAL_InitTick+0x5c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000482:	2300      	movs	r3, #0
 8000484:	e000      	b.n	8000488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000486:	2301      	movs	r3, #1
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000000 	.word	0x20000000
 8000494:	20000008 	.word	0x20000008
 8000498:	20000004 	.word	0x20000004

0800049c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_IncTick+0x1c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_IncTick+0x20>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <HAL_IncTick+0x20>)
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000008 	.word	0x20000008
 80004bc:	20000028 	.word	0x20000028

080004c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return uwTick;
 80004c4:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <HAL_GetTick+0x10>)
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	20000028 	.word	0x20000028

080004d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004dc:	f7ff fff0 	bl	80004c0 <HAL_GetTick>
 80004e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004ec:	d005      	beq.n	80004fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_Delay+0x44>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4413      	add	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004fa:	bf00      	nop
 80004fc:	f7ff ffe0 	bl	80004c0 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	429a      	cmp	r2, r3
 800050a:	d8f7      	bhi.n	80004fc <HAL_Delay+0x28>
  {
  }
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000008 	.word	0x20000008

0800051c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	60d3      	str	r3, [r2, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	; (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	; (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf28      	it	cs
 80005f2:	2304      	movcs	r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d902      	bls.n	8000604 <NVIC_EncodePriority+0x30>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3b03      	subs	r3, #3
 8000602:	e000      	b.n	8000606 <NVIC_EncodePriority+0x32>
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43d9      	mvns	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	4313      	orrs	r3, r2
         );
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	; 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3b01      	subs	r3, #1
 8000644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000648:	d301      	bcc.n	800064e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064a:	2301      	movs	r3, #1
 800064c:	e00f      	b.n	800066e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <SysTick_Config+0x40>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3b01      	subs	r3, #1
 8000654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000656:	210f      	movs	r1, #15
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f7ff ff90 	bl	8000580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <SysTick_Config+0x40>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SysTick_Config+0x40>)
 8000668:	2207      	movs	r2, #7
 800066a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010

0800067c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ff49 	bl	800051c <__NVIC_SetPriorityGrouping>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006a4:	f7ff ff5e 	bl	8000564 <__NVIC_GetPriorityGrouping>
 80006a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	6978      	ldr	r0, [r7, #20]
 80006b0:	f7ff ff90 	bl	80005d4 <NVIC_EncodePriority>
 80006b4:	4602      	mov	r2, r0
 80006b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff5f 	bl	8000580 <__NVIC_SetPriority>
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ffb0 	bl	8000638 <SysTick_Config>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b08b      	sub	sp, #44	; 0x2c
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006f6:	e161      	b.n	80009bc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006f8:	2201      	movs	r2, #1
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	4013      	ands	r3, r2
 800070a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	429a      	cmp	r2, r3
 8000712:	f040 8150 	bne.w	80009b6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	4a97      	ldr	r2, [pc, #604]	; (8000978 <HAL_GPIO_Init+0x294>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d05e      	beq.n	80007de <HAL_GPIO_Init+0xfa>
 8000720:	4a95      	ldr	r2, [pc, #596]	; (8000978 <HAL_GPIO_Init+0x294>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d875      	bhi.n	8000812 <HAL_GPIO_Init+0x12e>
 8000726:	4a95      	ldr	r2, [pc, #596]	; (800097c <HAL_GPIO_Init+0x298>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d058      	beq.n	80007de <HAL_GPIO_Init+0xfa>
 800072c:	4a93      	ldr	r2, [pc, #588]	; (800097c <HAL_GPIO_Init+0x298>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d86f      	bhi.n	8000812 <HAL_GPIO_Init+0x12e>
 8000732:	4a93      	ldr	r2, [pc, #588]	; (8000980 <HAL_GPIO_Init+0x29c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d052      	beq.n	80007de <HAL_GPIO_Init+0xfa>
 8000738:	4a91      	ldr	r2, [pc, #580]	; (8000980 <HAL_GPIO_Init+0x29c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d869      	bhi.n	8000812 <HAL_GPIO_Init+0x12e>
 800073e:	4a91      	ldr	r2, [pc, #580]	; (8000984 <HAL_GPIO_Init+0x2a0>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d04c      	beq.n	80007de <HAL_GPIO_Init+0xfa>
 8000744:	4a8f      	ldr	r2, [pc, #572]	; (8000984 <HAL_GPIO_Init+0x2a0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d863      	bhi.n	8000812 <HAL_GPIO_Init+0x12e>
 800074a:	4a8f      	ldr	r2, [pc, #572]	; (8000988 <HAL_GPIO_Init+0x2a4>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d046      	beq.n	80007de <HAL_GPIO_Init+0xfa>
 8000750:	4a8d      	ldr	r2, [pc, #564]	; (8000988 <HAL_GPIO_Init+0x2a4>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d85d      	bhi.n	8000812 <HAL_GPIO_Init+0x12e>
 8000756:	2b12      	cmp	r3, #18
 8000758:	d82a      	bhi.n	80007b0 <HAL_GPIO_Init+0xcc>
 800075a:	2b12      	cmp	r3, #18
 800075c:	d859      	bhi.n	8000812 <HAL_GPIO_Init+0x12e>
 800075e:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <HAL_GPIO_Init+0x80>)
 8000760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000764:	080007df 	.word	0x080007df
 8000768:	080007b9 	.word	0x080007b9
 800076c:	080007cb 	.word	0x080007cb
 8000770:	0800080d 	.word	0x0800080d
 8000774:	08000813 	.word	0x08000813
 8000778:	08000813 	.word	0x08000813
 800077c:	08000813 	.word	0x08000813
 8000780:	08000813 	.word	0x08000813
 8000784:	08000813 	.word	0x08000813
 8000788:	08000813 	.word	0x08000813
 800078c:	08000813 	.word	0x08000813
 8000790:	08000813 	.word	0x08000813
 8000794:	08000813 	.word	0x08000813
 8000798:	08000813 	.word	0x08000813
 800079c:	08000813 	.word	0x08000813
 80007a0:	08000813 	.word	0x08000813
 80007a4:	08000813 	.word	0x08000813
 80007a8:	080007c1 	.word	0x080007c1
 80007ac:	080007d5 	.word	0x080007d5
 80007b0:	4a76      	ldr	r2, [pc, #472]	; (800098c <HAL_GPIO_Init+0x2a8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d013      	beq.n	80007de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007b6:	e02c      	b.n	8000812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	623b      	str	r3, [r7, #32]
          break;
 80007be:	e029      	b.n	8000814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	3304      	adds	r3, #4
 80007c6:	623b      	str	r3, [r7, #32]
          break;
 80007c8:	e024      	b.n	8000814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	3308      	adds	r3, #8
 80007d0:	623b      	str	r3, [r7, #32]
          break;
 80007d2:	e01f      	b.n	8000814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	330c      	adds	r3, #12
 80007da:	623b      	str	r3, [r7, #32]
          break;
 80007dc:	e01a      	b.n	8000814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007e6:	2304      	movs	r3, #4
 80007e8:	623b      	str	r3, [r7, #32]
          break;
 80007ea:	e013      	b.n	8000814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d105      	bne.n	8000800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f4:	2308      	movs	r3, #8
 80007f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	611a      	str	r2, [r3, #16]
          break;
 80007fe:	e009      	b.n	8000814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000800:	2308      	movs	r3, #8
 8000802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	615a      	str	r2, [r3, #20]
          break;
 800080a:	e003      	b.n	8000814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
          break;
 8000810:	e000      	b.n	8000814 <HAL_GPIO_Init+0x130>
          break;
 8000812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	2bff      	cmp	r3, #255	; 0xff
 8000818:	d801      	bhi.n	800081e <HAL_GPIO_Init+0x13a>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	e001      	b.n	8000822 <HAL_GPIO_Init+0x13e>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3304      	adds	r3, #4
 8000822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	d802      	bhi.n	8000830 <HAL_GPIO_Init+0x14c>
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	e002      	b.n	8000836 <HAL_GPIO_Init+0x152>
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	3b08      	subs	r3, #8
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	210f      	movs	r1, #15
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	6a39      	ldr	r1, [r7, #32]
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	431a      	orrs	r2, r3
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	2b00      	cmp	r3, #0
 8000860:	f000 80a9 	beq.w	80009b6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000864:	4b4a      	ldr	r3, [pc, #296]	; (8000990 <HAL_GPIO_Init+0x2ac>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a49      	ldr	r2, [pc, #292]	; (8000990 <HAL_GPIO_Init+0x2ac>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b47      	ldr	r3, [pc, #284]	; (8000990 <HAL_GPIO_Init+0x2ac>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800087c:	4a45      	ldr	r2, [pc, #276]	; (8000994 <HAL_GPIO_Init+0x2b0>)
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	3302      	adds	r3, #2
 8000884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	220f      	movs	r2, #15
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <HAL_GPIO_Init+0x2b4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d00d      	beq.n	80008c4 <HAL_GPIO_Init+0x1e0>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a3c      	ldr	r2, [pc, #240]	; (800099c <HAL_GPIO_Init+0x2b8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d007      	beq.n	80008c0 <HAL_GPIO_Init+0x1dc>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a3b      	ldr	r2, [pc, #236]	; (80009a0 <HAL_GPIO_Init+0x2bc>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d101      	bne.n	80008bc <HAL_GPIO_Init+0x1d8>
 80008b8:	2302      	movs	r3, #2
 80008ba:	e004      	b.n	80008c6 <HAL_GPIO_Init+0x1e2>
 80008bc:	2303      	movs	r3, #3
 80008be:	e002      	b.n	80008c6 <HAL_GPIO_Init+0x1e2>
 80008c0:	2301      	movs	r3, #1
 80008c2:	e000      	b.n	80008c6 <HAL_GPIO_Init+0x1e2>
 80008c4:	2300      	movs	r3, #0
 80008c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c8:	f002 0203 	and.w	r2, r2, #3
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	4093      	lsls	r3, r2
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008d6:	492f      	ldr	r1, [pc, #188]	; (8000994 <HAL_GPIO_Init+0x2b0>)
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	3302      	adds	r3, #2
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	492b      	ldr	r1, [pc, #172]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	600b      	str	r3, [r1, #0]
 80008fc:	e006      	b.n	800090c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	43db      	mvns	r3, r3
 8000906:	4927      	ldr	r1, [pc, #156]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000908:	4013      	ands	r3, r2
 800090a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d006      	beq.n	8000926 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	4921      	ldr	r1, [pc, #132]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	604b      	str	r3, [r1, #4]
 8000924:	e006      	b.n	8000934 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	43db      	mvns	r3, r3
 800092e:	491d      	ldr	r1, [pc, #116]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000930:	4013      	ands	r3, r2
 8000932:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	4917      	ldr	r1, [pc, #92]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	608b      	str	r3, [r1, #8]
 800094c:	e006      	b.n	800095c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	43db      	mvns	r3, r3
 8000956:	4913      	ldr	r1, [pc, #76]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 8000958:	4013      	ands	r3, r2
 800095a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d01f      	beq.n	80009a8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	490d      	ldr	r1, [pc, #52]	; (80009a4 <HAL_GPIO_Init+0x2c0>)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	60cb      	str	r3, [r1, #12]
 8000974:	e01f      	b.n	80009b6 <HAL_GPIO_Init+0x2d2>
 8000976:	bf00      	nop
 8000978:	10320000 	.word	0x10320000
 800097c:	10310000 	.word	0x10310000
 8000980:	10220000 	.word	0x10220000
 8000984:	10210000 	.word	0x10210000
 8000988:	10120000 	.word	0x10120000
 800098c:	10110000 	.word	0x10110000
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_GPIO_Init+0x2f4>)
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4909      	ldr	r1, [pc, #36]	; (80009d8 <HAL_GPIO_Init+0x2f4>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	3301      	adds	r3, #1
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	fa22 f303 	lsr.w	r3, r2, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f47f ae96 	bne.w	80006f8 <HAL_GPIO_Init+0x14>
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	372c      	adds	r7, #44	; 0x2c
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	40010400 	.word	0x40010400

080009dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009ec:	787b      	ldrb	r3, [r7, #1]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009f8:	e003      	b.n	8000a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	041a      	lsls	r2, r3, #16
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	611a      	str	r2, [r3, #16]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	2600      	movs	r6, #0
 8000a10:	4d0c      	ldr	r5, [pc, #48]	; (8000a44 <__libc_init_array+0x38>)
 8000a12:	4c0d      	ldr	r4, [pc, #52]	; (8000a48 <__libc_init_array+0x3c>)
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	f000 f81a 	bl	8000a54 <_init>
 8000a20:	2600      	movs	r6, #0
 8000a22:	4d0a      	ldr	r5, [pc, #40]	; (8000a4c <__libc_init_array+0x40>)
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <__libc_init_array+0x44>)
 8000a26:	1b64      	subs	r4, r4, r5
 8000a28:	10a4      	asrs	r4, r4, #2
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000a6c 	.word	0x08000a6c
 8000a48:	08000a6c 	.word	0x08000a6c
 8000a4c:	08000a6c 	.word	0x08000a6c
 8000a50:	08000a70 	.word	0x08000a70

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
