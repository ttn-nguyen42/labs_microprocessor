
Exercise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d0  080009d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009d0  080009d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080009d0  080009d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d0  080009d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d0  080009d0  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009d4  080009d4  000109d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080009d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080009e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080009e4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002317  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b51  00000000  00000000  0002234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  00022ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d8  00000000  00000000  000231f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001535b  00000000  00000000  000234c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003843  00000000  00000000  00038823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007940e  00000000  00000000  0003c066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b40  00000000  00000000  000b54c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080009b8 	.word	0x080009b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080009b8 	.word	0x080009b8

0800014c <SwitchRed>:

typedef enum ColorState {
	Red, Yellow
} E_ColorState;

void SwitchRed(E_LEDState state) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (state == On) {
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d104      	bne.n	8000166 <SwitchRed+0x1a>
		HAL_GPIO_WritePin(O_RED_LED_GPIO_Port, O_RED_LED_Pin, SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2120      	movs	r1, #32
 8000160:	4807      	ldr	r0, [pc, #28]	; (8000180 <SwitchRed+0x34>)
 8000162:	f000 fbed 	bl	8000940 <HAL_GPIO_WritePin>
	}
	if (state == Off) {
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d104      	bne.n	8000176 <SwitchRed+0x2a>
		HAL_GPIO_WritePin(O_RED_LED_GPIO_Port, O_RED_LED_Pin, RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	2120      	movs	r1, #32
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <SwitchRed+0x34>)
 8000172:	f000 fbe5 	bl	8000940 <HAL_GPIO_WritePin>
	}
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <SwitchYellow>:

void SwitchYellow(E_LEDState state) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	if (state == On) {
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d104      	bne.n	800019e <SwitchYellow+0x1a>
		HAL_GPIO_WritePin(O_YEL_LED_GPIO_Port, O_YEL_LED_Pin, SET);
 8000194:	2201      	movs	r2, #1
 8000196:	2140      	movs	r1, #64	; 0x40
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <SwitchYellow+0x34>)
 800019a:	f000 fbd1 	bl	8000940 <HAL_GPIO_WritePin>
	}
	if (state == Off) {
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d104      	bne.n	80001ae <SwitchYellow+0x2a>
		HAL_GPIO_WritePin(O_YEL_LED_GPIO_Port, O_YEL_LED_Pin, RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2140      	movs	r1, #64	; 0x40
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <SwitchYellow+0x34>)
 80001aa:	f000 fbc9 	bl	8000940 <HAL_GPIO_WritePin>
	}
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40010800 	.word	0x40010800

080001bc <main>:

int main(void) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0

	HAL_Init();
 80001c2:	f000 f8d7 	bl	8000374 <HAL_Init>

	MX_GPIO_Init();
 80001c6:	f000 f82d 	bl	8000224 <MX_GPIO_Init>

	E_ColorState state;
	state = Red;
 80001ca:	2300      	movs	r3, #0
 80001cc:	73fb      	strb	r3, [r7, #15]

	int counter = TIME_RESET;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]

	while (1) {
		if (counter == 0) {
 80001d2:	68bb      	ldr	r3, [r7, #8]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d11a      	bne.n	800020e <main+0x52>
			E_ColorState next;
			if (state == Red) {
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d107      	bne.n	80001ee <main+0x32>
				SwitchRed(On);
 80001de:	2000      	movs	r0, #0
 80001e0:	f7ff ffb4 	bl	800014c <SwitchRed>
				SwitchYellow(Off);
 80001e4:	2001      	movs	r0, #1
 80001e6:	f7ff ffcd 	bl	8000184 <SwitchYellow>
				next = Yellow;
 80001ea:	2301      	movs	r3, #1
 80001ec:	71fb      	strb	r3, [r7, #7]
			}
			if (state == Yellow) {
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d107      	bne.n	8000204 <main+0x48>
				SwitchYellow(On);
 80001f4:	2000      	movs	r0, #0
 80001f6:	f7ff ffc5 	bl	8000184 <SwitchYellow>
				SwitchRed(Off);
 80001fa:	2001      	movs	r0, #1
 80001fc:	f7ff ffa6 	bl	800014c <SwitchRed>
				next = Red;
 8000200:	2300      	movs	r3, #0
 8000202:	71fb      	strb	r3, [r7, #7]
			}
			state = next;
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	73fb      	strb	r3, [r7, #15]
			counter = TIME_RESET;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
			continue;
 800020c:	e009      	b.n	8000222 <main+0x66>
		}
		if (counter > 0) {
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dd02      	ble.n	800021a <main+0x5e>
			counter -= 1;
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	3b01      	subs	r3, #1
 8000218:	60bb      	str	r3, [r7, #8]
		}
		HAL_Delay(1000);
 800021a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021e:	f000 f90b 	bl	8000438 <HAL_Delay>
		if (counter == 0) {
 8000222:	e7d6      	b.n	80001d2 <main+0x16>

08000224 <MX_GPIO_Init>:
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

static void MX_GPIO_Init(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_GPIO_Init+0x5c>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <MX_GPIO_Init+0x5c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_GPIO_Init+0x5c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, O_RED_LED_Pin | O_YEL_LED_Pin, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2160      	movs	r1, #96	; 0x60
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <MX_GPIO_Init+0x60>)
 8000256:	f000 fb73 	bl	8000940 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = O_RED_LED_Pin | O_YEL_LED_Pin;
 800025a:	2360      	movs	r3, #96	; 0x60
 800025c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	2301      	movs	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	2302      	movs	r3, #2
 8000268:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	4619      	mov	r1, r3
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_GPIO_Init+0x60>)
 8000272:	f000 f9e9 	bl	8000648 <HAL_GPIO_Init>

}
 8000276:	bf00      	nop
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40010800 	.word	0x40010800

08000288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <HAL_MspInit+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <HAL_MspInit+0x40>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <HAL_MspInit+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <HAL_MspInit+0x40>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_MspInit+0x40>)
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	61d3      	str	r3, [r2, #28]
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <HAL_MspInit+0x40>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <NMI_Handler+0x4>

080002d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <MemManage_Handler+0x4>

080002de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <BusFault_Handler+0x4>

080002e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>

080002ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr

080002f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000312:	f000 f875 	bl	8000400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}

0800031a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
	...

08000328 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800034e:	f7ff ffe4 	bl	800031a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000352:	f000 fb0d 	bl	8000970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff31 	bl	80001bc <main>
  bx lr
 800035a:	4770      	bx	lr
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000364:	080009d8 	.word	0x080009d8
  ldr r2, =_sbss
 8000368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800036c:	2000002c 	.word	0x2000002c

08000370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_2_IRQHandler>
	...

08000374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <HAL_Init+0x28>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <HAL_Init+0x28>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000384:	2003      	movs	r0, #3
 8000386:	f000 f92b 	bl	80005e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800038a:	200f      	movs	r0, #15
 800038c:	f000 f808 	bl	80003a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000390:	f7ff ff7a 	bl	8000288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40022000 	.word	0x40022000

080003a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <HAL_InitTick+0x54>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_InitTick+0x58>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4619      	mov	r1, r3
 80003b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f935 	bl	800062e <HAL_SYSTICK_Config>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003ca:	2301      	movs	r3, #1
 80003cc:	e00e      	b.n	80003ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2b0f      	cmp	r3, #15
 80003d2:	d80a      	bhi.n	80003ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003d4:	2200      	movs	r2, #0
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	f04f 30ff 	mov.w	r0, #4294967295
 80003dc:	f000 f90b 	bl	80005f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <HAL_InitTick+0x5c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e000      	b.n	80003ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003ea:	2301      	movs	r3, #1
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000008 	.word	0x20000008
 80003fc:	20000004 	.word	0x20000004

08000400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_IncTick+0x1c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_IncTick+0x20>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4413      	add	r3, r2
 8000410:	4a03      	ldr	r2, [pc, #12]	; (8000420 <HAL_IncTick+0x20>)
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000008 	.word	0x20000008
 8000420:	20000028 	.word	0x20000028

08000424 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  return uwTick;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <HAL_GetTick+0x10>)
 800042a:	681b      	ldr	r3, [r3, #0]
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000028 	.word	0x20000028

08000438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000440:	f7ff fff0 	bl	8000424 <HAL_GetTick>
 8000444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000450:	d005      	beq.n	800045e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_Delay+0x44>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4413      	add	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800045e:	bf00      	nop
 8000460:	f7ff ffe0 	bl	8000424 <HAL_GetTick>
 8000464:	4602      	mov	r2, r0
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	429a      	cmp	r2, r3
 800046e:	d8f7      	bhi.n	8000460 <HAL_Delay+0x28>
  {
  }
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000008 	.word	0x20000008

08000480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000496:	68ba      	ldr	r2, [r7, #8]
 8000498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800049c:	4013      	ands	r3, r2
 800049e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <__NVIC_SetPriorityGrouping+0x44>)
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	60d3      	str	r3, [r2, #12]
}
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	0a1b      	lsrs	r3, r3, #8
 80004d2:	f003 0307 	and.w	r3, r3, #7
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	db0a      	blt.n	800050e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	490c      	ldr	r1, [pc, #48]	; (8000530 <__NVIC_SetPriority+0x4c>)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	0112      	lsls	r2, r2, #4
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	440b      	add	r3, r1
 8000508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800050c:	e00a      	b.n	8000524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4908      	ldr	r1, [pc, #32]	; (8000534 <__NVIC_SetPriority+0x50>)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	f003 030f 	and.w	r3, r3, #15
 800051a:	3b04      	subs	r3, #4
 800051c:	0112      	lsls	r2, r2, #4
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	440b      	add	r3, r1
 8000522:	761a      	strb	r2, [r3, #24]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	f1c3 0307 	rsb	r3, r3, #7
 8000552:	2b04      	cmp	r3, #4
 8000554:	bf28      	it	cs
 8000556:	2304      	movcs	r3, #4
 8000558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	3304      	adds	r3, #4
 800055e:	2b06      	cmp	r3, #6
 8000560:	d902      	bls.n	8000568 <NVIC_EncodePriority+0x30>
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	3b03      	subs	r3, #3
 8000566:	e000      	b.n	800056a <NVIC_EncodePriority+0x32>
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	f04f 32ff 	mov.w	r2, #4294967295
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	43da      	mvns	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000580:	f04f 31ff 	mov.w	r1, #4294967295
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43d9      	mvns	r1, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000590:	4313      	orrs	r3, r2
         );
}
 8000592:	4618      	mov	r0, r3
 8000594:	3724      	adds	r7, #36	; 0x24
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005ac:	d301      	bcc.n	80005b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00f      	b.n	80005d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <SysTick_Config+0x40>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ba:	210f      	movs	r1, #15
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f7ff ff90 	bl	80004e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <SysTick_Config+0x40>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <SysTick_Config+0x40>)
 80005cc:	2207      	movs	r2, #7
 80005ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	e000e010 	.word	0xe000e010

080005e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff49 	bl	8000480 <__NVIC_SetPriorityGrouping>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000608:	f7ff ff5e 	bl	80004c8 <__NVIC_GetPriorityGrouping>
 800060c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	68b9      	ldr	r1, [r7, #8]
 8000612:	6978      	ldr	r0, [r7, #20]
 8000614:	f7ff ff90 	bl	8000538 <NVIC_EncodePriority>
 8000618:	4602      	mov	r2, r0
 800061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff5f 	bl	80004e4 <__NVIC_SetPriority>
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ffb0 	bl	800059c <SysTick_Config>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000648:	b480      	push	{r7}
 800064a:	b08b      	sub	sp, #44	; 0x2c
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065a:	e161      	b.n	8000920 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800065c:	2201      	movs	r2, #1
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	69fa      	ldr	r2, [r7, #28]
 800066c:	4013      	ands	r3, r2
 800066e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000670:	69ba      	ldr	r2, [r7, #24]
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	429a      	cmp	r2, r3
 8000676:	f040 8150 	bne.w	800091a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	4a97      	ldr	r2, [pc, #604]	; (80008dc <HAL_GPIO_Init+0x294>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d05e      	beq.n	8000742 <HAL_GPIO_Init+0xfa>
 8000684:	4a95      	ldr	r2, [pc, #596]	; (80008dc <HAL_GPIO_Init+0x294>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d875      	bhi.n	8000776 <HAL_GPIO_Init+0x12e>
 800068a:	4a95      	ldr	r2, [pc, #596]	; (80008e0 <HAL_GPIO_Init+0x298>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d058      	beq.n	8000742 <HAL_GPIO_Init+0xfa>
 8000690:	4a93      	ldr	r2, [pc, #588]	; (80008e0 <HAL_GPIO_Init+0x298>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d86f      	bhi.n	8000776 <HAL_GPIO_Init+0x12e>
 8000696:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <HAL_GPIO_Init+0x29c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d052      	beq.n	8000742 <HAL_GPIO_Init+0xfa>
 800069c:	4a91      	ldr	r2, [pc, #580]	; (80008e4 <HAL_GPIO_Init+0x29c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d869      	bhi.n	8000776 <HAL_GPIO_Init+0x12e>
 80006a2:	4a91      	ldr	r2, [pc, #580]	; (80008e8 <HAL_GPIO_Init+0x2a0>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d04c      	beq.n	8000742 <HAL_GPIO_Init+0xfa>
 80006a8:	4a8f      	ldr	r2, [pc, #572]	; (80008e8 <HAL_GPIO_Init+0x2a0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d863      	bhi.n	8000776 <HAL_GPIO_Init+0x12e>
 80006ae:	4a8f      	ldr	r2, [pc, #572]	; (80008ec <HAL_GPIO_Init+0x2a4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d046      	beq.n	8000742 <HAL_GPIO_Init+0xfa>
 80006b4:	4a8d      	ldr	r2, [pc, #564]	; (80008ec <HAL_GPIO_Init+0x2a4>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d85d      	bhi.n	8000776 <HAL_GPIO_Init+0x12e>
 80006ba:	2b12      	cmp	r3, #18
 80006bc:	d82a      	bhi.n	8000714 <HAL_GPIO_Init+0xcc>
 80006be:	2b12      	cmp	r3, #18
 80006c0:	d859      	bhi.n	8000776 <HAL_GPIO_Init+0x12e>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <HAL_GPIO_Init+0x80>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	08000743 	.word	0x08000743
 80006cc:	0800071d 	.word	0x0800071d
 80006d0:	0800072f 	.word	0x0800072f
 80006d4:	08000771 	.word	0x08000771
 80006d8:	08000777 	.word	0x08000777
 80006dc:	08000777 	.word	0x08000777
 80006e0:	08000777 	.word	0x08000777
 80006e4:	08000777 	.word	0x08000777
 80006e8:	08000777 	.word	0x08000777
 80006ec:	08000777 	.word	0x08000777
 80006f0:	08000777 	.word	0x08000777
 80006f4:	08000777 	.word	0x08000777
 80006f8:	08000777 	.word	0x08000777
 80006fc:	08000777 	.word	0x08000777
 8000700:	08000777 	.word	0x08000777
 8000704:	08000777 	.word	0x08000777
 8000708:	08000777 	.word	0x08000777
 800070c:	08000725 	.word	0x08000725
 8000710:	08000739 	.word	0x08000739
 8000714:	4a76      	ldr	r2, [pc, #472]	; (80008f0 <HAL_GPIO_Init+0x2a8>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d013      	beq.n	8000742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800071a:	e02c      	b.n	8000776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	623b      	str	r3, [r7, #32]
          break;
 8000722:	e029      	b.n	8000778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	3304      	adds	r3, #4
 800072a:	623b      	str	r3, [r7, #32]
          break;
 800072c:	e024      	b.n	8000778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	3308      	adds	r3, #8
 8000734:	623b      	str	r3, [r7, #32]
          break;
 8000736:	e01f      	b.n	8000778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	330c      	adds	r3, #12
 800073e:	623b      	str	r3, [r7, #32]
          break;
 8000740:	e01a      	b.n	8000778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800074a:	2304      	movs	r3, #4
 800074c:	623b      	str	r3, [r7, #32]
          break;
 800074e:	e013      	b.n	8000778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d105      	bne.n	8000764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000758:	2308      	movs	r3, #8
 800075a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	611a      	str	r2, [r3, #16]
          break;
 8000762:	e009      	b.n	8000778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000764:	2308      	movs	r3, #8
 8000766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	69fa      	ldr	r2, [r7, #28]
 800076c:	615a      	str	r2, [r3, #20]
          break;
 800076e:	e003      	b.n	8000778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
          break;
 8000774:	e000      	b.n	8000778 <HAL_GPIO_Init+0x130>
          break;
 8000776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d801      	bhi.n	8000782 <HAL_GPIO_Init+0x13a>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	e001      	b.n	8000786 <HAL_GPIO_Init+0x13e>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3304      	adds	r3, #4
 8000786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d802      	bhi.n	8000794 <HAL_GPIO_Init+0x14c>
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	e002      	b.n	800079a <HAL_GPIO_Init+0x152>
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	3b08      	subs	r3, #8
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	210f      	movs	r1, #15
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	401a      	ands	r2, r3
 80007ac:	6a39      	ldr	r1, [r7, #32]
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	431a      	orrs	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 80a9 	beq.w	800091a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007c8:	4b4a      	ldr	r3, [pc, #296]	; (80008f4 <HAL_GPIO_Init+0x2ac>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a49      	ldr	r2, [pc, #292]	; (80008f4 <HAL_GPIO_Init+0x2ac>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b47      	ldr	r3, [pc, #284]	; (80008f4 <HAL_GPIO_Init+0x2ac>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80007e0:	4a45      	ldr	r2, [pc, #276]	; (80008f8 <HAL_GPIO_Init+0x2b0>)
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	3302      	adds	r3, #2
 80007e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	220f      	movs	r2, #15
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a3d      	ldr	r2, [pc, #244]	; (80008fc <HAL_GPIO_Init+0x2b4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d00d      	beq.n	8000828 <HAL_GPIO_Init+0x1e0>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a3c      	ldr	r2, [pc, #240]	; (8000900 <HAL_GPIO_Init+0x2b8>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d007      	beq.n	8000824 <HAL_GPIO_Init+0x1dc>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a3b      	ldr	r2, [pc, #236]	; (8000904 <HAL_GPIO_Init+0x2bc>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d101      	bne.n	8000820 <HAL_GPIO_Init+0x1d8>
 800081c:	2302      	movs	r3, #2
 800081e:	e004      	b.n	800082a <HAL_GPIO_Init+0x1e2>
 8000820:	2303      	movs	r3, #3
 8000822:	e002      	b.n	800082a <HAL_GPIO_Init+0x1e2>
 8000824:	2301      	movs	r3, #1
 8000826:	e000      	b.n	800082a <HAL_GPIO_Init+0x1e2>
 8000828:	2300      	movs	r3, #0
 800082a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800082c:	f002 0203 	and.w	r2, r2, #3
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	4093      	lsls	r3, r2
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4313      	orrs	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800083a:	492f      	ldr	r1, [pc, #188]	; (80008f8 <HAL_GPIO_Init+0x2b0>)
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	3302      	adds	r3, #2
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	492b      	ldr	r1, [pc, #172]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	4313      	orrs	r3, r2
 800085e:	600b      	str	r3, [r1, #0]
 8000860:	e006      	b.n	8000870 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	43db      	mvns	r3, r3
 800086a:	4927      	ldr	r1, [pc, #156]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 800086c:	4013      	ands	r3, r2
 800086e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	4921      	ldr	r1, [pc, #132]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	604b      	str	r3, [r1, #4]
 8000888:	e006      	b.n	8000898 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	43db      	mvns	r3, r3
 8000892:	491d      	ldr	r1, [pc, #116]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 8000894:	4013      	ands	r3, r2
 8000896:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d006      	beq.n	80008b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	4917      	ldr	r1, [pc, #92]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	608b      	str	r3, [r1, #8]
 80008b0:	e006      	b.n	80008c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	43db      	mvns	r3, r3
 80008ba:	4913      	ldr	r1, [pc, #76]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 80008bc:	4013      	ands	r3, r2
 80008be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d01f      	beq.n	800090c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	490d      	ldr	r1, [pc, #52]	; (8000908 <HAL_GPIO_Init+0x2c0>)
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60cb      	str	r3, [r1, #12]
 80008d8:	e01f      	b.n	800091a <HAL_GPIO_Init+0x2d2>
 80008da:	bf00      	nop
 80008dc:	10320000 	.word	0x10320000
 80008e0:	10310000 	.word	0x10310000
 80008e4:	10220000 	.word	0x10220000
 80008e8:	10210000 	.word	0x10210000
 80008ec:	10120000 	.word	0x10120000
 80008f0:	10110000 	.word	0x10110000
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000
 80008fc:	40010800 	.word	0x40010800
 8000900:	40010c00 	.word	0x40010c00
 8000904:	40011000 	.word	0x40011000
 8000908:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_GPIO_Init+0x2f4>)
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	43db      	mvns	r3, r3
 8000914:	4909      	ldr	r1, [pc, #36]	; (800093c <HAL_GPIO_Init+0x2f4>)
 8000916:	4013      	ands	r3, r2
 8000918:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	3301      	adds	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	fa22 f303 	lsr.w	r3, r2, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	f47f ae96 	bne.w	800065c <HAL_GPIO_Init+0x14>
  }
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	372c      	adds	r7, #44	; 0x2c
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40010400 	.word	0x40010400

08000940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
 800094c:	4613      	mov	r3, r2
 800094e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000950:	787b      	ldrb	r3, [r7, #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000956:	887a      	ldrh	r2, [r7, #2]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800095c:	e003      	b.n	8000966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	041a      	lsls	r2, r3, #16
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	611a      	str	r2, [r3, #16]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <__libc_init_array>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	2600      	movs	r6, #0
 8000974:	4d0c      	ldr	r5, [pc, #48]	; (80009a8 <__libc_init_array+0x38>)
 8000976:	4c0d      	ldr	r4, [pc, #52]	; (80009ac <__libc_init_array+0x3c>)
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	42a6      	cmp	r6, r4
 800097e:	d109      	bne.n	8000994 <__libc_init_array+0x24>
 8000980:	f000 f81a 	bl	80009b8 <_init>
 8000984:	2600      	movs	r6, #0
 8000986:	4d0a      	ldr	r5, [pc, #40]	; (80009b0 <__libc_init_array+0x40>)
 8000988:	4c0a      	ldr	r4, [pc, #40]	; (80009b4 <__libc_init_array+0x44>)
 800098a:	1b64      	subs	r4, r4, r5
 800098c:	10a4      	asrs	r4, r4, #2
 800098e:	42a6      	cmp	r6, r4
 8000990:	d105      	bne.n	800099e <__libc_init_array+0x2e>
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	f855 3b04 	ldr.w	r3, [r5], #4
 8000998:	4798      	blx	r3
 800099a:	3601      	adds	r6, #1
 800099c:	e7ee      	b.n	800097c <__libc_init_array+0xc>
 800099e:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a2:	4798      	blx	r3
 80009a4:	3601      	adds	r6, #1
 80009a6:	e7f2      	b.n	800098e <__libc_init_array+0x1e>
 80009a8:	080009d0 	.word	0x080009d0
 80009ac:	080009d0 	.word	0x080009d0
 80009b0:	080009d0 	.word	0x080009d0
 80009b4:	080009d4 	.word	0x080009d4

080009b8 <_init>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	bf00      	nop
 80009bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009be:	bc08      	pop	{r3}
 80009c0:	469e      	mov	lr, r3
 80009c2:	4770      	bx	lr

080009c4 <_fini>:
 80009c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c6:	bf00      	nop
 80009c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ca:	bc08      	pop	{r3}
 80009cc:	469e      	mov	lr, r3
 80009ce:	4770      	bx	lr
