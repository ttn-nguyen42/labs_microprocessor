
Lab2_Exercise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002664  08002664  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002664  08002664  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002664  08002664  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000074  080026e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080026e4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e9f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ec  00000000  00000000  00029f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199a0  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b739  00000000  00000000  00046ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d6a  00000000  00000000  00052609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  000da3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002614 	.word	0x08002614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002614 	.word	0x08002614

0800014c <_ZN7ServiceC1Ev>:
 */

#ifndef INC_SERVICE_H_
#define INC_SERVICE_H_

class Service {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <_ZN7ServiceC1Ev+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	08002650 	.word	0x08002650

0800016c <_ZN13LabOneServiceC1EP5TimerP7PinPairS3_S3_S3_S3_S3_S3_S3_S3_S3_>:
 */

#include "lab_one_service.h"
#include "states.h"

LabOneService::LabOneService(Timer *timer, PinPair *stateLeft,
 800016c:	b590      	push	{r4, r7, lr}
 800016e:	b08b      	sub	sp, #44	; 0x2c
 8000170:	af06      	add	r7, sp, #24
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
 8000178:	603b      	str	r3, [r7, #0]
		PinPair *stateRight, PinPair *led0, PinPair *led1, PinPair *led2,
		PinPair *led3, PinPair *led4, PinPair *led5, PinPair *led6,
		PinPair *testLed) {
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	4618      	mov	r0, r3
 800017e:	f7ff ffe5 	bl	800014c <_ZN7ServiceC1Ev>
 8000182:	4a1e      	ldr	r2, [pc, #120]	; (80001fc <_ZN13LabOneServiceC1EP5TimerP7PinPairS3_S3_S3_S3_S3_S3_S3_S3_S3_+0x90>)
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	601a      	str	r2, [r3, #0]
	this->timer = timer;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	68ba      	ldr	r2, [r7, #8]
 800018c:	605a      	str	r2, [r3, #4]
	this->left = new SegmentLed(stateLeft, led0, led1, led2, led3, led4, led5,
			led6);
 800018e:	2020      	movs	r0, #32
 8000190:	f002 f8da 	bl	8002348 <_Znwj>
 8000194:	4603      	mov	r3, r0
 8000196:	461c      	mov	r4, r3
 8000198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800019a:	9304      	str	r3, [sp, #16]
 800019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800019e:	9303      	str	r3, [sp, #12]
 80001a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001a2:	9302      	str	r3, [sp, #8]
 80001a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001a6:	9301      	str	r3, [sp, #4]
 80001a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ae:	6a3a      	ldr	r2, [r7, #32]
 80001b0:	6879      	ldr	r1, [r7, #4]
 80001b2:	4620      	mov	r0, r4
 80001b4:	f000 fad9 	bl	800076a <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>
	this->left = new SegmentLed(stateLeft, led0, led1, led2, led3, led4, led5,
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	609c      	str	r4, [r3, #8]
	this->right = new SegmentLed(stateRight, led0, led1, led2, led3, led4, led5,
			led6);
 80001bc:	2020      	movs	r0, #32
 80001be:	f002 f8c3 	bl	8002348 <_Znwj>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461c      	mov	r4, r3
 80001c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80001c8:	9304      	str	r3, [sp, #16]
 80001ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001cc:	9303      	str	r3, [sp, #12]
 80001ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001d0:	9302      	str	r3, [sp, #8]
 80001d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001d4:	9301      	str	r3, [sp, #4]
 80001d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001dc:	6a3a      	ldr	r2, [r7, #32]
 80001de:	6839      	ldr	r1, [r7, #0]
 80001e0:	4620      	mov	r0, r4
 80001e2:	f000 fac2 	bl	800076a <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>
	this->right = new SegmentLed(stateRight, led0, led1, led2, led3, led4, led5,
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	60dc      	str	r4, [r3, #12]
	this->testLed = testLed;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80001ee:	611a      	str	r2, [r3, #16]
}
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4618      	mov	r0, r3
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd90      	pop	{r4, r7, pc}
 80001fa:	bf00      	nop
 80001fc:	08002644 	.word	0x08002644

08000200 <_ZN13LabOneService3runERi>:

void LabOneService::run(int &status) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	switch (status) {
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d04e      	beq.n	80002b0 <_ZN13LabOneService3runERi+0xb0>
 8000212:	2b03      	cmp	r3, #3
 8000214:	dc74      	bgt.n	8000300 <_ZN13LabOneService3runERi+0x100>
 8000216:	2b01      	cmp	r3, #1
 8000218:	d002      	beq.n	8000220 <_ZN13LabOneService3runERi+0x20>
 800021a:	2b02      	cmp	r3, #2
 800021c:	d020      	beq.n	8000260 <_ZN13LabOneService3runERi+0x60>
			status = ONE_ON;
			timer->setTimer(500);
		}
		break;
	default:
		break;
 800021e:	e06f      	b.n	8000300 <_ZN13LabOneService3runERi+0x100>
		left->turnOn();
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc5d 	bl	8000ae4 <_ZN10SegmentLed6turnOnEv>
		right->turnOff();
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fc65 	bl	8000afe <_ZN10SegmentLed7turnOffEv>
		testLed->set();
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa5d 	bl	80006f8 <_ZN7PinPair3setEv>
		left->update(1);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	2101      	movs	r1, #1
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fab5 	bl	80007b4 <_ZN10SegmentLed6updateEi>
		status = TWO_ON;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2203      	movs	r2, #3
 800024e:	601a      	str	r2, [r3, #0]
		timer->setTimer(500);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fd67 	bl	8000d2c <_ZN5Timer8setTimerEi>
		break;
 800025e:	e054      	b.n	800030a <_ZN13LabOneService3runERi+0x10a>
		if (timer->hasSignal()) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fd56 	bl	8000d16 <_ZN5Timer9hasSignalEv>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d049      	beq.n	8000304 <_ZN13LabOneService3runERi+0x104>
			left->turnOn();
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fc35 	bl	8000ae4 <_ZN10SegmentLed6turnOnEv>
			right->turnOff();
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fc3d 	bl	8000afe <_ZN10SegmentLed7turnOffEv>
			testLed->set();
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fa35 	bl	80006f8 <_ZN7PinPair3setEv>
			left->update(1);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	2101      	movs	r1, #1
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fa8d 	bl	80007b4 <_ZN10SegmentLed6updateEi>
			status = TWO_ON;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2203      	movs	r2, #3
 800029e:	601a      	str	r2, [r3, #0]
			timer->setTimer(500);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fd3f 	bl	8000d2c <_ZN5Timer8setTimerEi>
		break;
 80002ae:	e029      	b.n	8000304 <_ZN13LabOneService3runERi+0x104>
		if (timer->hasSignal()) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd2e 	bl	8000d16 <_ZN5Timer9hasSignalEv>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d023      	beq.n	8000308 <_ZN13LabOneService3runERi+0x108>
			left->turnOff();
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fc1a 	bl	8000afe <_ZN10SegmentLed7turnOffEv>
			right->turnOn();
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fc08 	bl	8000ae4 <_ZN10SegmentLed6turnOnEv>
			testLed->reset();
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	691b      	ldr	r3, [r3, #16]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa24 	bl	8000726 <_ZN7PinPair5resetEv>
			right->update(2);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	2102      	movs	r1, #2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fa65 	bl	80007b4 <_ZN10SegmentLed6updateEi>
			status = ONE_ON;
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	2202      	movs	r2, #2
 80002ee:	601a      	str	r2, [r3, #0]
			timer->setTimer(500);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fd17 	bl	8000d2c <_ZN5Timer8setTimerEi>
		break;
 80002fe:	e003      	b.n	8000308 <_ZN13LabOneService3runERi+0x108>
		break;
 8000300:	bf00      	nop
 8000302:	e002      	b.n	800030a <_ZN13LabOneService3runERi+0x10a>
		break;
 8000304:	bf00      	nop
 8000306:	e000      	b.n	800030a <_ZN13LabOneService3runERi+0x10a>
		break;
 8000308:	bf00      	nop
	}
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b095      	sub	sp, #84	; 0x54
 8000318:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800031a:	f000 fd45 	bl	8000da8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800031e:	f000 f8b5 	bl	800048c <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	PinPair *led = new PinPair(O_LED_GPIO_Port, O_LED_Pin);
 8000322:	2008      	movs	r0, #8
 8000324:	f002 f810 	bl	8002348 <_Znwj>
 8000328:	4603      	mov	r3, r0
 800032a:	461c      	mov	r4, r3
 800032c:	2220      	movs	r2, #32
 800032e:	494b      	ldr	r1, [pc, #300]	; (800045c <main+0x148>)
 8000330:	4620      	mov	r0, r4
 8000332:	f000 f9cb 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 8000336:	62fc      	str	r4, [r7, #44]	; 0x2c
	PinPair *signalLeft = new PinPair(O_EN0_GPIO_Port, O_EN0_Pin);
 8000338:	2008      	movs	r0, #8
 800033a:	f002 f805 	bl	8002348 <_Znwj>
 800033e:	4603      	mov	r3, r0
 8000340:	461c      	mov	r4, r3
 8000342:	2240      	movs	r2, #64	; 0x40
 8000344:	4945      	ldr	r1, [pc, #276]	; (800045c <main+0x148>)
 8000346:	4620      	mov	r0, r4
 8000348:	f000 f9c0 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 800034c:	62bc      	str	r4, [r7, #40]	; 0x28
	PinPair *signalRight = new PinPair(O_EN1_GPIO_Port, O_EN1_Pin);
 800034e:	2008      	movs	r0, #8
 8000350:	f001 fffa 	bl	8002348 <_Znwj>
 8000354:	4603      	mov	r3, r0
 8000356:	461c      	mov	r4, r3
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	4940      	ldr	r1, [pc, #256]	; (800045c <main+0x148>)
 800035c:	4620      	mov	r0, r4
 800035e:	f000 f9b5 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 8000362:	627c      	str	r4, [r7, #36]	; 0x24

	PinPair *led0 = new PinPair(O_SEG0_GPIO_Port, O_SEG0_Pin);
 8000364:	2008      	movs	r0, #8
 8000366:	f001 ffef 	bl	8002348 <_Znwj>
 800036a:	4603      	mov	r3, r0
 800036c:	461c      	mov	r4, r3
 800036e:	2201      	movs	r2, #1
 8000370:	493b      	ldr	r1, [pc, #236]	; (8000460 <main+0x14c>)
 8000372:	4620      	mov	r0, r4
 8000374:	f000 f9aa 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 8000378:	623c      	str	r4, [r7, #32]
	PinPair *led1 = new PinPair(O_SEG1_GPIO_Port, O_SEG1_Pin);
 800037a:	2008      	movs	r0, #8
 800037c:	f001 ffe4 	bl	8002348 <_Znwj>
 8000380:	4603      	mov	r3, r0
 8000382:	461c      	mov	r4, r3
 8000384:	2202      	movs	r2, #2
 8000386:	4936      	ldr	r1, [pc, #216]	; (8000460 <main+0x14c>)
 8000388:	4620      	mov	r0, r4
 800038a:	f000 f99f 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 800038e:	61fc      	str	r4, [r7, #28]
	PinPair *led2 = new PinPair(O_SEG2_GPIO_Port, O_SEG2_Pin);
 8000390:	2008      	movs	r0, #8
 8000392:	f001 ffd9 	bl	8002348 <_Znwj>
 8000396:	4603      	mov	r3, r0
 8000398:	461c      	mov	r4, r3
 800039a:	2204      	movs	r2, #4
 800039c:	4930      	ldr	r1, [pc, #192]	; (8000460 <main+0x14c>)
 800039e:	4620      	mov	r0, r4
 80003a0:	f000 f994 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80003a4:	61bc      	str	r4, [r7, #24]
	PinPair *led3 = new PinPair(O_SEG3_GPIO_Port, O_SEG3_Pin);
 80003a6:	2008      	movs	r0, #8
 80003a8:	f001 ffce 	bl	8002348 <_Znwj>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461c      	mov	r4, r3
 80003b0:	2208      	movs	r2, #8
 80003b2:	492b      	ldr	r1, [pc, #172]	; (8000460 <main+0x14c>)
 80003b4:	4620      	mov	r0, r4
 80003b6:	f000 f989 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80003ba:	617c      	str	r4, [r7, #20]
	PinPair *led4 = new PinPair(O_SEG4_GPIO_Port, O_SEG4_Pin);
 80003bc:	2008      	movs	r0, #8
 80003be:	f001 ffc3 	bl	8002348 <_Znwj>
 80003c2:	4603      	mov	r3, r0
 80003c4:	461c      	mov	r4, r3
 80003c6:	2210      	movs	r2, #16
 80003c8:	4925      	ldr	r1, [pc, #148]	; (8000460 <main+0x14c>)
 80003ca:	4620      	mov	r0, r4
 80003cc:	f000 f97e 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80003d0:	613c      	str	r4, [r7, #16]
	PinPair *led5 = new PinPair(O_SEG5_GPIO_Port, O_SEG5_Pin);
 80003d2:	2008      	movs	r0, #8
 80003d4:	f001 ffb8 	bl	8002348 <_Znwj>
 80003d8:	4603      	mov	r3, r0
 80003da:	461c      	mov	r4, r3
 80003dc:	2220      	movs	r2, #32
 80003de:	4920      	ldr	r1, [pc, #128]	; (8000460 <main+0x14c>)
 80003e0:	4620      	mov	r0, r4
 80003e2:	f000 f973 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80003e6:	60fc      	str	r4, [r7, #12]
	PinPair *led6 = new PinPair(O_SEG6_GPIO_Port, O_SEG6_Pin);
 80003e8:	2008      	movs	r0, #8
 80003ea:	f001 ffad 	bl	8002348 <_Znwj>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461c      	mov	r4, r3
 80003f2:	2240      	movs	r2, #64	; 0x40
 80003f4:	491a      	ldr	r1, [pc, #104]	; (8000460 <main+0x14c>)
 80003f6:	4620      	mov	r0, r4
 80003f8:	f000 f968 	bl	80006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80003fc:	60bc      	str	r4, [r7, #8]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003fe:	f000 f8e7 	bl	80005d0 <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 8000402:	f000 f889 	bl	8000518 <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000406:	4817      	ldr	r0, [pc, #92]	; (8000464 <main+0x150>)
 8000408:	f001 fc0a 	bl	8001c20 <HAL_TIM_Base_Start_IT>

	LabOneService *service = new LabOneService(timer, signalLeft, signalRight, led0,
			led1, led2, led3, led4, led5, led6, led);
 800040c:	2014      	movs	r0, #20
 800040e:	f001 ff9b 	bl	8002348 <_Znwj>
 8000412:	4603      	mov	r3, r0
 8000414:	461c      	mov	r4, r3
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <main+0x154>)
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800041c:	9307      	str	r3, [sp, #28]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	9306      	str	r3, [sp, #24]
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	9305      	str	r3, [sp, #20]
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	9304      	str	r3, [sp, #16]
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	9303      	str	r3, [sp, #12]
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	9302      	str	r3, [sp, #8]
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	6a3b      	ldr	r3, [r7, #32]
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800043e:	4620      	mov	r0, r4
 8000440:	f7ff fe94 	bl	800016c <_ZN13LabOneServiceC1EP5TimerP7PinPairS3_S3_S3_S3_S3_S3_S3_S3_S3_>
 8000444:	607c      	str	r4, [r7, #4]

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int status = INIT;
 8000446:	2301      	movs	r3, #1
 8000448:	603b      	str	r3, [r7, #0]

	while (1) {
		/* USER CODE END WHILE */
		service->run(status);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	463a      	mov	r2, r7
 8000452:	4611      	mov	r1, r2
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	4798      	blx	r3
 8000458:	e7f7      	b.n	800044a <main+0x136>
 800045a:	bf00      	nop
 800045c:	40010800 	.word	0x40010800
 8000460:	40010c00 	.word	0x40010c00
 8000464:	20000090 	.word	0x20000090
 8000468:	200000d8 	.word	0x200000d8

0800046c <HAL_TIM_PeriodElapsedCallback>:
	/* USER CODE END 3 */
}

int counter = 100;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	timer->run();
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fc33 	bl	8000ce4 <_ZN5Timer3runEv>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200000d8 	.word	0x200000d8

0800048c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b090      	sub	sp, #64	; 0x40
 8000490:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2228      	movs	r2, #40	; 0x28
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f001 ffbc 	bl	8002418 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b2:	2301      	movs	r3, #1
 80004b4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	2310      	movs	r3, #16
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004be:	f107 0318 	add.w	r3, r7, #24
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 ff74 	bl	80013b0 <HAL_RCC_OscConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	bf14      	ite	ne
 80004ce:	2301      	movne	r3, #1
 80004d0:	2300      	moveq	r3, #0
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <_Z18SystemClock_Configv+0x50>
		Error_Handler();
 80004d8:	f000 f8cc 	bl	8000674 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004dc:	230f      	movs	r3, #15
 80004de:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 f9dd 	bl	80018b4 <HAL_RCC_ClockConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <_Z18SystemClock_Configv+0x82>
		Error_Handler();
 800050a:	f000 f8b3 	bl	8000674 <Error_Handler>
	}
}
 800050e:	bf00      	nop
 8000510:	3740      	adds	r7, #64	; 0x40
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 8000536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 800053e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000542:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 800054c:	2209      	movs	r2, #9
 800054e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000556:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800055c:	481b      	ldr	r0, [pc, #108]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 800055e:	f001 fb0f 	bl	8001b80 <HAL_TIM_Base_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	bf14      	ite	ne
 8000568:	2301      	movne	r3, #1
 800056a:	2300      	moveq	r3, #0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <_ZL12MX_TIM2_Initv+0x5e>
		Error_Handler();
 8000572:	f000 f87f 	bl	8000674 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4619      	mov	r1, r3
 8000582:	4812      	ldr	r0, [pc, #72]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 8000584:	f001 fca0 	bl	8001ec8 <HAL_TIM_ConfigClockSource>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <_ZL12MX_TIM2_Initv+0x84>
		Error_Handler();
 8000598:	f000 f86c 	bl	8000674 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <_ZL12MX_TIM2_Initv+0xb4>)
 80005aa:	f001 fe63 	bl	8002274 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
			!= HAL_OK) {
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	bf14      	ite	ne
 80005b4:	2301      	movne	r3, #1
 80005b6:	2300      	moveq	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <_ZL12MX_TIM2_Initv+0xaa>
		Error_Handler();
 80005be:	f000 f859 	bl	8000674 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000090 	.word	0x20000090

080005d0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <_ZL12MX_GPIO_Initv+0x98>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <_ZL12MX_GPIO_Initv+0x98>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <_ZL12MX_GPIO_Initv+0x98>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <_ZL12MX_GPIO_Initv+0x98>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <_ZL12MX_GPIO_Initv+0x98>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <_ZL12MX_GPIO_Initv+0x98>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, O_LED_Pin | O_EN0_Pin | O_EN1_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	21e0      	movs	r1, #224	; 0xe0
 8000618:	4814      	ldr	r0, [pc, #80]	; (800066c <_ZL12MX_GPIO_Initv+0x9c>)
 800061a:	f000 feb1 	bl	8001380 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800061e:	2200      	movs	r2, #0
 8000620:	217f      	movs	r1, #127	; 0x7f
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <_ZL12MX_GPIO_Initv+0xa0>)
 8000624:	f000 feac 	bl	8001380 <HAL_GPIO_WritePin>
			O_SEG0_Pin | O_SEG1_Pin | O_SEG2_Pin | O_SEG3_Pin | O_SEG4_Pin
					| O_SEG5_Pin | O_SEG6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : O_LED_Pin O_EN0_Pin O_EN1_Pin */
	GPIO_InitStruct.Pin = O_LED_Pin | O_EN0_Pin | O_EN1_Pin;
 8000628:	23e0      	movs	r3, #224	; 0xe0
 800062a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2302      	movs	r3, #2
 8000636:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4619      	mov	r1, r3
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <_ZL12MX_GPIO_Initv+0x9c>)
 8000640:	f000 fd22 	bl	8001088 <HAL_GPIO_Init>

	/*Configure GPIO pins : O_SEG0_Pin O_SEG1_Pin O_SEG2_Pin O_SEG3_Pin
	 O_SEG4_Pin O_SEG5_Pin O_SEG6_Pin */
	GPIO_InitStruct.Pin = O_SEG0_Pin | O_SEG1_Pin | O_SEG2_Pin | O_SEG3_Pin
 8000644:	237f      	movs	r3, #127	; 0x7f
 8000646:	60bb      	str	r3, [r7, #8]
			| O_SEG4_Pin | O_SEG5_Pin | O_SEG6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2302      	movs	r3, #2
 8000652:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <_ZL12MX_GPIO_Initv+0xa0>)
 800065c:	f000 fd14 	bl	8001088 <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800
 8000670:	40010c00 	.word	0x40010c00

08000674 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d10e      	bne.n	80006ae <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000696:	4293      	cmp	r3, r2
 8000698:	d109      	bne.n	80006ae <_Z41__static_initialization_and_destruction_0ii+0x2e>
Timer *timer = new Timer();
 800069a:	2008      	movs	r0, #8
 800069c:	f001 fe54 	bl	8002348 <_Znwj>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461c      	mov	r4, r3
 80006a4:	4620      	mov	r0, r4
 80006a6:	f000 fb0d 	bl	8000cc4 <_ZN5TimerC1Ev>
 80006aa:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80006ac:	601c      	str	r4, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000d8 	.word	0x200000d8

080006bc <_GLOBAL__sub_I_htim2>:
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
 80006c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ffdb 	bl	8000680 <_Z41__static_initialization_and_destruction_0ii>
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_ZN7PinPairC1EP12GPIO_TypeDeft>:
#include <pin_pair.h>

PinPair::PinPair(GPIO_TypeDef *port, uint16_t pin) {
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
	this->pin = pin;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	88fa      	ldrh	r2, [r7, #6]
 80006de:	809a      	strh	r2, [r3, #4]
	this->port = port;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	601a      	str	r2, [r3, #0]
	this->isActive = false;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	719a      	strb	r2, [r3, #6]
}
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4618      	mov	r0, r3
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <_ZN7PinPair3setEv>:

uint16_t PinPair::getPin() {
	return this->pin;
}

void PinPair::set() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if (this->port != nullptr) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00a      	beq.n	800071e <_ZN7PinPair3setEv+0x26>
		HAL_GPIO_WritePin(this->port, this->pin, GPIO_PinState::GPIO_PIN_RESET);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	f000 fe34 	bl	8001380 <HAL_GPIO_WritePin>
		this->isActive = true;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2201      	movs	r2, #1
 800071c:	719a      	strb	r2, [r3, #6]
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_ZN7PinPair5resetEv>:

void PinPair::reset() {
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	if (this->port != nullptr) {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00a      	beq.n	800074c <_ZN7PinPair5resetEv+0x26>
		HAL_GPIO_WritePin(this->port, this->pin, GPIO_PinState::GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	889b      	ldrh	r3, [r3, #4]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	f000 fe1d 	bl	8001380 <HAL_GPIO_WritePin>
		this->isActive = false;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	719a      	strb	r2, [r3, #6]
	}
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <_ZN7PinPair4isOnEv>:

bool PinPair::isOn() {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	return this->isActive;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	799b      	ldrb	r3, [r3, #6]
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>:
#include "segment_led.h"

SegmentLed::SegmentLed(PinPair *state, PinPair *led0, PinPair *led1,
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	603b      	str	r3, [r7, #0]
		PinPair *led2, PinPair *led3, PinPair *led4, PinPair *led5,
		PinPair *led6) {
	this->state = state;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	601a      	str	r2, [r3, #0]
	this->led0 = led0;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	605a      	str	r2, [r3, #4]
	this->led1 = led1;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	609a      	str	r2, [r3, #8]
	this->led2 = led2;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	60da      	str	r2, [r3, #12]
	this->led3 = led3;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	69fa      	ldr	r2, [r7, #28]
 8000794:	611a      	str	r2, [r3, #16]
	this->led4 = led4;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	615a      	str	r2, [r3, #20]
	this->led5 = led5;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007a0:	619a      	str	r2, [r3, #24]
	this->led6 = led6;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a6:	61da      	str	r2, [r3, #28]
}
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <_ZN10SegmentLed6updateEi>:

void SegmentLed::update(int index) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	if (this->state->isOn()) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ffc6 	bl	8000754 <_ZN7PinPair4isOnEv>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f000 8185 	beq.w	8000ada <_ZN10SegmentLed6updateEi+0x326>
		switch (index) {
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	f200 8180 	bhi.w	8000ad8 <_ZN10SegmentLed6updateEi+0x324>
 80007d8:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <_ZN10SegmentLed6updateEi+0x2c>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	08000809 	.word	0x08000809
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000899 	.word	0x08000899
 80007ec:	080008e1 	.word	0x080008e1
 80007f0:	08000929 	.word	0x08000929
 80007f4:	08000971 	.word	0x08000971
 80007f8:	080009b9 	.word	0x080009b9
 80007fc:	08000a01 	.word	0x08000a01
 8000800:	08000a49 	.word	0x08000a49
 8000804:	08000a91 	.word	0x08000a91
		case 0:
			this->led0->set();
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff73 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->set();
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff6e 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff69 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->set();
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff64 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->set();
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff5f 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led5->set();
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff5a 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led6->reset();
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff6c 	bl	8000726 <_ZN7PinPair5resetEv>
			break;
 800084e:	e144      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 1:
			this->led0->reset();
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff66 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led1->set();
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff4a 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff45 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->reset();
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff57 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led4->reset();
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff52 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led5->reset();
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff4d 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led6->reset();
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff48 	bl	8000726 <_ZN7PinPair5resetEv>
			break;
 8000896:	e120      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 2:
			this->led0->set();
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff2b 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->set();
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff26 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->reset();
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff38 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led3->set();
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff1c 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->set();
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff17 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led5->reset();
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff29 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led6->set();
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff0d 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 80008de:	e0fc      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 3:
			this->led0->set();
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff07 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->set();
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff02 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fefd 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->set();
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fef8 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->reset();
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff0a 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led5->reset();
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff05 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led6->set();
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fee9 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 8000926:	e0d8      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 4:
			this->led0->reset();
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fefa 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led1->set();
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fede 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fed9 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->reset();
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff feeb 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led4->reset();
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fee6 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led5->set();
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff feca 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led6->set();
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fec5 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 800096e:	e0b4      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 5:
			this->led0->set();
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff febf 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->reset();
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fed1 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led2->set();
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff feb5 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->set();
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff feb0 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->reset();
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fec2 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led5->set();
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fea6 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led6->set();
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fea1 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 80009b6:	e090      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 6:
			this->led0->set();
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe9b 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->reset();
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fead 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led2->set();
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fe91 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->set();
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe8c 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->set();
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe87 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led5->set();
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe82 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led6->set();
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe7d 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 80009fe:	e06c      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 7:
			this->led0->set();
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe77 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->set();
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe72 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe6d 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->reset();
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe7f 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led4->reset();
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe7a 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led5->reset();
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe75 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led6->reset();
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe70 	bl	8000726 <_ZN7PinPair5resetEv>
			break;
 8000a46:	e048      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 8:
			this->led0->set();
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe53 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->set();
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe4e 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe49 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->set();
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe44 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->set();
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe3f 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led5->set();
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe3a 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led6->set();
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe35 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 8000a8e:	e024      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		case 9:
			this->led0->set();
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe2f 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led1->set();
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fe2a 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led2->set();
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fe25 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led3->set();
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fe20 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led4->reset();
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe32 	bl	8000726 <_ZN7PinPair5resetEv>
			this->led5->set();
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe16 	bl	80006f8 <_ZN7PinPair3setEv>
			this->led6->set();
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe11 	bl	80006f8 <_ZN7PinPair3setEv>
			break;
 8000ad6:	e000      	b.n	8000ada <_ZN10SegmentLed6updateEi+0x326>
		default:
			break;
 8000ad8:	bf00      	nop
		}
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop

08000ae4 <_ZN10SegmentLed6turnOnEv>:
	this->led4->reset();
	this->led5->reset();
	this->led6->reset();
}

void SegmentLed::turnOn() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	this->state->set();
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe01 	bl	80006f8 <_ZN7PinPair3setEv>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZN10SegmentLed7turnOffEv>:

void SegmentLed::turnOff() {
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	this->state->reset();
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe0b 	bl	8000726 <_ZN7PinPair5resetEv>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_MspInit+0x40>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <HAL_MspInit+0x40>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x40>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x40>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_MspInit+0x40>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_MspInit+0x40>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b6c:	d113      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 fa45 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b90:	201c      	movs	r0, #28
 8000b92:	f000 fa5e 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 f923 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM2_IRQHandler+0x10>)
 8000bfa:	f001 f85d 	bl	8001cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000090 	.word	0x20000090

08000c08 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <_kill>:

int _kill(int pid, int sig) {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c20:	f001 fbc8 	bl	80023b4 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2216      	movs	r2, #22
 8000c28:	601a      	str	r2, [r3, #0]
	return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_exit>:

void _exit(int status) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffe7 	bl	8000c16 <_kill>
	while (1) {
 8000c48:	e7fe      	b.n	8000c48 <_exit+0x12>
	...

08000c4c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
		errno = ENOMEM;
 8000c7c:	f001 fb9a 	bl	80023b4 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20002800 	.word	0x20002800
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	200000dc 	.word	0x200000dc
 8000cb4:	200000f8 	.word	0x200000f8

08000cb8 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <_ZN5TimerC1Ev>:
#include "timer.h"

Timer::Timer() {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	this->counter = 0;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
	this->signal = false;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	711a      	strb	r2, [r3, #4]
}
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <_ZN5Timer3runEv>:

void Timer::run() {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if (this->counter > 0) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dd0b      	ble.n	8000d0c <_ZN5Timer3runEv+0x28>
		this->counter -= 1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	601a      	str	r2, [r3, #0]
		if (this->counter == 0) {
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <_ZN5Timer3runEv+0x28>
			this->signal = true;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <_ZN5Timer9hasSignalEv>:

bool Timer::hasSignal() {
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return this->signal;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	791b      	ldrb	r3, [r3, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <_ZN5Timer8setTimerEi>:

void Timer::setTimer(int duration) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	this->signal = false;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	711a      	strb	r2, [r3, #4]
	this->counter = duration / TICK;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <_ZN5Timer8setTimerEi+0x2c>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	66666667 	.word	0x66666667

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff ff99 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fb1b 	bl	80023c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fac3 	bl	8000314 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d98:	08002670 	.word	0x08002670
  ldr r2, =_sbss
 8000d9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000da0:	200000f8 	.word	0x200000f8

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f923 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fea8 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f93b 	bl	800106e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f903 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200000e0 	.word	0x200000e0

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200000e0 	.word	0x200000e0

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4906      	ldr	r1, [pc, #24]	; (8000f04 <__NVIC_EnableIRQ+0x34>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff90 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff2d 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff42 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff35 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e161      	b.n	8001360 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800109c:	2201      	movs	r2, #1
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8150 	bne.w	800135a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4a97      	ldr	r2, [pc, #604]	; (800131c <HAL_GPIO_Init+0x294>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d05e      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010c4:	4a95      	ldr	r2, [pc, #596]	; (800131c <HAL_GPIO_Init+0x294>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d875      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010ca:	4a95      	ldr	r2, [pc, #596]	; (8001320 <HAL_GPIO_Init+0x298>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d058      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010d0:	4a93      	ldr	r2, [pc, #588]	; (8001320 <HAL_GPIO_Init+0x298>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d86f      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010d6:	4a93      	ldr	r2, [pc, #588]	; (8001324 <HAL_GPIO_Init+0x29c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d052      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010dc:	4a91      	ldr	r2, [pc, #580]	; (8001324 <HAL_GPIO_Init+0x29c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d869      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010e2:	4a91      	ldr	r2, [pc, #580]	; (8001328 <HAL_GPIO_Init+0x2a0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d04c      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010e8:	4a8f      	ldr	r2, [pc, #572]	; (8001328 <HAL_GPIO_Init+0x2a0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d863      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010ee:	4a8f      	ldr	r2, [pc, #572]	; (800132c <HAL_GPIO_Init+0x2a4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d046      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010f4:	4a8d      	ldr	r2, [pc, #564]	; (800132c <HAL_GPIO_Init+0x2a4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d85d      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d82a      	bhi.n	8001154 <HAL_GPIO_Init+0xcc>
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d859      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 8001102:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <HAL_GPIO_Init+0x80>)
 8001104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001108:	08001183 	.word	0x08001183
 800110c:	0800115d 	.word	0x0800115d
 8001110:	0800116f 	.word	0x0800116f
 8001114:	080011b1 	.word	0x080011b1
 8001118:	080011b7 	.word	0x080011b7
 800111c:	080011b7 	.word	0x080011b7
 8001120:	080011b7 	.word	0x080011b7
 8001124:	080011b7 	.word	0x080011b7
 8001128:	080011b7 	.word	0x080011b7
 800112c:	080011b7 	.word	0x080011b7
 8001130:	080011b7 	.word	0x080011b7
 8001134:	080011b7 	.word	0x080011b7
 8001138:	080011b7 	.word	0x080011b7
 800113c:	080011b7 	.word	0x080011b7
 8001140:	080011b7 	.word	0x080011b7
 8001144:	080011b7 	.word	0x080011b7
 8001148:	080011b7 	.word	0x080011b7
 800114c:	08001165 	.word	0x08001165
 8001150:	08001179 	.word	0x08001179
 8001154:	4a76      	ldr	r2, [pc, #472]	; (8001330 <HAL_GPIO_Init+0x2a8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800115a:	e02c      	b.n	80011b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e029      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	3304      	adds	r3, #4
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e024      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	3308      	adds	r3, #8
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e01f      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	330c      	adds	r3, #12
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e01a      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800118a:	2304      	movs	r3, #4
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e013      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	611a      	str	r2, [r3, #16]
          break;
 80011a2:	e009      	b.n	80011b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	615a      	str	r2, [r3, #20]
          break;
 80011ae:	e003      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          break;
 80011b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	; 0xff
 80011bc:	d801      	bhi.n	80011c2 <HAL_GPIO_Init+0x13a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	e001      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3304      	adds	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d802      	bhi.n	80011d4 <HAL_GPIO_Init+0x14c>
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x152>
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	3b08      	subs	r3, #8
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	210f      	movs	r1, #15
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	6a39      	ldr	r1, [r7, #32]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	431a      	orrs	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80a9 	beq.w	800135a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_GPIO_Init+0x2ac>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a49      	ldr	r2, [pc, #292]	; (8001334 <HAL_GPIO_Init+0x2ac>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b47      	ldr	r3, [pc, #284]	; (8001334 <HAL_GPIO_Init+0x2ac>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001220:	4a45      	ldr	r2, [pc, #276]	; (8001338 <HAL_GPIO_Init+0x2b0>)
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3d      	ldr	r2, [pc, #244]	; (800133c <HAL_GPIO_Init+0x2b4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d00d      	beq.n	8001268 <HAL_GPIO_Init+0x1e0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <HAL_GPIO_Init+0x2b8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0x1dc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a3b      	ldr	r2, [pc, #236]	; (8001344 <HAL_GPIO_Init+0x2bc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d101      	bne.n	8001260 <HAL_GPIO_Init+0x1d8>
 800125c:	2302      	movs	r3, #2
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 8001260:	2303      	movs	r3, #3
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 8001268:	2300      	movs	r3, #0
 800126a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127a:	492f      	ldr	r1, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x2b0>)
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	492b      	ldr	r1, [pc, #172]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4921      	ldr	r1, [pc, #132]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	491d      	ldr	r1, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	4917      	ldr	r1, [pc, #92]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4913      	ldr	r1, [pc, #76]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01f      	beq.n	800134c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	490d      	ldr	r1, [pc, #52]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
 8001318:	e01f      	b.n	800135a <HAL_GPIO_Init+0x2d2>
 800131a:	bf00      	nop
 800131c:	10320000 	.word	0x10320000
 8001320:	10310000 	.word	0x10310000
 8001324:	10220000 	.word	0x10220000
 8001328:	10210000 	.word	0x10210000
 800132c:	10120000 	.word	0x10120000
 8001330:	10110000 	.word	0x10110000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011000 	.word	0x40011000
 8001348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_GPIO_Init+0x2f4>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <HAL_GPIO_Init+0x2f4>)
 8001356:	4013      	ands	r3, r2
 8001358:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae96 	bne.w	800109c <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	372c      	adds	r7, #44	; 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e272      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8087 	beq.w	80014de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d00c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013dc:	4b8f      	ldr	r3, [pc, #572]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d112      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
 80013e8:	4b8c      	ldr	r3, [pc, #560]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d10b      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06c      	beq.n	80014dc <HAL_RCC_OscConfig+0x12c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d168      	bne.n	80014dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e24c      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x76>
 8001418:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a7f      	ldr	r2, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e02e      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7a      	ldr	r2, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b78      	ldr	r3, [pc, #480]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a77      	ldr	r2, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e01d      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0xbc>
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a71      	ldr	r2, [pc, #452]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b6f      	ldr	r3, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 800146c:	4b6b      	ldr	r3, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a67      	ldr	r2, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fce4 	bl	8000e58 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fce0 	bl	8000e58 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e200      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0xe4>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fcd0 	bl	8000e58 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fccc 	bl	8000e58 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1ec      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x10c>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d063      	beq.n	80015b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d11c      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d116      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e1c0      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4939      	ldr	r1, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	e03a      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fc85 	bl	8000e58 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fc81 	bl	8000e58 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1a1      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fc64 	bl	8000e58 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff fc60 	bl	8000e58 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e180      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03a      	beq.n	8001634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d019      	beq.n	80015fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fc44 	bl	8000e58 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc40 	bl	8000e58 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e160      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f000 faa6 	bl	8001b44 <RCC_Delay>
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fc2a 	bl	8000e58 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	e00f      	b.n	8001628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fc26 	bl	8000e58 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d908      	bls.n	8001628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e146      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	42420000 	.word	0x42420000
 8001624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e9      	bne.n	8001608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a6 	beq.w	800178e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7e      	ldr	r2, [pc, #504]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff fbe7 	bl	8000e58 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff fbe3 	bl	8000e58 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e103      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b75      	ldr	r3, [pc, #468]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x312>
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e02d      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x334>
 80016ca:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a66      	ldr	r2, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x356>
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a60      	ldr	r2, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a5d      	ldr	r2, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff fb97 	bl	8000e58 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fb93 	bl	8000e58 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0b1      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x37e>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fb81 	bl	8000e58 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fb7d 	bl	8000e58 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e09b      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b40      	ldr	r3, [pc, #256]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a3b      	ldr	r2, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8087 	beq.w	80018a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d061      	beq.n	8001868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d146      	bne.n	800183a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb51 	bl	8000e58 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb4d 	bl	8000e58 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e06d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4921      	ldr	r1, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a19      	ldr	r1, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	430b      	orrs	r3, r1
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fb21 	bl	8000e58 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fb1d 	bl	8000e58 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e03d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x46a>
 8001838:	e035      	b.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fb0a 	bl	8000e58 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fb06 	bl	8000e58 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e026      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x498>
 8001866:	e01e      	b.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e019      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
 800187c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x500>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	429a      	cmp	r2, r3
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0d0      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d910      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0207 	bic.w	r2, r3, #7
 80018de:	4965      	ldr	r1, [pc, #404]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d040      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e073      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06b      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4936      	ldr	r1, [pc, #216]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff fa58 	bl	8000e58 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff fa54 	bl	8000e58 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e053      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d210      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4922      	ldr	r1, [pc, #136]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1cc>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1d0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f9b6 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08002654 	.word	0x08002654
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b490      	push	{r4, r7}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a90:	1d3c      	adds	r4, r7, #4
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a98:	f240 2301 	movw	r3, #513	; 0x201
 8001a9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x46>
 8001ac6:	e02b      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aca:	623b      	str	r3, [r7, #32]
      break;
 8001acc:	e02b      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3328      	adds	r3, #40	; 0x28
 8001ad8:	443b      	add	r3, r7
 8001ada:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ade:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d012      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	0c5b      	lsrs	r3, r3, #17
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	443b      	add	r3, r7
 8001af8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001afc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b02:	fb03 f202 	mul.w	r2, r3, r2
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e004      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	623b      	str	r3, [r7, #32]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b22:	623b      	str	r3, [r7, #32]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc90      	pop	{r4, r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	0800262c 	.word	0x0800262c
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	007a1200 	.word	0x007a1200
 8001b40:	003d0900 	.word	0x003d0900

08001b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <RCC_Delay+0x34>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <RCC_Delay+0x38>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b60:	bf00      	nop
  }
  while (Delay --);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <RCC_Delay+0x1c>
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e041      	b.n	8001c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe ffd8 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 fa6a 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e035      	b.n	8001ca4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_TIM_Base_Start_IT+0x90>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x4e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c62:	d004      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x4e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_TIM_Base_Start_IT+0x94>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d010      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0202 	mvn.w	r2, #2
 8001ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f9b1 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f9a4 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f9b3 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0204 	mvn.w	r2, #4
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f987 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f97a 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f989 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0208 	mvn.w	r2, #8
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f95d 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f950 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f95f 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0210 	mvn.w	r2, #16
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2208      	movs	r2, #8
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f933 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f926 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f935 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0201 	mvn.w	r2, #1
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fb18 	bl	800046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa67 	bl	8002336 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b40      	cmp	r3, #64	; 0x40
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8f9 	bl	8002086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0220 	mvn.w	r2, #32
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fa32 	bl	8002324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_TIM_ConfigClockSource+0x18>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e0b3      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x180>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f18:	d03e      	beq.n	8001f98 <HAL_TIM_ConfigClockSource+0xd0>
 8001f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f1e:	f200 8087 	bhi.w	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f26:	f000 8085 	beq.w	8002034 <HAL_TIM_ConfigClockSource+0x16c>
 8001f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2e:	d87f      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f30:	2b70      	cmp	r3, #112	; 0x70
 8001f32:	d01a      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0xa2>
 8001f34:	2b70      	cmp	r3, #112	; 0x70
 8001f36:	d87b      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f38:	2b60      	cmp	r3, #96	; 0x60
 8001f3a:	d050      	beq.n	8001fde <HAL_TIM_ConfigClockSource+0x116>
 8001f3c:	2b60      	cmp	r3, #96	; 0x60
 8001f3e:	d877      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f40:	2b50      	cmp	r3, #80	; 0x50
 8001f42:	d03c      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0xf6>
 8001f44:	2b50      	cmp	r3, #80	; 0x50
 8001f46:	d873      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d058      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0x136>
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d86f      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f50:	2b30      	cmp	r3, #48	; 0x30
 8001f52:	d064      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x156>
 8001f54:	2b30      	cmp	r3, #48	; 0x30
 8001f56:	d86b      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d060      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x156>
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d867      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d05c      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x156>
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d05a      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f68:	e062      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f000 f95c 	bl	8002236 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	609a      	str	r2, [r3, #8]
      break;
 8001f96:	e04e      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f000 f945 	bl	8002236 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fba:	609a      	str	r2, [r3, #8]
      break;
 8001fbc:	e03b      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f000 f8bc 	bl	8002148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2150      	movs	r1, #80	; 0x50
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f913 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 8001fdc:	e02b      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f000 f8da 	bl	80021a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2160      	movs	r1, #96	; 0x60
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f903 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 8001ffc:	e01b      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	461a      	mov	r2, r3
 800200c:	f000 f89c 	bl	8002148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2140      	movs	r1, #64	; 0x40
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f8f3 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 800201c:	e00b      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 f8ea 	bl	8002202 <TIM_ITRx_SetConfig>
        break;
 800202e:	e002      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002030:	bf00      	nop
 8002032:	e000      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002034:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a25      	ldr	r2, [pc, #148]	; (8002140 <TIM_Base_SetConfig+0xa8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <TIM_Base_SetConfig+0x28>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0x28>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <TIM_Base_SetConfig+0xac>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <TIM_Base_SetConfig+0xa8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <TIM_Base_SetConfig+0x52>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d003      	beq.n	80020ea <TIM_Base_SetConfig+0x52>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <TIM_Base_SetConfig+0xac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d108      	bne.n	80020fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a07      	ldr	r2, [pc, #28]	; (8002140 <TIM_Base_SetConfig+0xa8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d103      	bne.n	8002130 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	615a      	str	r2, [r3, #20]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40000400 	.word	0x40000400

08002148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f023 0201 	bic.w	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f023 030a 	bic.w	r3, r3, #10
 8002184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f023 0210 	bic.w	r2, r3, #16
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	031b      	lsls	r3, r3, #12
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	621a      	str	r2, [r3, #32]
}
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	f043 0307 	orr.w	r3, r3, #7
 8002224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002236:	b480      	push	{r7}
 8002238:	b087      	sub	sp, #28
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002250:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	021a      	lsls	r2, r3, #8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4313      	orrs	r3, r2
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	609a      	str	r2, [r3, #8]
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002288:	2302      	movs	r3, #2
 800228a:	e041      	b.n	8002310 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d004      	beq.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d10c      	bne.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400

08002324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <_Znwj>:
 8002348:	2801      	cmp	r0, #1
 800234a:	bf38      	it	cc
 800234c:	2001      	movcc	r0, #1
 800234e:	b510      	push	{r4, lr}
 8002350:	4604      	mov	r4, r0
 8002352:	4620      	mov	r0, r4
 8002354:	f000 f858 	bl	8002408 <malloc>
 8002358:	b930      	cbnz	r0, 8002368 <_Znwj+0x20>
 800235a:	f000 f81b 	bl	8002394 <_ZSt15get_new_handlerv>
 800235e:	b908      	cbnz	r0, 8002364 <_Znwj+0x1c>
 8002360:	f000 f820 	bl	80023a4 <abort>
 8002364:	4780      	blx	r0
 8002366:	e7f4      	b.n	8002352 <_Znwj+0xa>
 8002368:	bd10      	pop	{r4, pc}

0800236a <__cxa_pure_virtual>:
 800236a:	b508      	push	{r3, lr}
 800236c:	f000 f80c 	bl	8002388 <_ZSt9terminatev>

08002370 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8002370:	b508      	push	{r3, lr}
 8002372:	4780      	blx	r0
 8002374:	f000 f816 	bl	80023a4 <abort>

08002378 <_ZSt13get_terminatev>:
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <_ZSt13get_terminatev+0xc>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	f3bf 8f5b 	dmb	ish
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000000c 	.word	0x2000000c

08002388 <_ZSt9terminatev>:
 8002388:	b508      	push	{r3, lr}
 800238a:	f7ff fff5 	bl	8002378 <_ZSt13get_terminatev>
 800238e:	f7ff ffef 	bl	8002370 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08002394 <_ZSt15get_new_handlerv>:
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <_ZSt15get_new_handlerv+0xc>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	f3bf 8f5b 	dmb	ish
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200000e4 	.word	0x200000e4

080023a4 <abort>:
 80023a4:	2006      	movs	r0, #6
 80023a6:	b508      	push	{r3, lr}
 80023a8:	f000 f90a 	bl	80025c0 <raise>
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe fc42 	bl	8000c36 <_exit>
	...

080023b4 <__errno>:
 80023b4:	4b01      	ldr	r3, [pc, #4]	; (80023bc <__errno+0x8>)
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000010 	.word	0x20000010

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	2600      	movs	r6, #0
 80023c4:	4d0c      	ldr	r5, [pc, #48]	; (80023f8 <__libc_init_array+0x38>)
 80023c6:	4c0d      	ldr	r4, [pc, #52]	; (80023fc <__libc_init_array+0x3c>)
 80023c8:	1b64      	subs	r4, r4, r5
 80023ca:	10a4      	asrs	r4, r4, #2
 80023cc:	42a6      	cmp	r6, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	f000 f920 	bl	8002614 <_init>
 80023d4:	2600      	movs	r6, #0
 80023d6:	4d0a      	ldr	r5, [pc, #40]	; (8002400 <__libc_init_array+0x40>)
 80023d8:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <__libc_init_array+0x44>)
 80023da:	1b64      	subs	r4, r4, r5
 80023dc:	10a4      	asrs	r4, r4, #2
 80023de:	42a6      	cmp	r6, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e8:	4798      	blx	r3
 80023ea:	3601      	adds	r6, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f2:	4798      	blx	r3
 80023f4:	3601      	adds	r6, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	08002664 	.word	0x08002664
 80023fc:	08002664 	.word	0x08002664
 8002400:	08002664 	.word	0x08002664
 8002404:	0800266c 	.word	0x0800266c

08002408 <malloc>:
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <malloc+0xc>)
 800240a:	4601      	mov	r1, r0
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	f000 b82b 	b.w	8002468 <_malloc_r>
 8002412:	bf00      	nop
 8002414:	20000010 	.word	0x20000010

08002418 <memset>:
 8002418:	4603      	mov	r3, r0
 800241a:	4402      	add	r2, r0
 800241c:	4293      	cmp	r3, r2
 800241e:	d100      	bne.n	8002422 <memset+0xa>
 8002420:	4770      	bx	lr
 8002422:	f803 1b01 	strb.w	r1, [r3], #1
 8002426:	e7f9      	b.n	800241c <memset+0x4>

08002428 <sbrk_aligned>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	4e0e      	ldr	r6, [pc, #56]	; (8002464 <sbrk_aligned+0x3c>)
 800242c:	460c      	mov	r4, r1
 800242e:	6831      	ldr	r1, [r6, #0]
 8002430:	4605      	mov	r5, r0
 8002432:	b911      	cbnz	r1, 800243a <sbrk_aligned+0x12>
 8002434:	f000 f88c 	bl	8002550 <_sbrk_r>
 8002438:	6030      	str	r0, [r6, #0]
 800243a:	4621      	mov	r1, r4
 800243c:	4628      	mov	r0, r5
 800243e:	f000 f887 	bl	8002550 <_sbrk_r>
 8002442:	1c43      	adds	r3, r0, #1
 8002444:	d00a      	beq.n	800245c <sbrk_aligned+0x34>
 8002446:	1cc4      	adds	r4, r0, #3
 8002448:	f024 0403 	bic.w	r4, r4, #3
 800244c:	42a0      	cmp	r0, r4
 800244e:	d007      	beq.n	8002460 <sbrk_aligned+0x38>
 8002450:	1a21      	subs	r1, r4, r0
 8002452:	4628      	mov	r0, r5
 8002454:	f000 f87c 	bl	8002550 <_sbrk_r>
 8002458:	3001      	adds	r0, #1
 800245a:	d101      	bne.n	8002460 <sbrk_aligned+0x38>
 800245c:	f04f 34ff 	mov.w	r4, #4294967295
 8002460:	4620      	mov	r0, r4
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	200000ec 	.word	0x200000ec

08002468 <_malloc_r>:
 8002468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246c:	1ccd      	adds	r5, r1, #3
 800246e:	f025 0503 	bic.w	r5, r5, #3
 8002472:	3508      	adds	r5, #8
 8002474:	2d0c      	cmp	r5, #12
 8002476:	bf38      	it	cc
 8002478:	250c      	movcc	r5, #12
 800247a:	2d00      	cmp	r5, #0
 800247c:	4607      	mov	r7, r0
 800247e:	db01      	blt.n	8002484 <_malloc_r+0x1c>
 8002480:	42a9      	cmp	r1, r5
 8002482:	d905      	bls.n	8002490 <_malloc_r+0x28>
 8002484:	230c      	movs	r3, #12
 8002486:	2600      	movs	r6, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4630      	mov	r0, r6
 800248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002490:	4e2e      	ldr	r6, [pc, #184]	; (800254c <_malloc_r+0xe4>)
 8002492:	f000 f8b1 	bl	80025f8 <__malloc_lock>
 8002496:	6833      	ldr	r3, [r6, #0]
 8002498:	461c      	mov	r4, r3
 800249a:	bb34      	cbnz	r4, 80024ea <_malloc_r+0x82>
 800249c:	4629      	mov	r1, r5
 800249e:	4638      	mov	r0, r7
 80024a0:	f7ff ffc2 	bl	8002428 <sbrk_aligned>
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	4604      	mov	r4, r0
 80024a8:	d14d      	bne.n	8002546 <_malloc_r+0xde>
 80024aa:	6834      	ldr	r4, [r6, #0]
 80024ac:	4626      	mov	r6, r4
 80024ae:	2e00      	cmp	r6, #0
 80024b0:	d140      	bne.n	8002534 <_malloc_r+0xcc>
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	4631      	mov	r1, r6
 80024b6:	4638      	mov	r0, r7
 80024b8:	eb04 0803 	add.w	r8, r4, r3
 80024bc:	f000 f848 	bl	8002550 <_sbrk_r>
 80024c0:	4580      	cmp	r8, r0
 80024c2:	d13a      	bne.n	800253a <_malloc_r+0xd2>
 80024c4:	6821      	ldr	r1, [r4, #0]
 80024c6:	3503      	adds	r5, #3
 80024c8:	1a6d      	subs	r5, r5, r1
 80024ca:	f025 0503 	bic.w	r5, r5, #3
 80024ce:	3508      	adds	r5, #8
 80024d0:	2d0c      	cmp	r5, #12
 80024d2:	bf38      	it	cc
 80024d4:	250c      	movcc	r5, #12
 80024d6:	4638      	mov	r0, r7
 80024d8:	4629      	mov	r1, r5
 80024da:	f7ff ffa5 	bl	8002428 <sbrk_aligned>
 80024de:	3001      	adds	r0, #1
 80024e0:	d02b      	beq.n	800253a <_malloc_r+0xd2>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	442b      	add	r3, r5
 80024e6:	6023      	str	r3, [r4, #0]
 80024e8:	e00e      	b.n	8002508 <_malloc_r+0xa0>
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	1b52      	subs	r2, r2, r5
 80024ee:	d41e      	bmi.n	800252e <_malloc_r+0xc6>
 80024f0:	2a0b      	cmp	r2, #11
 80024f2:	d916      	bls.n	8002522 <_malloc_r+0xba>
 80024f4:	1961      	adds	r1, r4, r5
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	6025      	str	r5, [r4, #0]
 80024fa:	bf18      	it	ne
 80024fc:	6059      	strne	r1, [r3, #4]
 80024fe:	6863      	ldr	r3, [r4, #4]
 8002500:	bf08      	it	eq
 8002502:	6031      	streq	r1, [r6, #0]
 8002504:	5162      	str	r2, [r4, r5]
 8002506:	604b      	str	r3, [r1, #4]
 8002508:	4638      	mov	r0, r7
 800250a:	f104 060b 	add.w	r6, r4, #11
 800250e:	f000 f879 	bl	8002604 <__malloc_unlock>
 8002512:	f026 0607 	bic.w	r6, r6, #7
 8002516:	1d23      	adds	r3, r4, #4
 8002518:	1af2      	subs	r2, r6, r3
 800251a:	d0b6      	beq.n	800248a <_malloc_r+0x22>
 800251c:	1b9b      	subs	r3, r3, r6
 800251e:	50a3      	str	r3, [r4, r2]
 8002520:	e7b3      	b.n	800248a <_malloc_r+0x22>
 8002522:	6862      	ldr	r2, [r4, #4]
 8002524:	42a3      	cmp	r3, r4
 8002526:	bf0c      	ite	eq
 8002528:	6032      	streq	r2, [r6, #0]
 800252a:	605a      	strne	r2, [r3, #4]
 800252c:	e7ec      	b.n	8002508 <_malloc_r+0xa0>
 800252e:	4623      	mov	r3, r4
 8002530:	6864      	ldr	r4, [r4, #4]
 8002532:	e7b2      	b.n	800249a <_malloc_r+0x32>
 8002534:	4634      	mov	r4, r6
 8002536:	6876      	ldr	r6, [r6, #4]
 8002538:	e7b9      	b.n	80024ae <_malloc_r+0x46>
 800253a:	230c      	movs	r3, #12
 800253c:	4638      	mov	r0, r7
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	f000 f860 	bl	8002604 <__malloc_unlock>
 8002544:	e7a1      	b.n	800248a <_malloc_r+0x22>
 8002546:	6025      	str	r5, [r4, #0]
 8002548:	e7de      	b.n	8002508 <_malloc_r+0xa0>
 800254a:	bf00      	nop
 800254c:	200000e8 	.word	0x200000e8

08002550 <_sbrk_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	2300      	movs	r3, #0
 8002554:	4d05      	ldr	r5, [pc, #20]	; (800256c <_sbrk_r+0x1c>)
 8002556:	4604      	mov	r4, r0
 8002558:	4608      	mov	r0, r1
 800255a:	602b      	str	r3, [r5, #0]
 800255c:	f7fe fb76 	bl	8000c4c <_sbrk>
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	d102      	bne.n	800256a <_sbrk_r+0x1a>
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	b103      	cbz	r3, 800256a <_sbrk_r+0x1a>
 8002568:	6023      	str	r3, [r4, #0]
 800256a:	bd38      	pop	{r3, r4, r5, pc}
 800256c:	200000f0 	.word	0x200000f0

08002570 <_raise_r>:
 8002570:	291f      	cmp	r1, #31
 8002572:	b538      	push	{r3, r4, r5, lr}
 8002574:	4604      	mov	r4, r0
 8002576:	460d      	mov	r5, r1
 8002578:	d904      	bls.n	8002584 <_raise_r+0x14>
 800257a:	2316      	movs	r3, #22
 800257c:	6003      	str	r3, [r0, #0]
 800257e:	f04f 30ff 	mov.w	r0, #4294967295
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002586:	b112      	cbz	r2, 800258e <_raise_r+0x1e>
 8002588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800258c:	b94b      	cbnz	r3, 80025a2 <_raise_r+0x32>
 800258e:	4620      	mov	r0, r4
 8002590:	f000 f830 	bl	80025f4 <_getpid_r>
 8002594:	462a      	mov	r2, r5
 8002596:	4601      	mov	r1, r0
 8002598:	4620      	mov	r0, r4
 800259a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800259e:	f000 b817 	b.w	80025d0 <_kill_r>
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d00a      	beq.n	80025bc <_raise_r+0x4c>
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	d103      	bne.n	80025b2 <_raise_r+0x42>
 80025aa:	2316      	movs	r3, #22
 80025ac:	6003      	str	r3, [r0, #0]
 80025ae:	2001      	movs	r0, #1
 80025b0:	e7e7      	b.n	8002582 <_raise_r+0x12>
 80025b2:	2400      	movs	r4, #0
 80025b4:	4628      	mov	r0, r5
 80025b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80025ba:	4798      	blx	r3
 80025bc:	2000      	movs	r0, #0
 80025be:	e7e0      	b.n	8002582 <_raise_r+0x12>

080025c0 <raise>:
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <raise+0xc>)
 80025c2:	4601      	mov	r1, r0
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	f7ff bfd3 	b.w	8002570 <_raise_r>
 80025ca:	bf00      	nop
 80025cc:	20000010 	.word	0x20000010

080025d0 <_kill_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	2300      	movs	r3, #0
 80025d4:	4d06      	ldr	r5, [pc, #24]	; (80025f0 <_kill_r+0x20>)
 80025d6:	4604      	mov	r4, r0
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	f7fe fb1a 	bl	8000c16 <_kill>
 80025e2:	1c43      	adds	r3, r0, #1
 80025e4:	d102      	bne.n	80025ec <_kill_r+0x1c>
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	b103      	cbz	r3, 80025ec <_kill_r+0x1c>
 80025ea:	6023      	str	r3, [r4, #0]
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
 80025ee:	bf00      	nop
 80025f0:	200000f0 	.word	0x200000f0

080025f4 <_getpid_r>:
 80025f4:	f7fe bb08 	b.w	8000c08 <_getpid>

080025f8 <__malloc_lock>:
 80025f8:	4801      	ldr	r0, [pc, #4]	; (8002600 <__malloc_lock+0x8>)
 80025fa:	f000 b809 	b.w	8002610 <__retarget_lock_acquire_recursive>
 80025fe:	bf00      	nop
 8002600:	200000f4 	.word	0x200000f4

08002604 <__malloc_unlock>:
 8002604:	4801      	ldr	r0, [pc, #4]	; (800260c <__malloc_unlock+0x8>)
 8002606:	f000 b804 	b.w	8002612 <__retarget_lock_release_recursive>
 800260a:	bf00      	nop
 800260c:	200000f4 	.word	0x200000f4

08002610 <__retarget_lock_acquire_recursive>:
 8002610:	4770      	bx	lr

08002612 <__retarget_lock_release_recursive>:
 8002612:	4770      	bx	lr

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
