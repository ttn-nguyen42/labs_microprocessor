
Lab3_E1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003210  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800333c  0800333c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800333c  0800333c  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800333c  0800333c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200000b4  08003404  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08003404  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfa7  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a00  00000000  00000000  0002c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a48f  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df19  00000000  00000000  0004a61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088657  00000000  00000000  00058538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  000e0be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003304 	.word	0x08003304

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003304 	.word	0x08003304

0800014c <_ZN3LedC1EP7PinPair>:
class Led {
private:
  PinPair* m_PinPair = nullptr;
  bool     m_IsOn    = false;
public:
  Led(PinPair* pin_pair) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2200      	movs	r2, #0
 8000160:	711a      	strb	r2, [r3, #4]
    this->m_PinPair = pin_pair;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	683a      	ldr	r2, [r7, #0]
 8000166:	601a      	str	r2, [r3, #0]
  }
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4618      	mov	r0, r3
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <_ZN3Led2OnEv>:
#include "components/led.h"

void Led::On() {
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
  if (m_PinPair->IsSet()) {
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4618      	mov	r0, r3
 8000182:	f000 fe19 	bl	8000db8 <_ZN7PinPair5IsSetEv>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d004      	beq.n	8000196 <_ZN3Led2OnEv+0x22>
    this->m_PinPair->Reset();
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fdfe 	bl	8000d92 <_ZN7PinPair5ResetEv>
  }
  this->m_IsOn = true;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2201      	movs	r2, #1
 800019a:	711a      	strb	r2, [r3, #4]
}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}

080001a4 <_ZN3Led3OffEv>:

void Led::Off() {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
  if (!m_PinPair->IsSet()) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fe01 	bl	8000db8 <_ZN7PinPair5IsSetEv>
 80001b6:	4603      	mov	r3, r0
 80001b8:	f083 0301 	eor.w	r3, r3, #1
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d004      	beq.n	80001cc <_ZN3Led3OffEv+0x28>
    this->m_PinPair->Set();
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fdd0 	bl	8000d6c <_ZN7PinPair3SetEv>
  }
  this->m_IsOn = false;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2200      	movs	r2, #0
 80001d0:	711a      	strb	r2, [r3, #4]
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <_ZN3Led6ToggleEv>:

bool Led::IsOn() {
  return this->m_IsOn;
}

void Led::Toggle() {
 80001da:	b580      	push	{r7, lr}
 80001dc:	b082      	sub	sp, #8
 80001de:	af00      	add	r7, sp, #0
 80001e0:	6078      	str	r0, [r7, #4]
  this->m_PinPair->Toggle();
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fe07 	bl	8000dfa <_ZN7PinPair6ToggleEv>
  this->m_IsOn = !this->m_IsOn;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	f083 0301 	eor.w	r3, r3, #1
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	711a      	strb	r2, [r3, #4]
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <_ZN3Led9CreateLedEP7PinPair>:

Led* Led::CreateLed(PinPair* pin_pair) {
 8000202:	b590      	push	{r4, r7, lr}
 8000204:	b085      	sub	sp, #20
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
	Led* new_led = new Led(pin_pair);
 800020a:	2008      	movs	r0, #8
 800020c:	f002 ff28 	bl	8003060 <_Znwj>
 8000210:	4603      	mov	r3, r0
 8000212:	461c      	mov	r4, r3
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	4620      	mov	r0, r4
 8000218:	f7ff ff98 	bl	800014c <_ZN3LedC1EP7PinPair>
 800021c:	60fc      	str	r4, [r7, #12]
	return new_led;
 800021e:	68fb      	ldr	r3, [r7, #12]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bd90      	pop	{r4, r7, pc}

08000228 <_ZN10SegmentLedC1EPP7PinPairS1_>:
#include "pin_pair.h"
#include "components/segment_led.h"

SegmentLed::SegmentLed(PinPair* pairs[7], PinPair* control) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2200      	movs	r2, #0
 8000238:	621a      	str	r2, [r3, #32]
  for (int i = 0; i < 7; i += 1) {
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	2b06      	cmp	r3, #6
 8000242:	dc11      	bgt.n	8000268 <_ZN10SegmentLedC1EPP7PinPairS1_+0x40>
	  this->m_Led[i] = Led::CreateLed(pairs[i]);
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	4413      	add	r3, r2
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffd7 	bl	8000202 <_ZN3Led9CreateLedEP7PinPair>
 8000254:	4601      	mov	r1, r0
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	4413      	add	r3, r2
 800025e:	6059      	str	r1, [r3, #4]
  for (int i = 0; i < 7; i += 1) {
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	3301      	adds	r3, #1
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	e7ea      	b.n	800023e <_ZN10SegmentLedC1EPP7PinPairS1_+0x16>
  }
  this->m_Control = control;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	4618      	mov	r0, r3
 8000272:	3718      	adds	r7, #24
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <_ZN10SegmentLed3OffEv>:

int SegmentLed::GetCurrentNumber() {
  return this->m_Number;
}

void SegmentLed::Off() {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  this->m_Control->Set();
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fd71 	bl	8000d6c <_ZN7PinPair3SetEv>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <_ZN10SegmentLed2OnEv>:

void SegmentLed::On() {
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
	this->m_Control->Reset();
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fd77 	bl	8000d92 <_ZN7PinPair5ResetEv>
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <_ZN10SegmentLed7DisplayEi>:
		    this->m_Led[i]->Off();
		}
	}
}

void SegmentLed::Display(int number) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
  if (!this->m_Control->IsSet()) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fd7c 	bl	8000db8 <_ZN7PinPair5IsSetEv>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f083 0301 	eor.w	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	f000 8184 	beq.w	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	  switch (number) {
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	2b09      	cmp	r3, #9
 80002d2:	f200 817f 	bhi.w	80005d4 <_ZN10SegmentLed7DisplayEi+0x328>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <_ZN10SegmentLed7DisplayEi+0x30>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	08000305 	.word	0x08000305
 80002e0:	0800034d 	.word	0x0800034d
 80002e4:	08000395 	.word	0x08000395
 80002e8:	080003dd 	.word	0x080003dd
 80002ec:	08000425 	.word	0x08000425
 80002f0:	0800046d 	.word	0x0800046d
 80002f4:	080004b5 	.word	0x080004b5
 80002f8:	080004fd 	.word	0x080004fd
 80002fc:	08000545 	.word	0x08000545
 8000300:	0800058d 	.word	0x0800058d
	      case 0:
	      	m_Led[0]->On();
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff33 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->On();
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff2e 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff29 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff24 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->On();
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff1f 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[5]->On();
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff1a 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->Off();
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff2d 	bl	80001a4 <_ZN3Led3OffEv>
	        break;
 800034a:	e144      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 1:
	      	m_Led[0]->Off();
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff27 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[1]->On();
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff0a 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff05 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->Off();
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff18 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[4]->Off();
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff13 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[5]->Off();
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff0e 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[6]->Off();
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	69db      	ldr	r3, [r3, #28]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff09 	bl	80001a4 <_ZN3Led3OffEv>
	        break;
 8000392:	e120      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 2:
	      	m_Led[0]->On();
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff feeb 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->On();
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff fee6 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->Off();
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff fef9 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[3]->On();
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	691b      	ldr	r3, [r3, #16]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fedc 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->On();
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff fed7 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[5]->Off();
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff feea 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[6]->On();
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff fecd 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 80003da:	e0fc      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 3:
	      	m_Led[0]->On();
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff fec7 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->On();
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fec2 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff febd 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff feb8 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->Off();
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff fecb 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[5]->Off();
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fec6 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[6]->On();
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fea9 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 8000422:	e0d8      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 4:
	      	m_Led[0]->Off();
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff febb 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[1]->On();
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fe9e 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe99 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->Off();
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff feac 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[4]->Off();
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fea7 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[5]->On();
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fe8a 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->On();
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fe85 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 800046a:	e0b4      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 5:
	      	m_Led[0]->On();
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fe7f 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->Off();
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fe92 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[2]->On();
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe75 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff fe70 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->Off();
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff fe83 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[5]->On();
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fe66 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->On();
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fe61 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 80004b2:	e090      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 6:
	      	m_Led[0]->On();
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe5b 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->Off();
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe6e 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[2]->On();
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe51 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe4c 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->On();
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe47 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[5]->On();
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe42 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->On();
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe3d 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 80004fa:	e06c      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 7:
	      	m_Led[0]->On();
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe37 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->On();
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe32 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fe2d 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	691b      	ldr	r3, [r3, #16]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe28 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->On();
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe23 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[5]->On();
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe1e 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->On();
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe19 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 8000542:	e048      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 8:
	      	m_Led[0]->On();
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe13 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->On();
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe0e 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe09 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fe04 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->On();
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fdff 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[5]->On();
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fdfa 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->On();
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fdf5 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 800058a:	e024      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      case 9:
	      	m_Led[0]->On();
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fdef 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[1]->On();
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fdea 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[2]->On();
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fde5 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[3]->On();
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fde0 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[4]->Off();
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fdf3 	bl	80001a4 <_ZN3Led3OffEv>
	      	m_Led[5]->On();
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fdd6 	bl	8000174 <_ZN3Led2OnEv>
	      	m_Led[6]->On();
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fdd1 	bl	8000174 <_ZN3Led2OnEv>
	        break;
 80005d2:	e000      	b.n	80005d6 <_ZN10SegmentLed7DisplayEi+0x32a>
	      default:
	        break;
 80005d4:	bf00      	nop
	    }
  }
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop

080005e0 <_ZN6Button6ListenEv>:
#include <components/switch_button.h>

void Button::Listen() {
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  this->m_KeyReg2 = this->m_KeyReg1;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]
  this->m_KeyReg1 = this->m_KeyReg0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	605a      	str	r2, [r3, #4]
  this->m_KeyReg0 = HAL_GPIO_ReadPin(this->m_PinPair->GetPort(), this->m_PinPair->GetPin());
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fbe6 	bl	8000dce <_ZN7PinPair7GetPortEv>
 8000602:	4604      	mov	r4, r0
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fbeb 	bl	8000de4 <_ZN7PinPair6GetPinEv>
 800060e:	4603      	mov	r3, r0
 8000610:	4619      	mov	r1, r3
 8000612:	4620      	mov	r0, r4
 8000614:	f001 fd10 	bl	8002038 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]
  if ((m_KeyReg1 == m_KeyReg0) && (m_KeyReg1 == m_KeyReg2)) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d12e      	bne.n	800068a <_ZN6Button6ListenEv+0xaa>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d128      	bne.n	800068a <_ZN6Button6ListenEv+0xaa>
    if (m_KeyReg2 != m_KeyReg3) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d016      	beq.n	8000672 <_ZN6Button6ListenEv+0x92>
      m_KeyReg3 = m_KeyReg2;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60da      	str	r2, [r3, #12]

      if (m_KeyReg3 == 0) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d11a      	bne.n	800068a <_ZN6Button6ListenEv+0xaa>
        c_Timeout = 500;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065a:	615a      	str	r2, [r3, #20]
        this->m_Flag = true;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	741a      	strb	r2, [r3, #16]
        if (m_Callback != nullptr) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00f      	beq.n	800068a <_ZN6Button6ListenEv+0xaa>
        	m_Callback();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4798      	blx	r3
      if (c_Timeout == 0) {
        m_KeyReg3 =1;
      }
    }
  }
}
 8000670:	e00b      	b.n	800068a <_ZN6Button6ListenEv+0xaa>
      c_Timeout -= 1;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	615a      	str	r2, [r3, #20]
      if (c_Timeout == 0) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <_ZN6Button6ListenEv+0xaa>
        m_KeyReg3 =1;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2201      	movs	r2, #1
 8000688:	60da      	str	r2, [r3, #12]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}

08000692 <_ZN6Button9IsPressedEv>:

bool Button::IsPressed() {
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  if (this->m_Flag == true) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7c1b      	ldrb	r3, [r3, #16]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d104      	bne.n	80006ac <_ZN6Button9IsPressedEv+0x1a>
    this->m_Flag = false;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	741a      	strb	r2, [r3, #16]
    return true;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e000      	b.n	80006ae <_ZN6Button9IsPressedEv+0x1c>
  }
  return false;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>:
private:
  GPIO_TypeDef* m_Port;
  uint16_t      m_Pin;
  bool			m_IsSet;
public:
  PinPair(GPIO_TypeDef* port, uint16_t pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80fb      	strh	r3, [r7, #6]
	  this->m_Port = port;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	601a      	str	r2, [r3, #0]
	  this->m_Pin = pin;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	809a      	strh	r2, [r3, #4]
  }
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <_ZN6ButtonC1EP7PinPair>:
  Button(void (*Callback)(), PinPair* pin_pair) {
    this->m_Callback = Callback;
    this->m_PinPair = pin_pair;
  }

  Button(PinPair* pin_pair) {
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	741a      	strb	r2, [r3, #16]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
	  this->m_PinPair = pin_pair;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	61da      	str	r2, [r3, #28]
  }
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <_ZN5TimerC1Ev>:
private:
  bool  m_Signal = false;
  int   m_Duration = 0;
  int   m_Remaining = 0;
public:
  Timer() {}
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <_ZN12TrafficLightC1EP3LedS1_S1_P10SegmentLed>:
  SegmentLed* m_Countdown = nullptr;

  int m_CountdownDuration = 0;

public:
  TrafficLight(Led* red, Led* yellow, Led* green, SegmentLed* countdown) {
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
    m_Red = red;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	601a      	str	r2, [r3, #0]
    m_Yellow = yellow;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	605a      	str	r2, [r3, #4]
    m_Green = green;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	609a      	str	r2, [r3, #8]
    m_Countdown = countdown;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	60da      	str	r2, [r3, #12]
  }
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4618      	mov	r0, r3
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <_Z41__static_initialization_and_destruction_0ii>:
TrafficLight east(&trafficTwoRed, &trafficTwoYel, &trafficTwoGrn, &segmentFour);

/* Global variables */
int N_GRN_DURATION = 3000;
int N_RED_DURATION = 4000;
int N_YEL_DURATION = 1000;
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	f040 80f7 	bne.w	800099c <_Z41__static_initialization_and_destruction_0ii+0x200>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b4:	4293      	cmp	r3, r2
 80007b6:	f040 80f1 	bne.w	800099c <_Z41__static_initialization_and_destruction_0ii+0x200>
PinPair o_t1_red(O_T1_RED_GPIO_Port, O_T1_RED_Pin);
 80007ba:	2202      	movs	r2, #2
 80007bc:	4979      	ldr	r1, [pc, #484]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007be:	487a      	ldr	r0, [pc, #488]	; (80009a8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80007c0:	f7ff ff7a 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_t1_yel(O_T1_YEL_GPIO_Port, O_T1_YEL_Pin);
 80007c4:	2204      	movs	r2, #4
 80007c6:	4977      	ldr	r1, [pc, #476]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007c8:	4878      	ldr	r0, [pc, #480]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80007ca:	f7ff ff75 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_t1_grn(O_T1_GRN_GPIO_Port, O_T1_GRN_Pin);
 80007ce:	2208      	movs	r2, #8
 80007d0:	4974      	ldr	r1, [pc, #464]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007d2:	4877      	ldr	r0, [pc, #476]	; (80009b0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80007d4:	f7ff ff70 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_t2_red(O_T2_RED_GPIO_Port, O_T2_RED_Pin);
 80007d8:	2210      	movs	r2, #16
 80007da:	4972      	ldr	r1, [pc, #456]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007dc:	4875      	ldr	r0, [pc, #468]	; (80009b4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80007de:	f7ff ff6b 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_t2_yel(O_T2_YEL_GPIO_Port, O_T2_YEL_Pin);
 80007e2:	2220      	movs	r2, #32
 80007e4:	496f      	ldr	r1, [pc, #444]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007e6:	4874      	ldr	r0, [pc, #464]	; (80009b8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80007e8:	f7ff ff66 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_t2_grn(O_T2_GRN_GPIO_Port, O_T2_GRN_Pin);
 80007ec:	2240      	movs	r2, #64	; 0x40
 80007ee:	496d      	ldr	r1, [pc, #436]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007f0:	4872      	ldr	r0, [pc, #456]	; (80009bc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80007f2:	f7ff ff61 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair i_mode_1(I_MODE_1_GPIO_Port, I_MODE_1_Pin);
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	496a      	ldr	r1, [pc, #424]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80007fa:	4871      	ldr	r0, [pc, #452]	; (80009c0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80007fc:	f7ff ff5c 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair i_mode_2(I_MODE_2_GPIO_Port, I_MODE_2_Pin);
 8000800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000804:	4967      	ldr	r1, [pc, #412]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8000806:	486f      	ldr	r0, [pc, #444]	; (80009c4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8000808:	f7ff ff56 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair i_mode_3(I_MODE_3_GPIO_Port, I_MODE_3_Pin);
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	4964      	ldr	r1, [pc, #400]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8000812:	486d      	ldr	r0, [pc, #436]	; (80009c8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8000814:	f7ff ff50 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_sig(O_SEG1_SIG_GPIO_Port, O_SEG1_SIG_Pin);
 8000818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081c:	4961      	ldr	r1, [pc, #388]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800081e:	486b      	ldr	r0, [pc, #428]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8000820:	f7ff ff4a 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_0(O_SEG1_0_GPIO_Port, O_SEG1_0_Pin);
 8000824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000828:	495e      	ldr	r1, [pc, #376]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800082a:	4869      	ldr	r0, [pc, #420]	; (80009d0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800082c:	f7ff ff44 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_1(O_SEG1_1_GPIO_Port, O_SEG1_1_Pin);
 8000830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000834:	495b      	ldr	r1, [pc, #364]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8000836:	4867      	ldr	r0, [pc, #412]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8000838:	f7ff ff3e 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_2(O_SEG1_2_GPIO_Port, O_SEG1_2_Pin);
 800083c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000840:	4958      	ldr	r1, [pc, #352]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8000842:	4865      	ldr	r0, [pc, #404]	; (80009d8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8000844:	f7ff ff38 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_3(O_SEG1_3_GPIO_Port, O_SEG1_3_Pin);
 8000848:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084c:	4955      	ldr	r1, [pc, #340]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800084e:	4863      	ldr	r0, [pc, #396]	; (80009dc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8000850:	f7ff ff32 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_4(O_SEG1_4_GPIO_Port, O_SEG1_4_Pin);
 8000854:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000858:	4952      	ldr	r1, [pc, #328]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800085a:	4861      	ldr	r0, [pc, #388]	; (80009e0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800085c:	f7ff ff2c 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_5(O_SEG1_5_GPIO_Port, O_SEG1_5_Pin);
 8000860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000864:	495f      	ldr	r1, [pc, #380]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8000866:	4860      	ldr	r0, [pc, #384]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8000868:	f7ff ff26 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg1_6(O_SEG1_6_GPIO_Port, O_SEG1_6_Pin);
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	495c      	ldr	r1, [pc, #368]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8000872:	485e      	ldr	r0, [pc, #376]	; (80009ec <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8000874:	f7ff ff20 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_sig(O_SEG2_SIG_GPIO_Port, O_SEG2_SIG_Pin);
 8000878:	2201      	movs	r2, #1
 800087a:	495a      	ldr	r1, [pc, #360]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800087c:	485c      	ldr	r0, [pc, #368]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800087e:	f7ff ff1b 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_0(O_SEG2_0_GPIO_Port, O_SEG2_0_Pin);
 8000882:	2202      	movs	r2, #2
 8000884:	4957      	ldr	r1, [pc, #348]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8000886:	485b      	ldr	r0, [pc, #364]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8000888:	f7ff ff16 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_1(O_SEG2_1_GPIO_Port, O_SEG2_1_Pin);
 800088c:	2204      	movs	r2, #4
 800088e:	4955      	ldr	r1, [pc, #340]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8000890:	4859      	ldr	r0, [pc, #356]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8000892:	f7ff ff11 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_2(O_SEG2_2_GPIO_Port, O_SEG2_2_Pin);
 8000896:	2208      	movs	r2, #8
 8000898:	4952      	ldr	r1, [pc, #328]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800089a:	4858      	ldr	r0, [pc, #352]	; (80009fc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800089c:	f7ff ff0c 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_3(O_SEG2_3_GPIO_Port, O_SEG2_3_Pin);
 80008a0:	2210      	movs	r2, #16
 80008a2:	4950      	ldr	r1, [pc, #320]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80008a6:	f7ff ff07 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_4(O_SEG2_4_GPIO_Port, O_SEG2_4_Pin);
 80008aa:	2220      	movs	r2, #32
 80008ac:	494d      	ldr	r1, [pc, #308]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80008ae:	4855      	ldr	r0, [pc, #340]	; (8000a04 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80008b0:	f7ff ff02 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_5(O_SEG2_5_GPIO_Port, O_SEG2_5_Pin);
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	494b      	ldr	r1, [pc, #300]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80008b8:	4853      	ldr	r0, [pc, #332]	; (8000a08 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80008ba:	f7ff fefd 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg2_6(O_SEG2_6_GPIO_Port, O_SEG2_6_Pin);
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	4948      	ldr	r1, [pc, #288]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80008c2:	4852      	ldr	r0, [pc, #328]	; (8000a0c <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80008c4:	f7ff fef8 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg3_sig(O_SEG3_SIG_GPIO_Port, O_SEG3_SIG_Pin);
 80008c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008cc:	4945      	ldr	r1, [pc, #276]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80008ce:	4850      	ldr	r0, [pc, #320]	; (8000a10 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80008d0:	f7ff fef2 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
PinPair o_seg4_sig(O_SEG4_SIG_GPIO_Port, O_SEG4_SIG_Pin);
 80008d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d8:	4942      	ldr	r1, [pc, #264]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80008da:	484e      	ldr	r0, [pc, #312]	; (8000a14 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 80008dc:	f7ff feec 	bl	80006b8 <_ZN7PinPairC1EP12GPIO_TypeDeft>
Led trafficOneRed(&o_t1_red);
 80008e0:	4931      	ldr	r1, [pc, #196]	; (80009a8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80008e2:	484d      	ldr	r0, [pc, #308]	; (8000a18 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80008e4:	f7ff fc32 	bl	800014c <_ZN3LedC1EP7PinPair>
Led trafficOneYel(&o_t1_yel);
 80008e8:	4930      	ldr	r1, [pc, #192]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80008ea:	484c      	ldr	r0, [pc, #304]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80008ec:	f7ff fc2e 	bl	800014c <_ZN3LedC1EP7PinPair>
Led trafficOneGrn(&o_t1_grn);
 80008f0:	492f      	ldr	r1, [pc, #188]	; (80009b0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80008f2:	484b      	ldr	r0, [pc, #300]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80008f4:	f7ff fc2a 	bl	800014c <_ZN3LedC1EP7PinPair>
Led trafficTwoRed(&o_t2_red);
 80008f8:	492e      	ldr	r1, [pc, #184]	; (80009b4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80008fa:	484a      	ldr	r0, [pc, #296]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80008fc:	f7ff fc26 	bl	800014c <_ZN3LedC1EP7PinPair>
Led trafficTwoYel(&o_t2_yel);
 8000900:	492d      	ldr	r1, [pc, #180]	; (80009b8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8000902:	4849      	ldr	r0, [pc, #292]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8000904:	f7ff fc22 	bl	800014c <_ZN3LedC1EP7PinPair>
Led trafficTwoGrn(&o_t2_grn);
 8000908:	492c      	ldr	r1, [pc, #176]	; (80009bc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800090a:	4848      	ldr	r0, [pc, #288]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x290>)
 800090c:	f7ff fc1e 	bl	800014c <_ZN3LedC1EP7PinPair>
Button buttonChangeMode(&i_mode_1);
 8000910:	492b      	ldr	r1, [pc, #172]	; (80009c0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8000912:	4847      	ldr	r0, [pc, #284]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8000914:	f7ff fee3 	bl	80006de <_ZN6ButtonC1EP7PinPair>
Button buttonIncreaseTime(&i_mode_2);
 8000918:	492a      	ldr	r1, [pc, #168]	; (80009c4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800091a:	4846      	ldr	r0, [pc, #280]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800091c:	f7ff fedf 	bl	80006de <_ZN6ButtonC1EP7PinPair>
Button buttonSet(&i_mode_3);
 8000920:	4929      	ldr	r1, [pc, #164]	; (80009c8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8000922:	4845      	ldr	r0, [pc, #276]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8000924:	f7ff fedb 	bl	80006de <_ZN6ButtonC1EP7PinPair>
SegmentLed segmentOne(segmentOnePins, &o_seg1_sig);
 8000928:	4a28      	ldr	r2, [pc, #160]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800092a:	4944      	ldr	r1, [pc, #272]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800092c:	4844      	ldr	r0, [pc, #272]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800092e:	f7ff fc7b 	bl	8000228 <_ZN10SegmentLedC1EPP7PinPairS1_>
SegmentLed segmentTwo(segmentTwoPins, &o_seg2_sig);
 8000932:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8000934:	4943      	ldr	r1, [pc, #268]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8000938:	f7ff fc76 	bl	8000228 <_ZN10SegmentLedC1EPP7PinPairS1_>
SegmentLed segmentThree(segmentOnePins, &o_seg3_sig);
 800093c:	4a34      	ldr	r2, [pc, #208]	; (8000a10 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800093e:	493f      	ldr	r1, [pc, #252]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8000940:	4842      	ldr	r0, [pc, #264]	; (8000a4c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8000942:	f7ff fc71 	bl	8000228 <_ZN10SegmentLedC1EPP7PinPairS1_>
SegmentLed segmentFour(segmentTwoPins, &o_seg4_sig);
 8000946:	4a33      	ldr	r2, [pc, #204]	; (8000a14 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8000948:	493e      	ldr	r1, [pc, #248]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800094a:	4841      	ldr	r0, [pc, #260]	; (8000a50 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800094c:	f7ff fc6c 	bl	8000228 <_ZN10SegmentLedC1EPP7PinPairS1_>
Timer timerTraffic;
 8000950:	4840      	ldr	r0, [pc, #256]	; (8000a54 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8000952:	f7ff fee8 	bl	8000726 <_ZN5TimerC1Ev>
Timer secondTimer;
 8000956:	4840      	ldr	r0, [pc, #256]	; (8000a58 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8000958:	f7ff fee5 	bl	8000726 <_ZN5TimerC1Ev>
TrafficLight north(&trafficOneRed, &trafficOneYel, &trafficOneGrn, &segmentOne);
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8000962:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8000964:	492c      	ldr	r1, [pc, #176]	; (8000a18 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8000966:	483d      	ldr	r0, [pc, #244]	; (8000a5c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8000968:	f7ff fef0 	bl	800074c <_ZN12TrafficLightC1EP3LedS1_S1_P10SegmentLed>
TrafficLight west(&trafficTwoRed, &trafficTwoYel, &trafficTwoGrn, &segmentTwo);
 800096c:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8000972:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8000974:	492b      	ldr	r1, [pc, #172]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8000976:	483a      	ldr	r0, [pc, #232]	; (8000a60 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8000978:	f7ff fee8 	bl	800074c <_ZN12TrafficLightC1EP3LedS1_S1_P10SegmentLed>
TrafficLight south(&trafficOneRed, &trafficOneYel, &trafficOneGrn, &segmentThree);
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8000984:	4924      	ldr	r1, [pc, #144]	; (8000a18 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8000986:	4837      	ldr	r0, [pc, #220]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8000988:	f7ff fee0 	bl	800074c <_ZN12TrafficLightC1EP3LedS1_S1_P10SegmentLed>
TrafficLight east(&trafficTwoRed, &trafficTwoYel, &trafficTwoGrn, &segmentFour);
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8000994:	4923      	ldr	r1, [pc, #140]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8000996:	4834      	ldr	r0, [pc, #208]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8000998:	f7ff fed8 	bl	800074c <_ZN12TrafficLightC1EP3LedS1_S1_P10SegmentLed>
int N_YEL_DURATION = 1000;
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40010800 	.word	0x40010800
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	200000d8 	.word	0x200000d8
 80009b0:	200000e0 	.word	0x200000e0
 80009b4:	200000e8 	.word	0x200000e8
 80009b8:	200000f0 	.word	0x200000f0
 80009bc:	200000f8 	.word	0x200000f8
 80009c0:	20000100 	.word	0x20000100
 80009c4:	20000108 	.word	0x20000108
 80009c8:	20000110 	.word	0x20000110
 80009cc:	20000118 	.word	0x20000118
 80009d0:	20000120 	.word	0x20000120
 80009d4:	20000128 	.word	0x20000128
 80009d8:	20000130 	.word	0x20000130
 80009dc:	20000138 	.word	0x20000138
 80009e0:	20000140 	.word	0x20000140
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	20000148 	.word	0x20000148
 80009ec:	20000150 	.word	0x20000150
 80009f0:	20000158 	.word	0x20000158
 80009f4:	20000160 	.word	0x20000160
 80009f8:	20000168 	.word	0x20000168
 80009fc:	20000170 	.word	0x20000170
 8000a00:	20000178 	.word	0x20000178
 8000a04:	20000180 	.word	0x20000180
 8000a08:	20000188 	.word	0x20000188
 8000a0c:	20000190 	.word	0x20000190
 8000a10:	20000198 	.word	0x20000198
 8000a14:	200001a0 	.word	0x200001a0
 8000a18:	200001a8 	.word	0x200001a8
 8000a1c:	200001b0 	.word	0x200001b0
 8000a20:	200001b8 	.word	0x200001b8
 8000a24:	200001c0 	.word	0x200001c0
 8000a28:	200001c8 	.word	0x200001c8
 8000a2c:	200001d0 	.word	0x200001d0
 8000a30:	200001d8 	.word	0x200001d8
 8000a34:	200001f8 	.word	0x200001f8
 8000a38:	20000218 	.word	0x20000218
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000238 	.word	0x20000238
 8000a44:	2000001c 	.word	0x2000001c
 8000a48:	2000025c 	.word	0x2000025c
 8000a4c:	20000280 	.word	0x20000280
 8000a50:	200002a4 	.word	0x200002a4
 8000a54:	200002c8 	.word	0x200002c8
 8000a58:	200002d4 	.word	0x200002d4
 8000a5c:	200002e0 	.word	0x200002e0
 8000a60:	200002f4 	.word	0x200002f4
 8000a64:	20000308 	.word	0x20000308
 8000a68:	2000031c 	.word	0x2000031c

08000a6c <_GLOBAL__sub_I_o_t1_red>:
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fe91 	bl	800079c <_Z41__static_initialization_and_destruction_0ii>
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a80:	f000 ffee 	bl	8001a60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a84:	f000 f848 	bl	8000b18 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_TIM2_Init();
 8000a88:	f000 f88c 	bl	8000ba4 <_ZL12MX_TIM2_Initv>
	MX_GPIO_Init();
 8000a8c:	f000 f8e6 	bl	8000c5c <_ZL12MX_GPIO_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2) ;
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <main+0x44>)
 8000a92:	f001 ff51 	bl	8002938 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	timerTraffic.Set(N_RED_DURATION);
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <main+0x48>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <main+0x4c>)
 8000a9e:	f000 fa97 	bl	8000fd0 <_ZN5Timer3SetEi>
	timerTraffic.Reset();
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x4c>)
 8000aa4:	f000 fab2 	bl	800100c <_ZN5Timer5ResetEv>

	secondTimer.Set(1000);
 8000aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <main+0x50>)
 8000aae:	f000 fa8f 	bl	8000fd0 <_ZN5Timer3SetEi>
	secondTimer.Reset();
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <main+0x50>)
 8000ab4:	f000 faaa 	bl	800100c <_ZN5Timer5ResetEv>

	while (1) {
		/* USER CODE END WHILE */
		controller.Work();
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <main+0x54>)
 8000aba:	f000 fb0b 	bl	80010d4 <_ZN10Controller4WorkEv>
 8000abe:	e7fb      	b.n	8000ab8 <main+0x3c>
 8000ac0:	20000330 	.word	0x20000330
 8000ac4:	2000003c 	.word	0x2000003c
 8000ac8:	200002c8 	.word	0x200002c8
 8000acc:	200002d4 	.word	0x200002d4
 8000ad0:	20000378 	.word	0x20000378

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	timerTraffic.Breath();
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ade:	f000 faa2 	bl	8001026 <_ZN5Timer6BreathEv>
	secondTimer.Breath();
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ae4:	f000 fa9f 	bl	8001026 <_ZN5Timer6BreathEv>

	/* BUTTONS */
	buttonChangeMode.Listen();
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000aea:	f7ff fd79 	bl	80005e0 <_ZN6Button6ListenEv>
	buttonIncreaseTime.Listen();
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000af0:	f7ff fd76 	bl	80005e0 <_ZN6Button6ListenEv>
	buttonSet.Listen();
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000af6:	f7ff fd73 	bl	80005e0 <_ZN6Button6ListenEv>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200002c8 	.word	0x200002c8
 8000b08:	200002d4 	.word	0x200002d4
 8000b0c:	200001d8 	.word	0x200001d8
 8000b10:	200001f8 	.word	0x200001f8
 8000b14:	20000218 	.word	0x20000218

08000b18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b090      	sub	sp, #64	; 0x40
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	2228      	movs	r2, #40	; 0x28
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 faee 	bl	8003108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b42:	2310      	movs	r3, #16
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 faba 	bl	80020c8 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000b64:	f000 f8de 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fd23 	bl	80025cc <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8000b96:	f000 f8c5 	bl	8000d24 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3740      	adds	r7, #64	; 0x40
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bd8:	2209      	movs	r2, #9
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be8:	481b      	ldr	r0, [pc, #108]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bea:	f001 fe55 	bl	8002898 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf14      	ite	ne
 8000bf4:	2301      	movne	r3, #1
 8000bf6:	2300      	moveq	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000bfe:	f000 f891 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c10:	f001 ffe6 	bl	8002be0 <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000c24:	f000 f87e 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c36:	f002 f9a9 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000c4a:	f000 f86b 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000330 	.word	0x20000330

08000c5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_T1_RED_Pin|O_T1_YEL_Pin|O_T1_GRN_Pin|O_T2_RED_Pin
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f64f 417e 	movw	r1, #64638	; 0xfc7e
 8000ca6:	481d      	ldr	r0, [pc, #116]	; (8000d1c <_ZL12MX_GPIO_Initv+0xc0>)
 8000ca8:	f001 f9dd 	bl	8002066 <HAL_GPIO_WritePin>
                          |O_T2_YEL_Pin|O_T2_GRN_Pin|O_SEG1_SIG_Pin|O_SEG1_0_Pin
                          |O_SEG1_1_Pin|O_SEG1_2_Pin|O_SEG1_3_Pin|O_SEG1_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O_SEG2_SIG_Pin|O_SEG2_0_Pin|O_SEG2_1_Pin|O_SEG3_SIG_Pin
 8000cac:	2200      	movs	r2, #0
 8000cae:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000cb4:	f001 f9d7 	bl	8002066 <HAL_GPIO_WritePin>
                          |O_SEG2_5_Pin|O_SEG2_6_Pin|O_SEG1_5_Pin|O_SEG1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : O_T1_RED_Pin O_T1_YEL_Pin O_T1_GRN_Pin O_T2_RED_Pin
                           O_T2_YEL_Pin O_T2_GRN_Pin O_SEG1_SIG_Pin O_SEG1_0_Pin
                           O_SEG1_1_Pin O_SEG1_2_Pin O_SEG1_3_Pin O_SEG1_4_Pin */
  GPIO_InitStruct.Pin = O_T1_RED_Pin|O_T1_YEL_Pin|O_T1_GRN_Pin|O_T2_RED_Pin
 8000cb8:	f64f 437e 	movw	r3, #64638	; 0xfc7e
 8000cbc:	60bb      	str	r3, [r7, #8]
                          |O_T2_YEL_Pin|O_T2_GRN_Pin|O_SEG1_SIG_Pin|O_SEG1_0_Pin
                          |O_SEG1_1_Pin|O_SEG1_2_Pin|O_SEG1_3_Pin|O_SEG1_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <_ZL12MX_GPIO_Initv+0xc0>)
 8000cd2:	f001 f835 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : I_MODE_1_Pin I_MODE_2_Pin I_MODE_3_Pin */
  GPIO_InitStruct.Pin = I_MODE_1_Pin|I_MODE_2_Pin|I_MODE_3_Pin;
 8000cd6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <_ZL12MX_GPIO_Initv+0xc0>)
 8000cec:	f001 f828 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : O_SEG2_SIG_Pin O_SEG2_0_Pin O_SEG2_1_Pin O_SEG3_SIG_Pin
                           O_SEG4_SIG_Pin O_SEG2_2_Pin O_SEG2_3_Pin O_SEG2_4_Pin
                           O_SEG2_5_Pin O_SEG2_6_Pin O_SEG1_5_Pin O_SEG1_6_Pin */
  GPIO_InitStruct.Pin = O_SEG2_SIG_Pin|O_SEG2_0_Pin|O_SEG2_1_Pin|O_SEG3_SIG_Pin
 8000cf0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cf4:	60bb      	str	r3, [r7, #8]
                          |O_SEG4_SIG_Pin|O_SEG2_2_Pin|O_SEG2_3_Pin|O_SEG2_4_Pin
                          |O_SEG2_5_Pin|O_SEG2_6_Pin|O_SEG1_5_Pin|O_SEG1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000d0a:	f001 f819 	bl	8001d40 <HAL_GPIO_Init>

}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d102      	bne.n	8000d50 <_Z41__static_initialization_and_destruction_0ii+0x20>
Controller controller;
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000d4c:	f000 f9b1 	bl	80010b2 <_ZN10ControllerC1Ev>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000378 	.word	0x20000378

08000d5c <_GLOBAL__sub_I_htim2>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff ffe3 	bl	8000d30 <_Z41__static_initialization_and_destruction_0ii>
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN7PinPair3SetEv>:
#include "pin_pair.h"

void PinPair::Set() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 HAL_GPIO_WritePin(this->m_Port, this->m_Pin, GPIO_PinState::GPIO_PIN_SET);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f001 f971 	bl	8002066 <HAL_GPIO_WritePin>
 this->m_IsSet = true;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	719a      	strb	r2, [r3, #6]
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_ZN7PinPair5ResetEv>:

void PinPair::Reset() {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(this->m_Port, this->m_Pin, GPIO_PinState::GPIO_PIN_RESET);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	889b      	ldrh	r3, [r3, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	f001 f95e 	bl	8002066 <HAL_GPIO_WritePin>
  this->m_IsSet = false;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	719a      	strb	r2, [r3, #6]
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_ZN7PinPair5IsSetEv>:

bool PinPair::IsSet() {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	return this->m_IsSet;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	799b      	ldrb	r3, [r3, #6]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <_ZN7PinPair7GetPortEv>:

GPIO_TypeDef* PinPair::GetPort() {
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  return this->m_Port;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <_ZN7PinPair6GetPinEv>:

uint16_t PinPair::GetPin() {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  return this->m_Pin;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	889b      	ldrh	r3, [r3, #4]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <_ZN7PinPair6ToggleEv>:

void PinPair::Toggle() {
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(this->m_Port, this->m_Pin);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	889b      	ldrh	r3, [r3, #4]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	f001 f942 	bl	8002096 <HAL_GPIO_TogglePin>
  this->m_IsSet = this->m_IsSet;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	799a      	ldrb	r2, [r3, #6]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	719a      	strb	r2, [r3, #6]
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_MspInit+0x40>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_MspInit+0x40>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_MspInit+0x40>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_MspInit+0x40>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_MspInit+0x40>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_MspInit+0x40>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d113      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	201c      	movs	r0, #28
 8000e98:	f000 ff1b 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9c:	201c      	movs	r0, #28
 8000e9e:	f000 ff34 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 fdf9 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM2_IRQHandler+0x10>)
 8000f06:	f001 fd63 	bl	80029d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000330 	.word	0x20000330

08000f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
	return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <_kill>:

int _kill(int pid, int sig)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f2c:	f002 f8ba 	bl	80030a4 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2216      	movs	r2, #22
 8000f34:	601a      	str	r2, [r3, #0]
	return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_exit>:

void _exit (int status)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffe7 	bl	8000f22 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f54:	e7fe      	b.n	8000f54 <_exit+0x12>
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f002 f88c 	bl	80030a4 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20002800 	.word	0x20002800
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	2000037c 	.word	0x2000037c
 8000fc0:	200003a0 	.word	0x200003a0

08000fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <_ZN5Timer3SetEi>:
#include "timer.h"

void Timer::Set(int duration) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  this->m_Duration = duration / 10;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <_ZN5Timer3SetEi+0x38>)
 8000fde:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe2:	1092      	asrs	r2, r2, #2
 8000fe4:	17db      	asrs	r3, r3, #31
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	605a      	str	r2, [r3, #4]
  if (this->m_Remaining > this->m_Duration) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dd02      	ble.n	8000ffe <_ZN5Timer3SetEi+0x2e>
	  Reset();
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f807 	bl	800100c <_ZN5Timer5ResetEv>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	66666667 	.word	0x66666667

0800100c <_ZN5Timer5ResetEv>:

void Timer::Reset() {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  this->m_Remaining = this->m_Duration;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <_ZN5Timer6BreathEv>:

void Timer::Breath() {
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  if (this->m_Remaining > 0) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dd0e      	ble.n	8001054 <_ZN5Timer6BreathEv+0x2e>
    this->m_Remaining -= 1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
    if (this->m_Remaining == 0) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <_ZN5Timer6BreathEv+0x2e>
      this->m_Signal = true;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
      Reset();
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffdc 	bl	800100c <_ZN5Timer5ResetEv>
    }
  }
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN5Timer9HasSignalEv>:

bool Timer::HasSignal() {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if (m_Signal) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <_ZN5Timer9HasSignalEv+0x1a>
	  m_Signal = false;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	  return true;
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <_ZN5Timer9HasSignalEv+0x1c>
  }
  return false;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <_ZN10Controller8GetStateEv>:
#include "services/controller.h"
#include "global.h"

int Controller::GetState() {
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return STATE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <_ZN10Controller8SetStateEi>:

void Controller::SetState(int newState) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	STATE = newState;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <_ZN10ControllerC1Ev>:

Controller::Controller() {
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
	STATE = INIT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
	...

080010d4 <_ZN10Controller4WorkEv>:

int l_N_YEL_DURATION = N_YEL_DURATION;
int l_N_GRN_DURATION = N_GRN_DURATION;

void Controller::Work() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	switch (GetState()) {
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffd0 	bl	8001082 <_ZN10Controller8GetStateEv>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	f200 8388 	bhi.w	80017fa <_ZN10Controller4WorkEv+0x726>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <_ZN10Controller4WorkEv+0x1c>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800110d 	.word	0x0800110d
 80010f4:	080011f7 	.word	0x080011f7
 80010f8:	080012db 	.word	0x080012db
 80010fc:	080013f1 	.word	0x080013f1
 8001100:	080014bd 	.word	0x080014bd
 8001104:	080016ed 	.word	0x080016ed
 8001108:	080015a1 	.word	0x080015a1
	case INIT:
		north.Switch(RED);
 800110c:	2100      	movs	r1, #0
 800110e:	48ac      	ldr	r0, [pc, #688]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 8001110:	f000 fbbc 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		west.Switch(GREEN);
 8001114:	2101      	movs	r1, #1
 8001116:	48ab      	ldr	r0, [pc, #684]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 8001118:	f000 fbb8 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		/*
		 * North RED
		 * West GREEN
		 */
		timerTraffic.Set(N_GRN_DURATION);
 800111c:	4baa      	ldr	r3, [pc, #680]	; (80013c8 <_ZN10Controller4WorkEv+0x2f4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	48aa      	ldr	r0, [pc, #680]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 8001124:	f7ff ff54 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Setting the countdown 7SEG */
		north.SetCountdown(N_RED_DURATION / 1000);
 8001128:	4ba9      	ldr	r3, [pc, #676]	; (80013d0 <_ZN10Controller4WorkEv+0x2fc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4aa9      	ldr	r2, [pc, #676]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 800112e:	fb82 1203 	smull	r1, r2, r2, r3
 8001132:	1192      	asrs	r2, r2, #6
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	4619      	mov	r1, r3
 800113a:	48a1      	ldr	r0, [pc, #644]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 800113c:	f000 fc12 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		south.SetCountdown(N_RED_DURATION / 1000);
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <_ZN10Controller4WorkEv+0x2fc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4aa3      	ldr	r2, [pc, #652]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	1192      	asrs	r2, r2, #6
 800114c:	17db      	asrs	r3, r3, #31
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4619      	mov	r1, r3
 8001152:	48a1      	ldr	r0, [pc, #644]	; (80013d8 <_ZN10Controller4WorkEv+0x304>)
 8001154:	f000 fc06 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		west.SetCountdown(N_GRN_DURATION / 1000);
 8001158:	4b9b      	ldr	r3, [pc, #620]	; (80013c8 <_ZN10Controller4WorkEv+0x2f4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a9d      	ldr	r2, [pc, #628]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 800115e:	fb82 1203 	smull	r1, r2, r2, r3
 8001162:	1192      	asrs	r2, r2, #6
 8001164:	17db      	asrs	r3, r3, #31
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	4619      	mov	r1, r3
 800116a:	4896      	ldr	r0, [pc, #600]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 800116c:	f000 fbfa 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		east.SetCountdown(N_GRN_DURATION / 1000);
 8001170:	4b95      	ldr	r3, [pc, #596]	; (80013c8 <_ZN10Controller4WorkEv+0x2f4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a97      	ldr	r2, [pc, #604]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001176:	fb82 1203 	smull	r1, r2, r2, r3
 800117a:	1192      	asrs	r2, r2, #6
 800117c:	17db      	asrs	r3, r3, #31
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4619      	mov	r1, r3
 8001182:	4896      	ldr	r0, [pc, #600]	; (80013dc <_ZN10Controller4WorkEv+0x308>)
 8001184:	f000 fbee 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		/* Refresh the countdown */
		if (secondTimer.HasSignal()) {
 8001188:	4895      	ldr	r0, [pc, #596]	; (80013e0 <_ZN10Controller4WorkEv+0x30c>)
 800118a:	f7ff ff67 	bl	800105c <_ZN5Timer9HasSignalEv>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <_ZN10Controller4WorkEv+0xd8>
			north.RefreshCountdown();
 8001194:	488a      	ldr	r0, [pc, #552]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 8001196:	f000 fc02 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			south.RefreshCountdown();
 800119a:	488f      	ldr	r0, [pc, #572]	; (80013d8 <_ZN10Controller4WorkEv+0x304>)
 800119c:	f000 fbff 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			west.RefreshCountdown();
 80011a0:	4888      	ldr	r0, [pc, #544]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 80011a2:	f000 fbfc 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			east.RefreshCountdown();
 80011a6:	488d      	ldr	r0, [pc, #564]	; (80013dc <_ZN10Controller4WorkEv+0x308>)
 80011a8:	f000 fbf9 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
		}

		/* Check button */
		if (buttonChangeMode.IsPressed()) {
 80011ac:	488d      	ldr	r0, [pc, #564]	; (80013e4 <_ZN10Controller4WorkEv+0x310>)
 80011ae:	f7ff fa70 	bl	8000692 <_ZN6Button9IsPressedEv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d012      	beq.n	80011de <_ZN10Controller4WorkEv+0x10a>
			north.Switch(YELLOW);
 80011b8:	2102      	movs	r1, #2
 80011ba:	4881      	ldr	r0, [pc, #516]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 80011bc:	f000 fb66 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			west.Switch(YELLOW);
 80011c0:	2102      	movs	r1, #2
 80011c2:	4880      	ldr	r0, [pc, #512]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 80011c4:	f000 fb62 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			timerTraffic.Reset();
 80011c8:	4880      	ldr	r0, [pc, #512]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 80011ca:	f7ff ff1f 	bl	800100c <_ZN5Timer5ResetEv>
			l_N_YEL_DURATION = N_YEL_DURATION;
 80011ce:	4b86      	ldr	r3, [pc, #536]	; (80013e8 <_ZN10Controller4WorkEv+0x314>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a86      	ldr	r2, [pc, #536]	; (80013ec <_ZN10Controller4WorkEv+0x318>)
 80011d4:	6013      	str	r3, [r2, #0]
			SetState(MODE_CHANGE_YEL);
 80011d6:	2106      	movs	r1, #6
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff5d 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 80011de:	487b      	ldr	r0, [pc, #492]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 80011e0:	f7ff ff3c 	bl	800105c <_ZN5Timer9HasSignalEv>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 82fa 	beq.w	80017e0 <_ZN10Controller4WorkEv+0x70c>
			SetState(N_RED_W_YEL);
 80011ec:	2104      	movs	r1, #4
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff52 	bl	8001098 <_ZN10Controller8SetStateEi>
		}
		break;
 80011f4:	e2f4      	b.n	80017e0 <_ZN10Controller4WorkEv+0x70c>
	case N_GRN_W_RED:
		north.Switch(GREEN);
 80011f6:	2101      	movs	r1, #1
 80011f8:	4871      	ldr	r0, [pc, #452]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 80011fa:	f000 fb47 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		west.Switch(RED);
 80011fe:	2100      	movs	r1, #0
 8001200:	4870      	ldr	r0, [pc, #448]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 8001202:	f000 fb43 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		/*
		 * North GREEN
		 * West RED
		 */
		timerTraffic.Set(N_GRN_DURATION);
 8001206:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <_ZN10Controller4WorkEv+0x2f4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	486f      	ldr	r0, [pc, #444]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 800120e:	f7ff fedf 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Setting the countdown 7SEG */
		north.SetCountdown(N_GRN_DURATION / 1000);
 8001212:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <_ZN10Controller4WorkEv+0x2f4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6f      	ldr	r2, [pc, #444]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001218:	fb82 1203 	smull	r1, r2, r2, r3
 800121c:	1192      	asrs	r2, r2, #6
 800121e:	17db      	asrs	r3, r3, #31
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4619      	mov	r1, r3
 8001224:	4866      	ldr	r0, [pc, #408]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 8001226:	f000 fb9d 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		south.SetCountdown(N_GRN_DURATION / 1000);
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <_ZN10Controller4WorkEv+0x2f4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a69      	ldr	r2, [pc, #420]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001230:	fb82 1203 	smull	r1, r2, r2, r3
 8001234:	1192      	asrs	r2, r2, #6
 8001236:	17db      	asrs	r3, r3, #31
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4619      	mov	r1, r3
 800123c:	4866      	ldr	r0, [pc, #408]	; (80013d8 <_ZN10Controller4WorkEv+0x304>)
 800123e:	f000 fb91 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		west.SetCountdown(N_RED_DURATION / 1000);
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <_ZN10Controller4WorkEv+0x2fc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a63      	ldr	r2, [pc, #396]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1192      	asrs	r2, r2, #6
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4619      	mov	r1, r3
 8001254:	485b      	ldr	r0, [pc, #364]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 8001256:	f000 fb85 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		east.SetCountdown(N_RED_DURATION / 1000);
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <_ZN10Controller4WorkEv+0x2fc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a5d      	ldr	r2, [pc, #372]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1192      	asrs	r2, r2, #6
 8001266:	17db      	asrs	r3, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4619      	mov	r1, r3
 800126c:	485b      	ldr	r0, [pc, #364]	; (80013dc <_ZN10Controller4WorkEv+0x308>)
 800126e:	f000 fb79 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		/* Refresh the countdown */
		if (secondTimer.HasSignal()) {
 8001272:	485b      	ldr	r0, [pc, #364]	; (80013e0 <_ZN10Controller4WorkEv+0x30c>)
 8001274:	f7ff fef2 	bl	800105c <_ZN5Timer9HasSignalEv>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <_ZN10Controller4WorkEv+0x1c2>
			north.RefreshCountdown();
 800127e:	4850      	ldr	r0, [pc, #320]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 8001280:	f000 fb8d 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			south.RefreshCountdown();
 8001284:	4854      	ldr	r0, [pc, #336]	; (80013d8 <_ZN10Controller4WorkEv+0x304>)
 8001286:	f000 fb8a 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			west.RefreshCountdown();
 800128a:	484e      	ldr	r0, [pc, #312]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 800128c:	f000 fb87 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			east.RefreshCountdown();
 8001290:	4852      	ldr	r0, [pc, #328]	; (80013dc <_ZN10Controller4WorkEv+0x308>)
 8001292:	f000 fb84 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
		}

		/* Check button */
		if (buttonChangeMode.IsPressed()) {
 8001296:	4853      	ldr	r0, [pc, #332]	; (80013e4 <_ZN10Controller4WorkEv+0x310>)
 8001298:	f7ff f9fb 	bl	8000692 <_ZN6Button9IsPressedEv>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00f      	beq.n	80012c2 <_ZN10Controller4WorkEv+0x1ee>
			north.Switch(YELLOW);
 80012a2:	2102      	movs	r1, #2
 80012a4:	4846      	ldr	r0, [pc, #280]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 80012a6:	f000 faf1 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			west.Switch(YELLOW);
 80012aa:	2102      	movs	r1, #2
 80012ac:	4845      	ldr	r0, [pc, #276]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 80012ae:	f000 faed 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			l_N_YEL_DURATION = N_YEL_DURATION;
 80012b2:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <_ZN10Controller4WorkEv+0x314>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a4d      	ldr	r2, [pc, #308]	; (80013ec <_ZN10Controller4WorkEv+0x318>)
 80012b8:	6013      	str	r3, [r2, #0]
			SetState(MODE_CHANGE_YEL);
 80012ba:	2106      	movs	r1, #6
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff feeb 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 80012c2:	4842      	ldr	r0, [pc, #264]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 80012c4:	f7ff feca 	bl	800105c <_ZN5Timer9HasSignalEv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 828a 	beq.w	80017e4 <_ZN10Controller4WorkEv+0x710>
			SetState(N_YEL_W_RED);
 80012d0:	2102      	movs	r1, #2
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fee0 	bl	8001098 <_ZN10Controller8SetStateEi>
		}
		break;
 80012d8:	e284      	b.n	80017e4 <_ZN10Controller4WorkEv+0x710>
	case N_YEL_W_RED:
		north.Switch(YELLOW);
 80012da:	2102      	movs	r1, #2
 80012dc:	4838      	ldr	r0, [pc, #224]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 80012de:	f000 fad5 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		west.Switch(RED);
 80012e2:	2100      	movs	r1, #0
 80012e4:	4837      	ldr	r0, [pc, #220]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 80012e6:	f000 fad1 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		/*
		 * North YELLOW
		 * West RED
		 */
		timerTraffic.Set(N_YEL_DURATION);
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <_ZN10Controller4WorkEv+0x314>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 80012f2:	f7ff fe6d 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Setting the countdown 7SEG */
		north.SetCountdown(N_YEL_DURATION / 1000);
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <_ZN10Controller4WorkEv+0x314>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 80012fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001300:	1192      	asrs	r2, r2, #6
 8001302:	17db      	asrs	r3, r3, #31
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	4619      	mov	r1, r3
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 800130a:	f000 fb2b 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		south.SetCountdown(N_YEL_DURATION / 1000);
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <_ZN10Controller4WorkEv+0x314>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001314:	fb82 1203 	smull	r1, r2, r2, r3
 8001318:	1192      	asrs	r2, r2, #6
 800131a:	17db      	asrs	r3, r3, #31
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	4619      	mov	r1, r3
 8001320:	482d      	ldr	r0, [pc, #180]	; (80013d8 <_ZN10Controller4WorkEv+0x304>)
 8001322:	f000 fb1f 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		west.SetCountdown(N_RED_DURATION / 1000);
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <_ZN10Controller4WorkEv+0x2fc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 800132c:	fb82 1203 	smull	r1, r2, r2, r3
 8001330:	1192      	asrs	r2, r2, #6
 8001332:	17db      	asrs	r3, r3, #31
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4619      	mov	r1, r3
 8001338:	4822      	ldr	r0, [pc, #136]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 800133a:	f000 fb13 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		east.SetCountdown(N_RED_DURATION / 1000);
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <_ZN10Controller4WorkEv+0x2fc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <_ZN10Controller4WorkEv+0x300>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1192      	asrs	r2, r2, #6
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4619      	mov	r1, r3
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <_ZN10Controller4WorkEv+0x308>)
 8001352:	f000 fb07 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		/* Refresh the countdown */
		if (secondTimer.HasSignal()) {
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <_ZN10Controller4WorkEv+0x30c>)
 8001358:	f7ff fe80 	bl	800105c <_ZN5Timer9HasSignalEv>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <_ZN10Controller4WorkEv+0x2a6>
			north.RefreshCountdown();
 8001362:	4817      	ldr	r0, [pc, #92]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 8001364:	f000 fb1b 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			south.RefreshCountdown();
 8001368:	481b      	ldr	r0, [pc, #108]	; (80013d8 <_ZN10Controller4WorkEv+0x304>)
 800136a:	f000 fb18 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			west.RefreshCountdown();
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 8001370:	f000 fb15 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			east.RefreshCountdown();
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <_ZN10Controller4WorkEv+0x308>)
 8001376:	f000 fb12 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
		}

		/* Check button */
		if (buttonChangeMode.IsPressed()) {
 800137a:	481a      	ldr	r0, [pc, #104]	; (80013e4 <_ZN10Controller4WorkEv+0x310>)
 800137c:	f7ff f989 	bl	8000692 <_ZN6Button9IsPressedEv>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00f      	beq.n	80013a6 <_ZN10Controller4WorkEv+0x2d2>
			north.Switch(YELLOW);
 8001386:	2102      	movs	r1, #2
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <_ZN10Controller4WorkEv+0x2ec>)
 800138a:	f000 fa7f 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			west.Switch(YELLOW);
 800138e:	2102      	movs	r1, #2
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <_ZN10Controller4WorkEv+0x2f0>)
 8001392:	f000 fa7b 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			l_N_YEL_DURATION = N_YEL_DURATION;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <_ZN10Controller4WorkEv+0x314>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <_ZN10Controller4WorkEv+0x318>)
 800139c:	6013      	str	r3, [r2, #0]
			SetState(MODE_CHANGE_YEL);
 800139e:	2106      	movs	r1, #6
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fe79 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <_ZN10Controller4WorkEv+0x2f8>)
 80013a8:	f7ff fe58 	bl	800105c <_ZN5Timer9HasSignalEv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 821a 	beq.w	80017e8 <_ZN10Controller4WorkEv+0x714>
			SetState(N_RED_W_GRN);
 80013b4:	2103      	movs	r1, #3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fe6e 	bl	8001098 <_ZN10Controller8SetStateEi>
		}
		break;
 80013bc:	e214      	b.n	80017e8 <_ZN10Controller4WorkEv+0x714>
 80013be:	bf00      	nop
 80013c0:	200002e0 	.word	0x200002e0
 80013c4:	200002f4 	.word	0x200002f4
 80013c8:	20000038 	.word	0x20000038
 80013cc:	200002c8 	.word	0x200002c8
 80013d0:	2000003c 	.word	0x2000003c
 80013d4:	10624dd3 	.word	0x10624dd3
 80013d8:	20000308 	.word	0x20000308
 80013dc:	2000031c 	.word	0x2000031c
 80013e0:	200002d4 	.word	0x200002d4
 80013e4:	200001d8 	.word	0x200001d8
 80013e8:	20000040 	.word	0x20000040
 80013ec:	20000380 	.word	0x20000380
	case N_RED_W_GRN:
		north.Switch(RED);
 80013f0:	2100      	movs	r1, #0
 80013f2:	48ad      	ldr	r0, [pc, #692]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 80013f4:	f000 fa4a 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		west.Switch(GREEN);
 80013f8:	2101      	movs	r1, #1
 80013fa:	48ac      	ldr	r0, [pc, #688]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 80013fc:	f000 fa46 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		/*
		 * North RED
		 * West GREEN
		 */
		timerTraffic.Set(N_GRN_DURATION);
 8001400:	4bab      	ldr	r3, [pc, #684]	; (80016b0 <_ZN10Controller4WorkEv+0x5dc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	48ab      	ldr	r0, [pc, #684]	; (80016b4 <_ZN10Controller4WorkEv+0x5e0>)
 8001408:	f7ff fde2 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Setting the countdown 7SEG */
		north.SetCountdown(N_RED_DURATION / 1000);
 800140c:	4baa      	ldr	r3, [pc, #680]	; (80016b8 <_ZN10Controller4WorkEv+0x5e4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4aaa      	ldr	r2, [pc, #680]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 8001412:	fb82 1203 	smull	r1, r2, r2, r3
 8001416:	1192      	asrs	r2, r2, #6
 8001418:	17db      	asrs	r3, r3, #31
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4619      	mov	r1, r3
 800141e:	48a2      	ldr	r0, [pc, #648]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 8001420:	f000 faa0 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		south.SetCountdown(N_RED_DURATION / 1000);
 8001424:	4ba4      	ldr	r3, [pc, #656]	; (80016b8 <_ZN10Controller4WorkEv+0x5e4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4aa4      	ldr	r2, [pc, #656]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 800142a:	fb82 1203 	smull	r1, r2, r2, r3
 800142e:	1192      	asrs	r2, r2, #6
 8001430:	17db      	asrs	r3, r3, #31
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	4619      	mov	r1, r3
 8001436:	48a2      	ldr	r0, [pc, #648]	; (80016c0 <_ZN10Controller4WorkEv+0x5ec>)
 8001438:	f000 fa94 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		west.SetCountdown(N_GRN_DURATION);
 800143c:	4b9c      	ldr	r3, [pc, #624]	; (80016b0 <_ZN10Controller4WorkEv+0x5dc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	489a      	ldr	r0, [pc, #616]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 8001444:	f000 fa8e 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		east.SetCountdown(N_GRN_DURATION);
 8001448:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <_ZN10Controller4WorkEv+0x5dc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	489d      	ldr	r0, [pc, #628]	; (80016c4 <_ZN10Controller4WorkEv+0x5f0>)
 8001450:	f000 fa88 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		/* Refresh the countdown */
		if (secondTimer.HasSignal()) {
 8001454:	489c      	ldr	r0, [pc, #624]	; (80016c8 <_ZN10Controller4WorkEv+0x5f4>)
 8001456:	f7ff fe01 	bl	800105c <_ZN5Timer9HasSignalEv>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <_ZN10Controller4WorkEv+0x3a4>
			north.RefreshCountdown();
 8001460:	4891      	ldr	r0, [pc, #580]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 8001462:	f000 fa9c 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			south.RefreshCountdown();
 8001466:	4896      	ldr	r0, [pc, #600]	; (80016c0 <_ZN10Controller4WorkEv+0x5ec>)
 8001468:	f000 fa99 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			west.RefreshCountdown();
 800146c:	488f      	ldr	r0, [pc, #572]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 800146e:	f000 fa96 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			east.RefreshCountdown();
 8001472:	4894      	ldr	r0, [pc, #592]	; (80016c4 <_ZN10Controller4WorkEv+0x5f0>)
 8001474:	f000 fa93 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
		}

		/* Check button */
		if (buttonChangeMode.IsPressed()) {
 8001478:	4894      	ldr	r0, [pc, #592]	; (80016cc <_ZN10Controller4WorkEv+0x5f8>)
 800147a:	f7ff f90a 	bl	8000692 <_ZN6Button9IsPressedEv>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00f      	beq.n	80014a4 <_ZN10Controller4WorkEv+0x3d0>
			north.Switch(YELLOW);
 8001484:	2102      	movs	r1, #2
 8001486:	4888      	ldr	r0, [pc, #544]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 8001488:	f000 fa00 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			west.Switch(YELLOW);
 800148c:	2102      	movs	r1, #2
 800148e:	4887      	ldr	r0, [pc, #540]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 8001490:	f000 f9fc 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			l_N_YEL_DURATION = N_YEL_DURATION;
 8001494:	4b8e      	ldr	r3, [pc, #568]	; (80016d0 <_ZN10Controller4WorkEv+0x5fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a8e      	ldr	r2, [pc, #568]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 800149a:	6013      	str	r3, [r2, #0]
			SetState(MODE_CHANGE_YEL);
 800149c:	2106      	movs	r1, #6
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fdfa 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 80014a4:	4883      	ldr	r0, [pc, #524]	; (80016b4 <_ZN10Controller4WorkEv+0x5e0>)
 80014a6:	f7ff fdd9 	bl	800105c <_ZN5Timer9HasSignalEv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 819d 	beq.w	80017ec <_ZN10Controller4WorkEv+0x718>
			SetState(N_RED_W_YEL);
 80014b2:	2104      	movs	r1, #4
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fdef 	bl	8001098 <_ZN10Controller8SetStateEi>
		}
		break;
 80014ba:	e197      	b.n	80017ec <_ZN10Controller4WorkEv+0x718>
	case N_RED_W_YEL:
		north.Switch(RED);
 80014bc:	2100      	movs	r1, #0
 80014be:	487a      	ldr	r0, [pc, #488]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 80014c0:	f000 f9e4 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		west.Switch(YELLOW);
 80014c4:	2102      	movs	r1, #2
 80014c6:	4879      	ldr	r0, [pc, #484]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 80014c8:	f000 f9e0 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
		/*
		 * North RED
		 * West YELLOW
		 */
		timerTraffic.Set(N_YEL_DURATION);
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <_ZN10Controller4WorkEv+0x5fc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4878      	ldr	r0, [pc, #480]	; (80016b4 <_ZN10Controller4WorkEv+0x5e0>)
 80014d4:	f7ff fd7c 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Setting the countdown 7SEG */
		north.SetCountdown(N_RED_DURATION / 1000);
 80014d8:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <_ZN10Controller4WorkEv+0x5e4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a77      	ldr	r2, [pc, #476]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1192      	asrs	r2, r2, #6
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	486f      	ldr	r0, [pc, #444]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 80014ec:	f000 fa3a 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		south.SetCountdown(N_RED_DURATION / 1000);
 80014f0:	4b71      	ldr	r3, [pc, #452]	; (80016b8 <_ZN10Controller4WorkEv+0x5e4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a71      	ldr	r2, [pc, #452]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 80014f6:	fb82 1203 	smull	r1, r2, r2, r3
 80014fa:	1192      	asrs	r2, r2, #6
 80014fc:	17db      	asrs	r3, r3, #31
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4619      	mov	r1, r3
 8001502:	486f      	ldr	r0, [pc, #444]	; (80016c0 <_ZN10Controller4WorkEv+0x5ec>)
 8001504:	f000 fa2e 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		west.SetCountdown(N_YEL_DURATION / 1000);
 8001508:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <_ZN10Controller4WorkEv+0x5fc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6b      	ldr	r2, [pc, #428]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1192      	asrs	r2, r2, #6
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4619      	mov	r1, r3
 800151a:	4864      	ldr	r0, [pc, #400]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 800151c:	f000 fa22 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>
		east.SetCountdown(N_YEL_DURATION / 1000);
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <_ZN10Controller4WorkEv+0x5fc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a65      	ldr	r2, [pc, #404]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 8001526:	fb82 1203 	smull	r1, r2, r2, r3
 800152a:	1192      	asrs	r2, r2, #6
 800152c:	17db      	asrs	r3, r3, #31
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4619      	mov	r1, r3
 8001532:	4864      	ldr	r0, [pc, #400]	; (80016c4 <_ZN10Controller4WorkEv+0x5f0>)
 8001534:	f000 fa16 	bl	8001964 <_ZN12TrafficLight12SetCountdownEi>

		/* Refresh the countdown */
		if (secondTimer.HasSignal()) {
 8001538:	4863      	ldr	r0, [pc, #396]	; (80016c8 <_ZN10Controller4WorkEv+0x5f4>)
 800153a:	f7ff fd8f 	bl	800105c <_ZN5Timer9HasSignalEv>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <_ZN10Controller4WorkEv+0x488>
			north.RefreshCountdown();
 8001544:	4858      	ldr	r0, [pc, #352]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 8001546:	f000 fa2a 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			south.RefreshCountdown();
 800154a:	485d      	ldr	r0, [pc, #372]	; (80016c0 <_ZN10Controller4WorkEv+0x5ec>)
 800154c:	f000 fa27 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			west.RefreshCountdown();
 8001550:	4856      	ldr	r0, [pc, #344]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 8001552:	f000 fa24 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
			east.RefreshCountdown();
 8001556:	485b      	ldr	r0, [pc, #364]	; (80016c4 <_ZN10Controller4WorkEv+0x5f0>)
 8001558:	f000 fa21 	bl	800199e <_ZN12TrafficLight16RefreshCountdownEv>
		}

		/* Check button */
		if (buttonChangeMode.IsPressed()) {
 800155c:	485b      	ldr	r0, [pc, #364]	; (80016cc <_ZN10Controller4WorkEv+0x5f8>)
 800155e:	f7ff f898 	bl	8000692 <_ZN6Button9IsPressedEv>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00f      	beq.n	8001588 <_ZN10Controller4WorkEv+0x4b4>
			north.Switch(YELLOW);
 8001568:	2102      	movs	r1, #2
 800156a:	484f      	ldr	r0, [pc, #316]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 800156c:	f000 f98e 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			west.Switch(YELLOW);
 8001570:	2102      	movs	r1, #2
 8001572:	484e      	ldr	r0, [pc, #312]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 8001574:	f000 f98a 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			l_N_YEL_DURATION = N_YEL_DURATION;
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <_ZN10Controller4WorkEv+0x5fc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a55      	ldr	r2, [pc, #340]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 800157e:	6013      	str	r3, [r2, #0]
			SetState(MODE_CHANGE_YEL);
 8001580:	2106      	movs	r1, #6
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fd88 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 8001588:	484a      	ldr	r0, [pc, #296]	; (80016b4 <_ZN10Controller4WorkEv+0x5e0>)
 800158a:	f7ff fd67 	bl	800105c <_ZN5Timer9HasSignalEv>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 812d 	beq.w	80017f0 <_ZN10Controller4WorkEv+0x71c>
			SetState(N_GRN_W_RED);
 8001596:	2101      	movs	r1, #1
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fd7d 	bl	8001098 <_ZN10Controller8SetStateEi>
		}
		break;
 800159e:	e127      	b.n	80017f0 <_ZN10Controller4WorkEv+0x71c>
		 * Blinks YELLOW
		 * Use NORTH & WEST SegmentLed
		 * buttonIncreaseTime increase time duration of YELLOW
		 * buttonSet accept changes and return to normal mode
		 */
		south.DisableCountdown();
 80015a0:	4847      	ldr	r0, [pc, #284]	; (80016c0 <_ZN10Controller4WorkEv+0x5ec>)
 80015a2:	f000 fa29 	bl	80019f8 <_ZN12TrafficLight16DisableCountdownEv>
		east.DisableCountdown();
 80015a6:	4847      	ldr	r0, [pc, #284]	; (80016c4 <_ZN10Controller4WorkEv+0x5f0>)
 80015a8:	f000 fa26 	bl	80019f8 <_ZN12TrafficLight16DisableCountdownEv>
		north.Display(l_N_YEL_DURATION / 1000);
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a42      	ldr	r2, [pc, #264]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 80015b2:	fb82 1203 	smull	r1, r2, r2, r3
 80015b6:	1192      	asrs	r2, r2, #6
 80015b8:	17db      	asrs	r3, r3, #31
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4619      	mov	r1, r3
 80015be:	483a      	ldr	r0, [pc, #232]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 80015c0:	f000 fa06 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>
		west.Display(l_N_YEL_DURATION / 10000);
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <_ZN10Controller4WorkEv+0x604>)
 80015ca:	fb82 1203 	smull	r1, r2, r2, r3
 80015ce:	1312      	asrs	r2, r2, #12
 80015d0:	17db      	asrs	r3, r3, #31
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	4835      	ldr	r0, [pc, #212]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 80015d8:	f000 f9fa 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>

		timerTraffic.Set(500);
 80015dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015e0:	4834      	ldr	r0, [pc, #208]	; (80016b4 <_ZN10Controller4WorkEv+0x5e0>)
 80015e2:	f7ff fcf5 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Move to Yellow mode */
		if (buttonChangeMode.IsPressed()) {
 80015e6:	4839      	ldr	r0, [pc, #228]	; (80016cc <_ZN10Controller4WorkEv+0x5f8>)
 80015e8:	f7ff f853 	bl	8000692 <_ZN6Button9IsPressedEv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00f      	beq.n	8001612 <_ZN10Controller4WorkEv+0x53e>
			north.Switch(GREEN);
 80015f2:	2101      	movs	r1, #1
 80015f4:	482c      	ldr	r0, [pc, #176]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 80015f6:	f000 f949 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			west.Switch(GREEN);
 80015fa:	2101      	movs	r1, #1
 80015fc:	482b      	ldr	r0, [pc, #172]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 80015fe:	f000 f945 	bl	800188c <_ZN12TrafficLight6SwitchE6Lights>
			l_N_GRN_DURATION = N_GRN_DURATION;
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <_ZN10Controller4WorkEv+0x5dc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a35      	ldr	r2, [pc, #212]	; (80016dc <_ZN10Controller4WorkEv+0x608>)
 8001608:	6013      	str	r3, [r2, #0]
			SetState(MODE_CHANGE_GRN);
 800160a:	2105      	movs	r1, #5
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd43 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		/* Increment local value */
		if (buttonIncreaseTime.IsPressed()) {
 8001612:	4833      	ldr	r0, [pc, #204]	; (80016e0 <_ZN10Controller4WorkEv+0x60c>)
 8001614:	f7ff f83d 	bl	8000692 <_ZN6Button9IsPressedEv>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d026      	beq.n	800166c <_ZN10Controller4WorkEv+0x598>
			l_N_YEL_DURATION += 1000;
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001626:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 8001628:	6013      	str	r3, [r2, #0]
			if (l_N_YEL_DURATION > 99000) {
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <_ZN10Controller4WorkEv+0x610>)
 8001630:	4293      	cmp	r3, r2
 8001632:	dd03      	ble.n	800163c <_ZN10Controller4WorkEv+0x568>
				l_N_YEL_DURATION = 1000;
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 8001636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800163a:	601a      	str	r2, [r3, #0]
			}
			north.Display(l_N_GRN_DURATION / 1000);
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <_ZN10Controller4WorkEv+0x608>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <_ZN10Controller4WorkEv+0x5e8>)
 8001642:	fb82 1203 	smull	r1, r2, r2, r3
 8001646:	1192      	asrs	r2, r2, #6
 8001648:	17db      	asrs	r3, r3, #31
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4619      	mov	r1, r3
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 8001650:	f000 f9be 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>
			west.Display(l_N_GRN_DURATION / 10000);
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <_ZN10Controller4WorkEv+0x608>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <_ZN10Controller4WorkEv+0x604>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1312      	asrs	r2, r2, #12
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4619      	mov	r1, r3
 8001666:	4811      	ldr	r0, [pc, #68]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 8001668:	f000 f9b2 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>
		}

		/* Save changes */
		if (buttonSet.IsPressed()) {
 800166c:	481e      	ldr	r0, [pc, #120]	; (80016e8 <_ZN10Controller4WorkEv+0x614>)
 800166e:	f7ff f810 	bl	8000692 <_ZN6Button9IsPressedEv>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <_ZN10Controller4WorkEv+0x5b4>
			N_YEL_DURATION = l_N_YEL_DURATION;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <_ZN10Controller4WorkEv+0x600>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_ZN10Controller4WorkEv+0x5fc>)
 800167e:	6013      	str	r3, [r2, #0]
			SetState(N_RED_W_GRN);
 8001680:	2103      	movs	r1, #3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fd08 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <_ZN10Controller4WorkEv+0x5e0>)
 800168a:	f7ff fce7 	bl	800105c <_ZN5Timer9HasSignalEv>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80af 	beq.w	80017f4 <_ZN10Controller4WorkEv+0x720>
			north.Toggle(YELLOW);
 8001696:	2102      	movs	r1, #2
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <_ZN10Controller4WorkEv+0x5d4>)
 800169a:	f000 f93c 	bl	8001916 <_ZN12TrafficLight6ToggleE6Lights>
			west.Toggle(YELLOW);
 800169e:	2102      	movs	r1, #2
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <_ZN10Controller4WorkEv+0x5d8>)
 80016a2:	f000 f938 	bl	8001916 <_ZN12TrafficLight6ToggleE6Lights>
		}

		break;
 80016a6:	e0a5      	b.n	80017f4 <_ZN10Controller4WorkEv+0x720>
 80016a8:	200002e0 	.word	0x200002e0
 80016ac:	200002f4 	.word	0x200002f4
 80016b0:	20000038 	.word	0x20000038
 80016b4:	200002c8 	.word	0x200002c8
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	10624dd3 	.word	0x10624dd3
 80016c0:	20000308 	.word	0x20000308
 80016c4:	2000031c 	.word	0x2000031c
 80016c8:	200002d4 	.word	0x200002d4
 80016cc:	200001d8 	.word	0x200001d8
 80016d0:	20000040 	.word	0x20000040
 80016d4:	20000380 	.word	0x20000380
 80016d8:	68db8bad 	.word	0x68db8bad
 80016dc:	20000384 	.word	0x20000384
 80016e0:	200001f8 	.word	0x200001f8
 80016e4:	000182b8 	.word	0x000182b8
 80016e8:	20000218 	.word	0x20000218
		 * Blinks GREEN
		 * Use NORTH & WEST SegmentLed
		 * buttonIncreaseTime increase time duration of YELLOW
		 * buttonSet accept changes and return to normal mode
		 */
		south.DisableCountdown();
 80016ec:	4845      	ldr	r0, [pc, #276]	; (8001804 <_ZN10Controller4WorkEv+0x730>)
 80016ee:	f000 f983 	bl	80019f8 <_ZN12TrafficLight16DisableCountdownEv>
		east.DisableCountdown();
 80016f2:	4845      	ldr	r0, [pc, #276]	; (8001808 <_ZN10Controller4WorkEv+0x734>)
 80016f4:	f000 f980 	bl	80019f8 <_ZN12TrafficLight16DisableCountdownEv>
		north.Display(l_N_GRN_DURATION / 1000);
 80016f8:	4b44      	ldr	r3, [pc, #272]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a44      	ldr	r2, [pc, #272]	; (8001810 <_ZN10Controller4WorkEv+0x73c>)
 80016fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001702:	1192      	asrs	r2, r2, #6
 8001704:	17db      	asrs	r3, r3, #31
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4619      	mov	r1, r3
 800170a:	4842      	ldr	r0, [pc, #264]	; (8001814 <_ZN10Controller4WorkEv+0x740>)
 800170c:	f000 f960 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>
		west.Display(l_N_GRN_DURATION / 10000);
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a40      	ldr	r2, [pc, #256]	; (8001818 <_ZN10Controller4WorkEv+0x744>)
 8001716:	fb82 1203 	smull	r1, r2, r2, r3
 800171a:	1312      	asrs	r2, r2, #12
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4619      	mov	r1, r3
 8001722:	483e      	ldr	r0, [pc, #248]	; (800181c <_ZN10Controller4WorkEv+0x748>)
 8001724:	f000 f954 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>

		timerTraffic.Set(500);
 8001728:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800172c:	483c      	ldr	r0, [pc, #240]	; (8001820 <_ZN10Controller4WorkEv+0x74c>)
 800172e:	f7ff fc4f 	bl	8000fd0 <_ZN5Timer3SetEi>

		/* Move to normal mode */
		if (buttonChangeMode.IsPressed()) {
 8001732:	483c      	ldr	r0, [pc, #240]	; (8001824 <_ZN10Controller4WorkEv+0x750>)
 8001734:	f7fe ffad 	bl	8000692 <_ZN6Button9IsPressedEv>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <_ZN10Controller4WorkEv+0x672>
			SetState(N_RED_W_GRN);
 800173e:	2103      	movs	r1, #3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fca9 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		/* Increment local value */
		if (buttonIncreaseTime.IsPressed()) {
 8001746:	4838      	ldr	r0, [pc, #224]	; (8001828 <_ZN10Controller4WorkEv+0x754>)
 8001748:	f7fe ffa3 	bl	8000692 <_ZN6Button9IsPressedEv>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d026      	beq.n	80017a0 <_ZN10Controller4WorkEv+0x6cc>
			l_N_GRN_DURATION += 1000;
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800175a:	4a2c      	ldr	r2, [pc, #176]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 800175c:	6013      	str	r3, [r2, #0]
			if (l_N_GRN_DURATION > 99000) {
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <_ZN10Controller4WorkEv+0x758>)
 8001764:	4293      	cmp	r3, r2
 8001766:	dd03      	ble.n	8001770 <_ZN10Controller4WorkEv+0x69c>
				l_N_GRN_DURATION = 1000;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 800176a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176e:	601a      	str	r2, [r3, #0]
			}
			north.Display(l_N_GRN_DURATION / 1000);
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a26      	ldr	r2, [pc, #152]	; (8001810 <_ZN10Controller4WorkEv+0x73c>)
 8001776:	fb82 1203 	smull	r1, r2, r2, r3
 800177a:	1192      	asrs	r2, r2, #6
 800177c:	17db      	asrs	r3, r3, #31
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	4619      	mov	r1, r3
 8001782:	4824      	ldr	r0, [pc, #144]	; (8001814 <_ZN10Controller4WorkEv+0x740>)
 8001784:	f000 f924 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>
			west.Display(l_N_GRN_DURATION / 10000);
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a22      	ldr	r2, [pc, #136]	; (8001818 <_ZN10Controller4WorkEv+0x744>)
 800178e:	fb82 1203 	smull	r1, r2, r2, r3
 8001792:	1312      	asrs	r2, r2, #12
 8001794:	17db      	asrs	r3, r3, #31
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4619      	mov	r1, r3
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <_ZN10Controller4WorkEv+0x748>)
 800179c:	f000 f918 	bl	80019d0 <_ZN12TrafficLight7DisplayEi>
		}

		/* Save changes */
		if (buttonSet.IsPressed()) {
 80017a0:	4823      	ldr	r0, [pc, #140]	; (8001830 <_ZN10Controller4WorkEv+0x75c>)
 80017a2:	f7fe ff76 	bl	8000692 <_ZN6Button9IsPressedEv>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <_ZN10Controller4WorkEv+0x6ee>
			N_GRN_DURATION = l_N_GRN_DURATION;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <_ZN10Controller4WorkEv+0x738>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <_ZN10Controller4WorkEv+0x760>)
 80017b2:	6013      	str	r3, [r2, #0]
			timerTraffic.Reset();
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <_ZN10Controller4WorkEv+0x74c>)
 80017b6:	f7ff fc29 	bl	800100c <_ZN5Timer5ResetEv>
			SetState(N_RED_W_GRN);
 80017ba:	2103      	movs	r1, #3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fc6b 	bl	8001098 <_ZN10Controller8SetStateEi>
		}

		if (timerTraffic.HasSignal()) {
 80017c2:	4817      	ldr	r0, [pc, #92]	; (8001820 <_ZN10Controller4WorkEv+0x74c>)
 80017c4:	f7ff fc4a 	bl	800105c <_ZN5Timer9HasSignalEv>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d014      	beq.n	80017f8 <_ZN10Controller4WorkEv+0x724>
			north.Toggle(GREEN);
 80017ce:	2101      	movs	r1, #1
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <_ZN10Controller4WorkEv+0x740>)
 80017d2:	f000 f8a0 	bl	8001916 <_ZN12TrafficLight6ToggleE6Lights>
			west.Toggle(GREEN);
 80017d6:	2101      	movs	r1, #1
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <_ZN10Controller4WorkEv+0x748>)
 80017da:	f000 f89c 	bl	8001916 <_ZN12TrafficLight6ToggleE6Lights>
		}

		break;
 80017de:	e00b      	b.n	80017f8 <_ZN10Controller4WorkEv+0x724>
		break;
 80017e0:	bf00      	nop
 80017e2:	e00a      	b.n	80017fa <_ZN10Controller4WorkEv+0x726>
		break;
 80017e4:	bf00      	nop
 80017e6:	e008      	b.n	80017fa <_ZN10Controller4WorkEv+0x726>
		break;
 80017e8:	bf00      	nop
 80017ea:	e006      	b.n	80017fa <_ZN10Controller4WorkEv+0x726>
		break;
 80017ec:	bf00      	nop
 80017ee:	e004      	b.n	80017fa <_ZN10Controller4WorkEv+0x726>
		break;
 80017f0:	bf00      	nop
 80017f2:	e002      	b.n	80017fa <_ZN10Controller4WorkEv+0x726>
		break;
 80017f4:	bf00      	nop
 80017f6:	e000      	b.n	80017fa <_ZN10Controller4WorkEv+0x726>
		break;
 80017f8:	bf00      	nop
	}
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000308 	.word	0x20000308
 8001808:	2000031c 	.word	0x2000031c
 800180c:	20000384 	.word	0x20000384
 8001810:	10624dd3 	.word	0x10624dd3
 8001814:	200002e0 	.word	0x200002e0
 8001818:	68db8bad 	.word	0x68db8bad
 800181c:	200002f4 	.word	0x200002f4
 8001820:	200002c8 	.word	0x200002c8
 8001824:	200001d8 	.word	0x200001d8
 8001828:	200001f8 	.word	0x200001f8
 800182c:	000182b8 	.word	0x000182b8
 8001830:	20000218 	.word	0x20000218
 8001834:	20000038 	.word	0x20000038

08001838 <_Z41__static_initialization_and_destruction_0ii>:
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10c      	bne.n	8001862 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184e:	4293      	cmp	r3, r2
 8001850:	d107      	bne.n	8001862 <_Z41__static_initialization_and_destruction_0ii+0x2a>
int l_N_YEL_DURATION = N_YEL_DURATION;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001858:	6013      	str	r3, [r2, #0]
int l_N_GRN_DURATION = N_GRN_DURATION;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000040 	.word	0x20000040
 8001870:	20000380 	.word	0x20000380
 8001874:	20000038 	.word	0x20000038
 8001878:	20000384 	.word	0x20000384

0800187c <_GLOBAL__sub_I__ZN10Controller8GetStateEv>:
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
 8001880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ffd7 	bl	8001838 <_Z41__static_initialization_and_destruction_0ii>
 800188a:	bd80      	pop	{r7, pc}

0800188c <_ZN12TrafficLight6SwitchE6Lights>:
#include "services/traffic_light.h"

void TrafficLight::Switch(ELights to) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	switch (to) {
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d026      	beq.n	80018ec <_ZN12TrafficLight6SwitchE6Lights+0x60>
 800189e:	2b02      	cmp	r3, #2
 80018a0:	dc34      	bgt.n	800190c <_ZN12TrafficLight6SwitchE6Lights+0x80>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <_ZN12TrafficLight6SwitchE6Lights+0x20>
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d010      	beq.n	80018cc <_ZN12TrafficLight6SwitchE6Lights+0x40>
		m_Red->Off();
		m_Yellow->On();
		m_Green->Off();
		break;
	default:
		break;
 80018aa:	e02f      	b.n	800190c <_ZN12TrafficLight6SwitchE6Lights+0x80>
		m_Red->On();
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fc5f 	bl	8000174 <_ZN3Led2OnEv>
		m_Yellow->Off();
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fc72 	bl	80001a4 <_ZN3Led3OffEv>
		m_Green->Off();
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fc6d 	bl	80001a4 <_ZN3Led3OffEv>
		break;
 80018ca:	e020      	b.n	800190e <_ZN12TrafficLight6SwitchE6Lights+0x82>
		m_Red->Off();
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc67 	bl	80001a4 <_ZN3Led3OffEv>
		m_Yellow->Off();
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fc62 	bl	80001a4 <_ZN3Led3OffEv>
		m_Green->On();
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc45 	bl	8000174 <_ZN3Led2OnEv>
		break;
 80018ea:	e010      	b.n	800190e <_ZN12TrafficLight6SwitchE6Lights+0x82>
		m_Red->Off();
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc57 	bl	80001a4 <_ZN3Led3OffEv>
		m_Yellow->On();
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fc3a 	bl	8000174 <_ZN3Led2OnEv>
		m_Green->Off();
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fc4d 	bl	80001a4 <_ZN3Led3OffEv>
		break;
 800190a:	e000      	b.n	800190e <_ZN12TrafficLight6SwitchE6Lights+0x82>
		break;
 800190c:	bf00      	nop
	}
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN12TrafficLight6ToggleE6Lights>:

void TrafficLight::Toggle(ELights to) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
	switch (to) {
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d012      	beq.n	800194e <_ZN12TrafficLight6ToggleE6Lights+0x38>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc16      	bgt.n	800195a <_ZN12TrafficLight6ToggleE6Lights+0x44>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_ZN12TrafficLight6ToggleE6Lights+0x20>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d006      	beq.n	8001942 <_ZN12TrafficLight6ToggleE6Lights+0x2c>
		break;
	case YELLOW:
		m_Yellow->Toggle();
		break;
	default:
		break;
 8001934:	e011      	b.n	800195a <_ZN12TrafficLight6ToggleE6Lights+0x44>
		m_Red->Toggle();
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc4d 	bl	80001da <_ZN3Led6ToggleEv>
		break;
 8001940:	e00c      	b.n	800195c <_ZN12TrafficLight6ToggleE6Lights+0x46>
		m_Green->Toggle();
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fc47 	bl	80001da <_ZN3Led6ToggleEv>
		break;
 800194c:	e006      	b.n	800195c <_ZN12TrafficLight6ToggleE6Lights+0x46>
		m_Yellow->Toggle();
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fc41 	bl	80001da <_ZN3Led6ToggleEv>
		break;
 8001958:	e000      	b.n	800195c <_ZN12TrafficLight6ToggleE6Lights+0x46>
		break;
 800195a:	bf00      	nop
	}
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZN12TrafficLight12SetCountdownEi>:

void TrafficLight::SetCountdown(int time) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	m_Countdown->On();
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc8d 	bl	8000292 <_ZN10SegmentLed2OnEv>
	if (m_CountdownDuration == 0) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <_ZN12TrafficLight12SetCountdownEi+0x32>
		m_CountdownDuration = time;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	611a      	str	r2, [r3, #16]
		m_Countdown->Display(m_CountdownDuration);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7fe fc8b 	bl	80002ac <_ZN10SegmentLed7DisplayEi>
	}
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_ZN12TrafficLight16RefreshCountdownEv>:

void TrafficLight::RefreshCountdown() {
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	if (m_CountdownDuration > 0) {
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dd0c      	ble.n	80019c8 <_ZN12TrafficLight16RefreshCountdownEv+0x2a>
		m_CountdownDuration -= 1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	611a      	str	r2, [r3, #16]
		m_Countdown->Display(m_CountdownDuration);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4610      	mov	r0, r2
 80019c4:	f7fe fc72 	bl	80002ac <_ZN10SegmentLed7DisplayEi>
	}
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN12TrafficLight7DisplayEi>:

void TrafficLight::Display(int number) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	m_Countdown->On();
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fc57 	bl	8000292 <_ZN10SegmentLed2OnEv>
	m_Countdown->Display(number);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fc5e 	bl	80002ac <_ZN10SegmentLed7DisplayEi>
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZN12TrafficLight16DisableCountdownEv>:

void TrafficLight::DisableCountdown() {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	m_Countdown->Off();
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fc37 	bl	8000278 <_ZN10SegmentLed3OffEv>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a3a:	f7ff fac3 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f001 fb37 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff f81b 	bl	8000a7c <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001a50:	08003350 	.word	0x08003350
  ldr r2, =_sbss
 8001a54:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001a58:	200003a0 	.word	0x200003a0

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_Init+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_Init+0x28>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f923 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	200f      	movs	r0, #15
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff f9d2 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f93b 	bl	8001d26 <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f903 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000044 	.word	0x20000044
 8001ae4:	2000004c 	.word	0x2000004c
 8001ae8:	20000048 	.word	0x20000048

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x20>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_IncTick+0x20>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	2000004c 	.word	0x2000004c
 8001b0c:	20000388 	.word	0x20000388

08001b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_GetTick+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000388 	.word	0x20000388

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4906      	ldr	r1, [pc, #24]	; (8001bbc <__NVIC_EnableIRQ+0x34>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff90 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff2d 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff42 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff35 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e161      	b.n	8002018 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d54:	2201      	movs	r2, #1
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8150 	bne.w	8002012 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a97      	ldr	r2, [pc, #604]	; (8001fd4 <HAL_GPIO_Init+0x294>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d05e      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a95      	ldr	r2, [pc, #596]	; (8001fd4 <HAL_GPIO_Init+0x294>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d875      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d82:	4a95      	ldr	r2, [pc, #596]	; (8001fd8 <HAL_GPIO_Init+0x298>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d058      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d88:	4a93      	ldr	r2, [pc, #588]	; (8001fd8 <HAL_GPIO_Init+0x298>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d86f      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d8e:	4a93      	ldr	r2, [pc, #588]	; (8001fdc <HAL_GPIO_Init+0x29c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d052      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d94:	4a91      	ldr	r2, [pc, #580]	; (8001fdc <HAL_GPIO_Init+0x29c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d869      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d9a:	4a91      	ldr	r2, [pc, #580]	; (8001fe0 <HAL_GPIO_Init+0x2a0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04c      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001da0:	4a8f      	ldr	r2, [pc, #572]	; (8001fe0 <HAL_GPIO_Init+0x2a0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d863      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001da6:	4a8f      	ldr	r2, [pc, #572]	; (8001fe4 <HAL_GPIO_Init+0x2a4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d046      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001dac:	4a8d      	ldr	r2, [pc, #564]	; (8001fe4 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d85d      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d82a      	bhi.n	8001e0c <HAL_GPIO_Init+0xcc>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d859      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <HAL_GPIO_Init+0x80>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001e3b 	.word	0x08001e3b
 8001dc4:	08001e15 	.word	0x08001e15
 8001dc8:	08001e27 	.word	0x08001e27
 8001dcc:	08001e69 	.word	0x08001e69
 8001dd0:	08001e6f 	.word	0x08001e6f
 8001dd4:	08001e6f 	.word	0x08001e6f
 8001dd8:	08001e6f 	.word	0x08001e6f
 8001ddc:	08001e6f 	.word	0x08001e6f
 8001de0:	08001e6f 	.word	0x08001e6f
 8001de4:	08001e6f 	.word	0x08001e6f
 8001de8:	08001e6f 	.word	0x08001e6f
 8001dec:	08001e6f 	.word	0x08001e6f
 8001df0:	08001e6f 	.word	0x08001e6f
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e6f 	.word	0x08001e6f
 8001dfc:	08001e6f 	.word	0x08001e6f
 8001e00:	08001e6f 	.word	0x08001e6f
 8001e04:	08001e1d 	.word	0x08001e1d
 8001e08:	08001e31 	.word	0x08001e31
 8001e0c:	4a76      	ldr	r2, [pc, #472]	; (8001fe8 <HAL_GPIO_Init+0x2a8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e12:	e02c      	b.n	8001e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e029      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	3304      	adds	r3, #4
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e024      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e01f      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	330c      	adds	r3, #12
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e01a      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e42:	2304      	movs	r3, #4
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e013      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	611a      	str	r2, [r3, #16]
          break;
 8001e5a:	e009      	b.n	8001e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	615a      	str	r2, [r3, #20]
          break;
 8001e66:	e003      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          break;
 8001e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d801      	bhi.n	8001e7a <HAL_GPIO_Init+0x13a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_Init+0x13e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2bff      	cmp	r3, #255	; 0xff
 8001e84:	d802      	bhi.n	8001e8c <HAL_GPIO_Init+0x14c>
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x152>
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3b08      	subs	r3, #8
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	210f      	movs	r1, #15
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80a9 	beq.w	8002012 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <HAL_GPIO_Init+0x2ac>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x2ac>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_GPIO_Init+0x2ac>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed8:	4a45      	ldr	r2, [pc, #276]	; (8001ff0 <HAL_GPIO_Init+0x2b0>)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3d      	ldr	r2, [pc, #244]	; (8001ff4 <HAL_GPIO_Init+0x2b4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1e0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3c      	ldr	r2, [pc, #240]	; (8001ff8 <HAL_GPIO_Init+0x2b8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1dc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_GPIO_Init+0x2bc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1d8>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	492f      	ldr	r1, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x2b0>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	492b      	ldr	r1, [pc, #172]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4921      	ldr	r1, [pc, #132]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	491d      	ldr	r1, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4917      	ldr	r1, [pc, #92]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4913      	ldr	r1, [pc, #76]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01f      	beq.n	8002004 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	490d      	ldr	r1, [pc, #52]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
 8001fd0:	e01f      	b.n	8002012 <HAL_GPIO_Init+0x2d2>
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_GPIO_Init+0x2f4>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	43db      	mvns	r3, r3
 800200c:	4909      	ldr	r1, [pc, #36]	; (8002034 <HAL_GPIO_Init+0x2f4>)
 800200e:	4013      	ands	r3, r2
 8002010:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f47f ae96 	bne.w	8001d54 <HAL_GPIO_Init+0x14>
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	372c      	adds	r7, #44	; 0x2c
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	807b      	strh	r3, [r7, #2]
 8002072:	4613      	mov	r3, r2
 8002074:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002076:	787b      	ldrb	r3, [r7, #1]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002082:	e003      	b.n	800208c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	041a      	lsls	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	041a      	lsls	r2, r3, #16
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	400b      	ands	r3, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e272      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8087 	beq.w	80021f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e8:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d00c      	beq.n	800210e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f4:	4b8f      	ldr	r3, [pc, #572]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d112      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d10b      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d06c      	beq.n	80021f4 <HAL_RCC_OscConfig+0x12c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d168      	bne.n	80021f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e24c      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x76>
 8002130:	4b80      	ldr	r3, [pc, #512]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a7f      	ldr	r2, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e02e      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x98>
 8002146:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7a      	ldr	r2, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b78      	ldr	r3, [pc, #480]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0xbc>
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a71      	ldr	r2, [pc, #452]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002184:	4b6b      	ldr	r3, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fcb4 	bl	8001b10 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fcb0 	bl	8001b10 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e200      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xe4>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fca0 	bl	8001b10 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff fc9c 	bl	8001b10 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1ec      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x10c>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d063      	beq.n	80022ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002202:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800220e:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d11c      	bne.n	8002254 <HAL_RCC_OscConfig+0x18c>
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e1c0      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4939      	ldr	r1, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	e03a      	b.n	80022ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x270>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff fc55 	bl	8001b10 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff fc51 	bl	8001b10 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1a1      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4927      	ldr	r1, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0x270>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff fc34 	bl	8001b10 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7ff fc30 	bl	8001b10 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e180      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03a      	beq.n	800234c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d019      	beq.n	8002312 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_RCC_OscConfig+0x274>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7ff fc14 	bl	8001b10 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff fc10 	bl	8001b10 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e160      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f000 faa6 	bl	800285c <RCC_Delay>
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_OscConfig+0x274>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7ff fbfa 	bl	8001b10 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231e:	e00f      	b.n	8002340 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fbf6 	bl	8001b10 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d908      	bls.n	8002340 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e146      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	42420000 	.word	0x42420000
 800233c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b92      	ldr	r3, [pc, #584]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e9      	bne.n	8002320 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a6 	beq.w	80024a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b85      	ldr	r3, [pc, #532]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b82      	ldr	r3, [pc, #520]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7e      	ldr	r2, [pc, #504]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7ff fbb7 	bl	8001b10 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7ff fbb3 	bl	8001b10 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e103      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x312>
 80023cc:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	e02d      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x334>
 80023e2:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	e01c      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x356>
 8002404:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a60      	ldr	r2, [pc, #384]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	4b5e      	ldr	r3, [pc, #376]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a5d      	ldr	r2, [pc, #372]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 800241e:	4b5b      	ldr	r3, [pc, #364]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b58      	ldr	r3, [pc, #352]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a57      	ldr	r2, [pc, #348]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff fb67 	bl	8001b10 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7ff fb63 	bl	8001b10 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0b1      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ee      	beq.n	8002446 <HAL_RCC_OscConfig+0x37e>
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fb51 	bl	8001b10 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7ff fb4d 	bl	8001b10 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e09b      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	4b40      	ldr	r3, [pc, #256]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8087 	beq.w	80025be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d061      	beq.n	8002580 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d146      	bne.n	8002552 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff fb21 	bl	8001b10 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff fb1d 	bl	8001b10 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e06d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d108      	bne.n	800250c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4921      	ldr	r1, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a19      	ldr	r1, [r3, #32]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	430b      	orrs	r3, r1
 800251e:	491b      	ldr	r1, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7ff faf1 	bl	8001b10 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7ff faed 	bl	8001b10 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x46a>
 8002550:	e035      	b.n	80025be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_RCC_OscConfig+0x4cc>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fada 	bl	8001b10 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7ff fad6 	bl	8001b10 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e026      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x498>
 800257e:	e01e      	b.n	80025be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e019      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x500>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0d0      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4965      	ldr	r1, [pc, #404]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d040      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e073      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7ff fa28 	bl	8001b10 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7ff fa24 	bl	8001b10 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e053      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d210      	bcs.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f821 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1cc>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f986 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	0800332c 	.word	0x0800332c
 8002798:	20000044 	.word	0x20000044
 800279c:	20000048 	.word	0x20000048

080027a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b490      	push	{r4, r7}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_RCC_GetSysClockFreq+0xac>)
 80027a8:	1d3c      	adds	r4, r7, #4
 80027aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b0:	f240 2301 	movw	r3, #513	; 0x201
 80027b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d002      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x40>
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x46>
 80027de:	e02b      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e2:	623b      	str	r3, [r7, #32]
      break;
 80027e4:	e02b      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3328      	adds	r3, #40	; 0x28
 80027f0:	443b      	add	r3, r7
 80027f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d012      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0c5b      	lsrs	r3, r3, #17
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	3328      	adds	r3, #40	; 0x28
 800280e:	443b      	add	r3, r7
 8002810:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002814:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e004      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	623b      	str	r3, [r7, #32]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb4>)
 800283a:	623b      	str	r3, [r7, #32]
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	6a3b      	ldr	r3, [r7, #32]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc90      	pop	{r4, r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	0800331c 	.word	0x0800331c
 8002850:	40021000 	.word	0x40021000
 8002854:	007a1200 	.word	0x007a1200
 8002858:	003d0900 	.word	0x003d0900

0800285c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCC_Delay+0x34>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <RCC_Delay+0x38>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002878:	bf00      	nop
  }
  while (Delay --);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <RCC_Delay+0x1c>
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000044 	.word	0x20000044
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fad2 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fa6a 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d001      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e035      	b.n	80029bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_TIM_Base_Start_IT+0x90>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x4e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d004      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x4e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_TIM_Base_Start_IT+0x94>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d111      	bne.n	80029aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b06      	cmp	r3, #6
 8002996:	d010      	beq.n	80029ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	e007      	b.n	80029ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400

080029d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0202 	mvn.w	r2, #2
 80029fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9b1 	bl	8002d7a <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9a4 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f9b3 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0204 	mvn.w	r2, #4
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2202      	movs	r2, #2
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f987 	bl	8002d7a <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f97a 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f989 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0208 	mvn.w	r2, #8
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f95d 	bl	8002d7a <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f950 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f95f 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2208      	movs	r2, #8
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f933 	bl	8002d7a <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f926 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f935 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d107      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0201 	mvn.w	r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd ffc0 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	d10e      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d107      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa67 	bl	800304e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d10e      	bne.n	8002bac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d107      	bne.n	8002bac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8f9 	bl	8002d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0220 	mvn.w	r2, #32
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa32 	bl	800303c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIM_ConfigClockSource+0x18>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0b3      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x180>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c30:	d03e      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0xd0>
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c36:	f200 8087 	bhi.w	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3e:	f000 8085 	beq.w	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c46:	d87f      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c48:	2b70      	cmp	r3, #112	; 0x70
 8002c4a:	d01a      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xa2>
 8002c4c:	2b70      	cmp	r3, #112	; 0x70
 8002c4e:	d87b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b60      	cmp	r3, #96	; 0x60
 8002c52:	d050      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x116>
 8002c54:	2b60      	cmp	r3, #96	; 0x60
 8002c56:	d877      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c58:	2b50      	cmp	r3, #80	; 0x50
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xf6>
 8002c5c:	2b50      	cmp	r3, #80	; 0x50
 8002c5e:	d873      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d058      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x136>
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d86f      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c68:	2b30      	cmp	r3, #48	; 0x30
 8002c6a:	d064      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x156>
 8002c6c:	2b30      	cmp	r3, #48	; 0x30
 8002c6e:	d86b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d060      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x156>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d867      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x156>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d05a      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c80:	e062      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f000 f95c 	bl	8002f4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ca4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
      break;
 8002cae:	e04e      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f000 f945 	bl	8002f4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e03b      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f000 f8bc 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2150      	movs	r1, #80	; 0x50
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f913 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e02b      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f000 f8da 	bl	8002ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2160      	movs	r1, #96	; 0x60
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f903 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002d14:	e01b      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f89c 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f8f3 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002d34:	e00b      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 f8ea 	bl	8002f1a <TIM_ITRx_SetConfig>
        break;
 8002d46:	e002      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <TIM_Base_SetConfig+0xa8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_Base_SetConfig+0x28>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0x28>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <TIM_Base_SetConfig+0xac>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <TIM_Base_SetConfig+0xa8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x52>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x52>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <TIM_Base_SetConfig+0xac>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <TIM_Base_SetConfig+0xa8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400

08002e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 030a 	bic.w	r3, r3, #10
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f023 0210 	bic.w	r2, r3, #16
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f043 0307 	orr.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	609a      	str	r2, [r3, #8]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e041      	b.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10c      	bne.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400

0800303c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <_Znwj>:
 8003060:	2801      	cmp	r0, #1
 8003062:	bf38      	it	cc
 8003064:	2001      	movcc	r0, #1
 8003066:	b510      	push	{r4, lr}
 8003068:	4604      	mov	r4, r0
 800306a:	4620      	mov	r0, r4
 800306c:	f000 f844 	bl	80030f8 <malloc>
 8003070:	b930      	cbnz	r0, 8003080 <_Znwj+0x20>
 8003072:	f000 f807 	bl	8003084 <_ZSt15get_new_handlerv>
 8003076:	b908      	cbnz	r0, 800307c <_Znwj+0x1c>
 8003078:	f000 f80c 	bl	8003094 <abort>
 800307c:	4780      	blx	r0
 800307e:	e7f4      	b.n	800306a <_Znwj+0xa>
 8003080:	bd10      	pop	{r4, pc}
	...

08003084 <_ZSt15get_new_handlerv>:
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <_ZSt15get_new_handlerv+0xc>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f3bf 8f5b 	dmb	ish
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	2000038c 	.word	0x2000038c

08003094 <abort>:
 8003094:	2006      	movs	r0, #6
 8003096:	b508      	push	{r3, lr}
 8003098:	f000 f90a 	bl	80032b0 <raise>
 800309c:	2001      	movs	r0, #1
 800309e:	f7fd ff50 	bl	8000f42 <_exit>
	...

080030a4 <__errno>:
 80030a4:	4b01      	ldr	r3, [pc, #4]	; (80030ac <__errno+0x8>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000050 	.word	0x20000050

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	2600      	movs	r6, #0
 80030b4:	4d0c      	ldr	r5, [pc, #48]	; (80030e8 <__libc_init_array+0x38>)
 80030b6:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	42a6      	cmp	r6, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	f000 f920 	bl	8003304 <_init>
 80030c4:	2600      	movs	r6, #0
 80030c6:	4d0a      	ldr	r5, [pc, #40]	; (80030f0 <__libc_init_array+0x40>)
 80030c8:	4c0a      	ldr	r4, [pc, #40]	; (80030f4 <__libc_init_array+0x44>)
 80030ca:	1b64      	subs	r4, r4, r5
 80030cc:	10a4      	asrs	r4, r4, #2
 80030ce:	42a6      	cmp	r6, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d8:	4798      	blx	r3
 80030da:	3601      	adds	r6, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e2:	4798      	blx	r3
 80030e4:	3601      	adds	r6, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	0800333c 	.word	0x0800333c
 80030ec:	0800333c 	.word	0x0800333c
 80030f0:	0800333c 	.word	0x0800333c
 80030f4:	0800334c 	.word	0x0800334c

080030f8 <malloc>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <malloc+0xc>)
 80030fa:	4601      	mov	r1, r0
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	f000 b82b 	b.w	8003158 <_malloc_r>
 8003102:	bf00      	nop
 8003104:	20000050 	.word	0x20000050

08003108 <memset>:
 8003108:	4603      	mov	r3, r0
 800310a:	4402      	add	r2, r0
 800310c:	4293      	cmp	r3, r2
 800310e:	d100      	bne.n	8003112 <memset+0xa>
 8003110:	4770      	bx	lr
 8003112:	f803 1b01 	strb.w	r1, [r3], #1
 8003116:	e7f9      	b.n	800310c <memset+0x4>

08003118 <sbrk_aligned>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4e0e      	ldr	r6, [pc, #56]	; (8003154 <sbrk_aligned+0x3c>)
 800311c:	460c      	mov	r4, r1
 800311e:	6831      	ldr	r1, [r6, #0]
 8003120:	4605      	mov	r5, r0
 8003122:	b911      	cbnz	r1, 800312a <sbrk_aligned+0x12>
 8003124:	f000 f88c 	bl	8003240 <_sbrk_r>
 8003128:	6030      	str	r0, [r6, #0]
 800312a:	4621      	mov	r1, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f887 	bl	8003240 <_sbrk_r>
 8003132:	1c43      	adds	r3, r0, #1
 8003134:	d00a      	beq.n	800314c <sbrk_aligned+0x34>
 8003136:	1cc4      	adds	r4, r0, #3
 8003138:	f024 0403 	bic.w	r4, r4, #3
 800313c:	42a0      	cmp	r0, r4
 800313e:	d007      	beq.n	8003150 <sbrk_aligned+0x38>
 8003140:	1a21      	subs	r1, r4, r0
 8003142:	4628      	mov	r0, r5
 8003144:	f000 f87c 	bl	8003240 <_sbrk_r>
 8003148:	3001      	adds	r0, #1
 800314a:	d101      	bne.n	8003150 <sbrk_aligned+0x38>
 800314c:	f04f 34ff 	mov.w	r4, #4294967295
 8003150:	4620      	mov	r0, r4
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	20000394 	.word	0x20000394

08003158 <_malloc_r>:
 8003158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315c:	1ccd      	adds	r5, r1, #3
 800315e:	f025 0503 	bic.w	r5, r5, #3
 8003162:	3508      	adds	r5, #8
 8003164:	2d0c      	cmp	r5, #12
 8003166:	bf38      	it	cc
 8003168:	250c      	movcc	r5, #12
 800316a:	2d00      	cmp	r5, #0
 800316c:	4607      	mov	r7, r0
 800316e:	db01      	blt.n	8003174 <_malloc_r+0x1c>
 8003170:	42a9      	cmp	r1, r5
 8003172:	d905      	bls.n	8003180 <_malloc_r+0x28>
 8003174:	230c      	movs	r3, #12
 8003176:	2600      	movs	r6, #0
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4630      	mov	r0, r6
 800317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003180:	4e2e      	ldr	r6, [pc, #184]	; (800323c <_malloc_r+0xe4>)
 8003182:	f000 f8b1 	bl	80032e8 <__malloc_lock>
 8003186:	6833      	ldr	r3, [r6, #0]
 8003188:	461c      	mov	r4, r3
 800318a:	bb34      	cbnz	r4, 80031da <_malloc_r+0x82>
 800318c:	4629      	mov	r1, r5
 800318e:	4638      	mov	r0, r7
 8003190:	f7ff ffc2 	bl	8003118 <sbrk_aligned>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	4604      	mov	r4, r0
 8003198:	d14d      	bne.n	8003236 <_malloc_r+0xde>
 800319a:	6834      	ldr	r4, [r6, #0]
 800319c:	4626      	mov	r6, r4
 800319e:	2e00      	cmp	r6, #0
 80031a0:	d140      	bne.n	8003224 <_malloc_r+0xcc>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	4631      	mov	r1, r6
 80031a6:	4638      	mov	r0, r7
 80031a8:	eb04 0803 	add.w	r8, r4, r3
 80031ac:	f000 f848 	bl	8003240 <_sbrk_r>
 80031b0:	4580      	cmp	r8, r0
 80031b2:	d13a      	bne.n	800322a <_malloc_r+0xd2>
 80031b4:	6821      	ldr	r1, [r4, #0]
 80031b6:	3503      	adds	r5, #3
 80031b8:	1a6d      	subs	r5, r5, r1
 80031ba:	f025 0503 	bic.w	r5, r5, #3
 80031be:	3508      	adds	r5, #8
 80031c0:	2d0c      	cmp	r5, #12
 80031c2:	bf38      	it	cc
 80031c4:	250c      	movcc	r5, #12
 80031c6:	4638      	mov	r0, r7
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7ff ffa5 	bl	8003118 <sbrk_aligned>
 80031ce:	3001      	adds	r0, #1
 80031d0:	d02b      	beq.n	800322a <_malloc_r+0xd2>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	442b      	add	r3, r5
 80031d6:	6023      	str	r3, [r4, #0]
 80031d8:	e00e      	b.n	80031f8 <_malloc_r+0xa0>
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	1b52      	subs	r2, r2, r5
 80031de:	d41e      	bmi.n	800321e <_malloc_r+0xc6>
 80031e0:	2a0b      	cmp	r2, #11
 80031e2:	d916      	bls.n	8003212 <_malloc_r+0xba>
 80031e4:	1961      	adds	r1, r4, r5
 80031e6:	42a3      	cmp	r3, r4
 80031e8:	6025      	str	r5, [r4, #0]
 80031ea:	bf18      	it	ne
 80031ec:	6059      	strne	r1, [r3, #4]
 80031ee:	6863      	ldr	r3, [r4, #4]
 80031f0:	bf08      	it	eq
 80031f2:	6031      	streq	r1, [r6, #0]
 80031f4:	5162      	str	r2, [r4, r5]
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	4638      	mov	r0, r7
 80031fa:	f104 060b 	add.w	r6, r4, #11
 80031fe:	f000 f879 	bl	80032f4 <__malloc_unlock>
 8003202:	f026 0607 	bic.w	r6, r6, #7
 8003206:	1d23      	adds	r3, r4, #4
 8003208:	1af2      	subs	r2, r6, r3
 800320a:	d0b6      	beq.n	800317a <_malloc_r+0x22>
 800320c:	1b9b      	subs	r3, r3, r6
 800320e:	50a3      	str	r3, [r4, r2]
 8003210:	e7b3      	b.n	800317a <_malloc_r+0x22>
 8003212:	6862      	ldr	r2, [r4, #4]
 8003214:	42a3      	cmp	r3, r4
 8003216:	bf0c      	ite	eq
 8003218:	6032      	streq	r2, [r6, #0]
 800321a:	605a      	strne	r2, [r3, #4]
 800321c:	e7ec      	b.n	80031f8 <_malloc_r+0xa0>
 800321e:	4623      	mov	r3, r4
 8003220:	6864      	ldr	r4, [r4, #4]
 8003222:	e7b2      	b.n	800318a <_malloc_r+0x32>
 8003224:	4634      	mov	r4, r6
 8003226:	6876      	ldr	r6, [r6, #4]
 8003228:	e7b9      	b.n	800319e <_malloc_r+0x46>
 800322a:	230c      	movs	r3, #12
 800322c:	4638      	mov	r0, r7
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	f000 f860 	bl	80032f4 <__malloc_unlock>
 8003234:	e7a1      	b.n	800317a <_malloc_r+0x22>
 8003236:	6025      	str	r5, [r4, #0]
 8003238:	e7de      	b.n	80031f8 <_malloc_r+0xa0>
 800323a:	bf00      	nop
 800323c:	20000390 	.word	0x20000390

08003240 <_sbrk_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	2300      	movs	r3, #0
 8003244:	4d05      	ldr	r5, [pc, #20]	; (800325c <_sbrk_r+0x1c>)
 8003246:	4604      	mov	r4, r0
 8003248:	4608      	mov	r0, r1
 800324a:	602b      	str	r3, [r5, #0]
 800324c:	f7fd fe84 	bl	8000f58 <_sbrk>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d102      	bne.n	800325a <_sbrk_r+0x1a>
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	b103      	cbz	r3, 800325a <_sbrk_r+0x1a>
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	20000398 	.word	0x20000398

08003260 <_raise_r>:
 8003260:	291f      	cmp	r1, #31
 8003262:	b538      	push	{r3, r4, r5, lr}
 8003264:	4604      	mov	r4, r0
 8003266:	460d      	mov	r5, r1
 8003268:	d904      	bls.n	8003274 <_raise_r+0x14>
 800326a:	2316      	movs	r3, #22
 800326c:	6003      	str	r3, [r0, #0]
 800326e:	f04f 30ff 	mov.w	r0, #4294967295
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003276:	b112      	cbz	r2, 800327e <_raise_r+0x1e>
 8003278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800327c:	b94b      	cbnz	r3, 8003292 <_raise_r+0x32>
 800327e:	4620      	mov	r0, r4
 8003280:	f000 f830 	bl	80032e4 <_getpid_r>
 8003284:	462a      	mov	r2, r5
 8003286:	4601      	mov	r1, r0
 8003288:	4620      	mov	r0, r4
 800328a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800328e:	f000 b817 	b.w	80032c0 <_kill_r>
 8003292:	2b01      	cmp	r3, #1
 8003294:	d00a      	beq.n	80032ac <_raise_r+0x4c>
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	d103      	bne.n	80032a2 <_raise_r+0x42>
 800329a:	2316      	movs	r3, #22
 800329c:	6003      	str	r3, [r0, #0]
 800329e:	2001      	movs	r0, #1
 80032a0:	e7e7      	b.n	8003272 <_raise_r+0x12>
 80032a2:	2400      	movs	r4, #0
 80032a4:	4628      	mov	r0, r5
 80032a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80032aa:	4798      	blx	r3
 80032ac:	2000      	movs	r0, #0
 80032ae:	e7e0      	b.n	8003272 <_raise_r+0x12>

080032b0 <raise>:
 80032b0:	4b02      	ldr	r3, [pc, #8]	; (80032bc <raise+0xc>)
 80032b2:	4601      	mov	r1, r0
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	f7ff bfd3 	b.w	8003260 <_raise_r>
 80032ba:	bf00      	nop
 80032bc:	20000050 	.word	0x20000050

080032c0 <_kill_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	2300      	movs	r3, #0
 80032c4:	4d06      	ldr	r5, [pc, #24]	; (80032e0 <_kill_r+0x20>)
 80032c6:	4604      	mov	r4, r0
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	f7fd fe28 	bl	8000f22 <_kill>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d102      	bne.n	80032dc <_kill_r+0x1c>
 80032d6:	682b      	ldr	r3, [r5, #0]
 80032d8:	b103      	cbz	r3, 80032dc <_kill_r+0x1c>
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	bd38      	pop	{r3, r4, r5, pc}
 80032de:	bf00      	nop
 80032e0:	20000398 	.word	0x20000398

080032e4 <_getpid_r>:
 80032e4:	f7fd be16 	b.w	8000f14 <_getpid>

080032e8 <__malloc_lock>:
 80032e8:	4801      	ldr	r0, [pc, #4]	; (80032f0 <__malloc_lock+0x8>)
 80032ea:	f000 b809 	b.w	8003300 <__retarget_lock_acquire_recursive>
 80032ee:	bf00      	nop
 80032f0:	2000039c 	.word	0x2000039c

080032f4 <__malloc_unlock>:
 80032f4:	4801      	ldr	r0, [pc, #4]	; (80032fc <__malloc_unlock+0x8>)
 80032f6:	f000 b804 	b.w	8003302 <__retarget_lock_release_recursive>
 80032fa:	bf00      	nop
 80032fc:	2000039c 	.word	0x2000039c

08003300 <__retarget_lock_acquire_recursive>:
 8003300:	4770      	bx	lr

08003302 <__retarget_lock_release_recursive>:
 8003302:	4770      	bx	lr

08003304 <_init>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	bf00      	nop
 8003308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330a:	bc08      	pop	{r3}
 800330c:	469e      	mov	lr, r3
 800330e:	4770      	bx	lr

08003310 <_fini>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr
