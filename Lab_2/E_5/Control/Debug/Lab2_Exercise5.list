
Lab2_Exercise5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002af8  08002af8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af8  08002af8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000074  08002b78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002b78  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab22  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002616  00000000  00000000  0002abbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ca2  00000000  00000000  0002e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0b2  00000000  00000000  00048442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088167  00000000  00000000  000544f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc65b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000dc6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a80 	.word	0x08002a80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002a80 	.word	0x08002a80

0800014c <_ZN7ServiceC1Ev>:
 */

#ifndef INC_SERVICE_H_
#define INC_SERVICE_H_

class Service {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <_ZN7ServiceC1Ev+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	08002acc 	.word	0x08002acc

0800016c <_ZN12ClockServiceC1EP5Timer>:
 *      Author: Nguyen Tran
 */

#include "clock_service.h"

ClockService::ClockService(Timer *timer) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	6039      	str	r1, [r7, #0]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	4618      	mov	r0, r3
 800017a:	f7ff ffe7 	bl	800014c <_ZN7ServiceC1Ev>
 800017e:	4a05      	ldr	r2, [pc, #20]	; (8000194 <_ZN12ClockServiceC1EP5Timer+0x28>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	601a      	str	r2, [r3, #0]
	this->timer = timer;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	605a      	str	r2, [r3, #4]
}
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4618      	mov	r0, r3
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	08002ac0 	.word	0x08002ac0

08000198 <_ZN12ClockService3runERi>:

void ClockService::run(int &status) {
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <_ZN12ClockService3runERiS0_RA4_i>:

void ClockService::run(int &status, int &clock, int (&buffer)[4]) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
 80001b8:	603b      	str	r3, [r7, #0]
	switch (status) {
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d002      	beq.n	80001c8 <_ZN12ClockService3runERiS0_RA4_i+0x1c>
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d00b      	beq.n	80001de <_ZN12ClockService3runERiS0_RA4_i+0x32>
			timer->setTimer(1000);
			status = CLOCK_RUN;
		}
		break;
	}
}
 80001c6:	e066      	b.n	8000296 <_ZN12ClockService3runERiS0_RA4_i+0xea>
		timer->setTimer(1000);
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 ffe1 	bl	8001198 <_ZN5Timer8setTimerEi>
		status = CLOCK_RUN;
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	2202      	movs	r2, #2
 80001da:	601a      	str	r2, [r3, #0]
		break;
 80001dc:	e05b      	b.n	8000296 <_ZN12ClockService3runERiS0_RA4_i+0xea>
		if (timer->hasSignal()) {
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 ffcd 	bl	8001182 <_ZN5Timer9hasSignalEv>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d052      	beq.n	8000294 <_ZN12ClockService3runERiS0_RA4_i+0xe8>
			clock += 1;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	601a      	str	r2, [r3, #0]
			if (clock >= 60) {
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b3b      	cmp	r3, #59	; 0x3b
 80001fe:	dd07      	ble.n	8000210 <_ZN12ClockService3runERiS0_RA4_i+0x64>
				clock = 0;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
				buffer[3] += 1;
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	1c5a      	adds	r2, r3, #1
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	60da      	str	r2, [r3, #12]
			if (buffer[3] >= 10) {
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	2b09      	cmp	r3, #9
 8000216:	dd07      	ble.n	8000228 <_ZN12ClockService3runERiS0_RA4_i+0x7c>
				buffer[3] = 0;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
				buffer[2] += 1;
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	609a      	str	r2, [r3, #8]
			if (buffer[2] >= 6) {
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	2b05      	cmp	r3, #5
 800022e:	dd07      	ble.n	8000240 <_ZN12ClockService3runERiS0_RA4_i+0x94>
				buffer[2] = 0;
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
				buffer[1] += 1;
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	605a      	str	r2, [r3, #4]
			if (buffer[1] >= 10) {
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	2b09      	cmp	r3, #9
 8000246:	dd07      	ble.n	8000258 <_ZN12ClockService3runERiS0_RA4_i+0xac>
				buffer[1] = 0;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	605a      	str	r2, [r3, #4]
				buffer[0] += 1;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1c5a      	adds	r2, r3, #1
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	601a      	str	r2, [r3, #0]
			if (buffer[0] == 2 && buffer[1] == 4) {
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b02      	cmp	r3, #2
 800025e:	d10f      	bne.n	8000280 <_ZN12ClockService3runERiS0_RA4_i+0xd4>
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	2b04      	cmp	r3, #4
 8000266:	d10b      	bne.n	8000280 <_ZN12ClockService3runERiS0_RA4_i+0xd4>
				buffer[0] = 0;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
				buffer[1] = 0;
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
				buffer[2] = 0;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
				buffer[3] = 0;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
			timer->setTimer(1000);
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000288:	4618      	mov	r0, r3
 800028a:	f000 ff85 	bl	8001198 <_ZN5Timer8setTimerEi>
			status = CLOCK_RUN;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
		break;
 8000294:	bf00      	nop
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <_ZN15LabThreeServiceC1EP5TimerP10SegmentLedS3_S3_S3_>:
 */

#include <lab_three_service.h>
#include "states.h"

LabThreeService::LabThreeService(Timer *timer, SegmentLed *hourLeft,
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	603b      	str	r3, [r7, #0]
		SegmentLed *hourRight, SegmentLed *minuteLeft,
		SegmentLed *minuteRight) {
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff4b 	bl	800014c <_ZN7ServiceC1Ev>
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <_ZN15LabThreeServiceC1EP5TimerP10SegmentLedS3_S3_S3_+0x44>)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]
	this->timer = timer;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	605a      	str	r2, [r3, #4]
	this->hourLeft = hourLeft;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]
	this->hourRight = hourRight;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	60da      	str	r2, [r3, #12]
	this->minuteLeft = minuteLeft;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	69ba      	ldr	r2, [r7, #24]
 80002d2:	611a      	str	r2, [r3, #16]
	this->minuteRight = minuteRight;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	69fa      	ldr	r2, [r7, #28]
 80002d8:	615a      	str	r2, [r3, #20]
}
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	4618      	mov	r0, r3
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	08002ad8 	.word	0x08002ad8

080002e8 <_ZN15LabThreeService3runERi>:

void LabThreeService::run(int &status) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <_ZN15LabThreeService3runERiRA4_i>:

void LabThreeService::run(int &status, int (&buffer)[4]) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
	switch (status) {
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	2b04      	cmp	r3, #4
 8000310:	f200 80ef 	bhi.w	80004f2 <_ZN15LabThreeService3runERiRA4_i+0x1f6>
 8000314:	a201      	add	r2, pc, #4	; (adr r2, 800031c <_ZN15LabThreeService3runERiRA4_i+0x20>)
 8000316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031a:	bf00      	nop
 800031c:	08000331 	.word	0x08000331
 8000320:	0800037d 	.word	0x0800037d
 8000324:	080003db 	.word	0x080003db
 8000328:	08000439 	.word	0x08000439
 800032c:	08000497 	.word	0x08000497
	case INIT:
		hourLeft->turnOn();
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fd97 	bl	8000e68 <_ZN10SegmentLed6turnOnEv>
		hourRight->turnOff();
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 fd9f 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
		minuteLeft->turnOff();
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fd9a 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
		minuteRight->turnOff();
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fd95 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>

		hourLeft->update(buffer[0]);
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	4610      	mov	r0, r2
 8000364:	f000 fbe8 	bl	8000b38 <_ZN10SegmentLed6updateEi>

		status = TWO_ON;
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	2203      	movs	r2, #3
 800036c:	601a      	str	r2, [r3, #0]
		timer->setTimer(250);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	21fa      	movs	r1, #250	; 0xfa
 8000374:	4618      	mov	r0, r3
 8000376:	f000 ff0f 	bl	8001198 <_ZN5Timer8setTimerEi>
		break;
 800037a:	e0c3      	b.n	8000504 <_ZN15LabThreeService3runERiRA4_i+0x208>
	case ONE_ON:
		if (timer->hasSignal()) {
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fefe 	bl	8001182 <_ZN5Timer9hasSignalEv>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	f000 80b4 	beq.w	80004f6 <_ZN15LabThreeService3runERiRA4_i+0x1fa>
			hourLeft->turnOn();
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fd68 	bl	8000e68 <_ZN10SegmentLed6turnOnEv>
			hourRight->turnOff();
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fd70 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			minuteLeft->turnOff();
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fd6b 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			minuteRight->turnOff();
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fd66 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>

			hourLeft->update(buffer[0]);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4619      	mov	r1, r3
 80003c0:	4610      	mov	r0, r2
 80003c2:	f000 fbb9 	bl	8000b38 <_ZN10SegmentLed6updateEi>

			status = TWO_ON;
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	2203      	movs	r2, #3
 80003ca:	601a      	str	r2, [r3, #0]
			timer->setTimer(250);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	21fa      	movs	r1, #250	; 0xfa
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fee0 	bl	8001198 <_ZN5Timer8setTimerEi>
		}
		break;
 80003d8:	e08d      	b.n	80004f6 <_ZN15LabThreeService3runERiRA4_i+0x1fa>
	case TWO_ON:
		if (timer->hasSignal()) {
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fecf 	bl	8001182 <_ZN5Timer9hasSignalEv>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f000 8087 	beq.w	80004fa <_ZN15LabThreeService3runERiRA4_i+0x1fe>
			hourLeft->turnOff();
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fd46 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			hourRight->turnOn();
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fd34 	bl	8000e68 <_ZN10SegmentLed6turnOnEv>
			minuteLeft->turnOff();
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fd3c 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			minuteRight->turnOff();
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fd37 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>

			hourRight->update(buffer[1]);
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	68da      	ldr	r2, [r3, #12]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	4619      	mov	r1, r3
 800041e:	4610      	mov	r0, r2
 8000420:	f000 fb8a 	bl	8000b38 <_ZN10SegmentLed6updateEi>

			status = THREE_ON;
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2204      	movs	r2, #4
 8000428:	601a      	str	r2, [r3, #0]
			timer->setTimer(250);
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	21fa      	movs	r1, #250	; 0xfa
 8000430:	4618      	mov	r0, r3
 8000432:	f000 feb1 	bl	8001198 <_ZN5Timer8setTimerEi>
		}
		break;
 8000436:	e060      	b.n	80004fa <_ZN15LabThreeService3runERiRA4_i+0x1fe>
	case THREE_ON:
		if (timer->hasSignal()) {
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fea0 	bl	8001182 <_ZN5Timer9hasSignalEv>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d05a      	beq.n	80004fe <_ZN15LabThreeService3runERiRA4_i+0x202>
			hourRight->turnOff();
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 fd18 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			hourLeft->turnOff();
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fd13 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			minuteLeft->turnOn();
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fd01 	bl	8000e68 <_ZN10SegmentLed6turnOnEv>
			minuteRight->turnOff();
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fd09 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>

			minuteLeft->update(buffer[2]);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	691a      	ldr	r2, [r3, #16]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	4610      	mov	r0, r2
 800047c:	f000 fb5c 	bl	8000b38 <_ZN10SegmentLed6updateEi>

			status = FOUR_ON;
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2205      	movs	r2, #5
 8000484:	601a      	str	r2, [r3, #0]
			timer->setTimer(500);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fe82 	bl	8001198 <_ZN5Timer8setTimerEi>
		}
		break;
 8000494:	e033      	b.n	80004fe <_ZN15LabThreeService3runERiRA4_i+0x202>
	case FOUR_ON:
		if (timer->hasSignal()) {
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fe71 	bl	8001182 <_ZN5Timer9hasSignalEv>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d02d      	beq.n	8000502 <_ZN15LabThreeService3runERiRA4_i+0x206>
			hourLeft->turnOff();
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fce9 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			hourRight->turnOff();
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fce4 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			minuteLeft->turnOff();
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fcdf 	bl	8000e82 <_ZN10SegmentLed7turnOffEv>
			minuteRight->turnOn();
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fccd 	bl	8000e68 <_ZN10SegmentLed6turnOnEv>

			minuteRight->update(buffer[3]);
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	4619      	mov	r1, r3
 80004d8:	4610      	mov	r0, r2
 80004da:	f000 fb2d 	bl	8000b38 <_ZN10SegmentLed6updateEi>

			status = ONE_ON;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2202      	movs	r2, #2
 80004e2:	601a      	str	r2, [r3, #0]
			timer->setTimer(250);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	21fa      	movs	r1, #250	; 0xfa
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fe54 	bl	8001198 <_ZN5Timer8setTimerEi>
		}
		break;
 80004f0:	e007      	b.n	8000502 <_ZN15LabThreeService3runERiRA4_i+0x206>
	default:
		break;
 80004f2:	bf00      	nop
 80004f4:	e006      	b.n	8000504 <_ZN15LabThreeService3runERiRA4_i+0x208>
		break;
 80004f6:	bf00      	nop
 80004f8:	e004      	b.n	8000504 <_ZN15LabThreeService3runERiRA4_i+0x208>
		break;
 80004fa:	bf00      	nop
 80004fc:	e002      	b.n	8000504 <_ZN15LabThreeService3runERiRA4_i+0x208>
		break;
 80004fe:	bf00      	nop
 8000500:	e000      	b.n	8000504 <_ZN15LabThreeService3runERiRA4_i+0x208>
		break;
 8000502:	bf00      	nop
	}
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b0a3      	sub	sp, #140	; 0x8c
 8000510:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000512:	f000 fe7f 	bl	8001214 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000516:	f000 f961 	bl	80007dc <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	PinPair *seperator = new PinPair(O_DOT_GPIO_Port, O_DOT_Pin);
 800051a:	2008      	movs	r0, #8
 800051c:	f002 f94a 	bl	80027b4 <_Znwj>
 8000520:	4603      	mov	r3, r0
 8000522:	461c      	mov	r4, r3
 8000524:	2210      	movs	r2, #16
 8000526:	4997      	ldr	r1, [pc, #604]	; (8000784 <main+0x278>)
 8000528:	4620      	mov	r0, r4
 800052a:	f000 fa91 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 800052e:	66fc      	str	r4, [r7, #108]	; 0x6c

	PinPair *hourLeftSignal = new PinPair(O_EN0_GPIO_Port, O_EN0_Pin);
 8000530:	2008      	movs	r0, #8
 8000532:	f002 f93f 	bl	80027b4 <_Znwj>
 8000536:	4603      	mov	r3, r0
 8000538:	461c      	mov	r4, r3
 800053a:	2240      	movs	r2, #64	; 0x40
 800053c:	4991      	ldr	r1, [pc, #580]	; (8000784 <main+0x278>)
 800053e:	4620      	mov	r0, r4
 8000540:	f000 fa86 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 8000544:	66bc      	str	r4, [r7, #104]	; 0x68
	PinPair *hourRightSignal = new PinPair(O_EN1_GPIO_Port, O_EN1_Pin);
 8000546:	2008      	movs	r0, #8
 8000548:	f002 f934 	bl	80027b4 <_Znwj>
 800054c:	4603      	mov	r3, r0
 800054e:	461c      	mov	r4, r3
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	498c      	ldr	r1, [pc, #560]	; (8000784 <main+0x278>)
 8000554:	4620      	mov	r0, r4
 8000556:	f000 fa7b 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 800055a:	667c      	str	r4, [r7, #100]	; 0x64
	PinPair *minuteLeftSignal = new PinPair(O_EN2_GPIO_Port, O_EN2_Pin);
 800055c:	2008      	movs	r0, #8
 800055e:	f002 f929 	bl	80027b4 <_Znwj>
 8000562:	4603      	mov	r3, r0
 8000564:	461c      	mov	r4, r3
 8000566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800056a:	4986      	ldr	r1, [pc, #536]	; (8000784 <main+0x278>)
 800056c:	4620      	mov	r0, r4
 800056e:	f000 fa6f 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 8000572:	663c      	str	r4, [r7, #96]	; 0x60
	PinPair *minuteRightSignal = new PinPair(O_EN3_GPIO_Port, O_EN3_Pin);
 8000574:	2008      	movs	r0, #8
 8000576:	f002 f91d 	bl	80027b4 <_Znwj>
 800057a:	4603      	mov	r3, r0
 800057c:	461c      	mov	r4, r3
 800057e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000582:	4980      	ldr	r1, [pc, #512]	; (8000784 <main+0x278>)
 8000584:	4620      	mov	r0, r4
 8000586:	f000 fa63 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 800058a:	65fc      	str	r4, [r7, #92]	; 0x5c

	PinPair *led0 = new PinPair(O_SEG0_GPIO_Port, O_SEG0_Pin);
 800058c:	2008      	movs	r0, #8
 800058e:	f002 f911 	bl	80027b4 <_Znwj>
 8000592:	4603      	mov	r3, r0
 8000594:	461c      	mov	r4, r3
 8000596:	2201      	movs	r2, #1
 8000598:	497b      	ldr	r1, [pc, #492]	; (8000788 <main+0x27c>)
 800059a:	4620      	mov	r0, r4
 800059c:	f000 fa58 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80005a0:	65bc      	str	r4, [r7, #88]	; 0x58
	PinPair *led1 = new PinPair(O_SEG1_GPIO_Port, O_SEG1_Pin);
 80005a2:	2008      	movs	r0, #8
 80005a4:	f002 f906 	bl	80027b4 <_Znwj>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461c      	mov	r4, r3
 80005ac:	2202      	movs	r2, #2
 80005ae:	4976      	ldr	r1, [pc, #472]	; (8000788 <main+0x27c>)
 80005b0:	4620      	mov	r0, r4
 80005b2:	f000 fa4d 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80005b6:	657c      	str	r4, [r7, #84]	; 0x54
	PinPair *led2 = new PinPair(O_SEG2_GPIO_Port, O_SEG2_Pin);
 80005b8:	2008      	movs	r0, #8
 80005ba:	f002 f8fb 	bl	80027b4 <_Znwj>
 80005be:	4603      	mov	r3, r0
 80005c0:	461c      	mov	r4, r3
 80005c2:	2204      	movs	r2, #4
 80005c4:	4970      	ldr	r1, [pc, #448]	; (8000788 <main+0x27c>)
 80005c6:	4620      	mov	r0, r4
 80005c8:	f000 fa42 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80005cc:	653c      	str	r4, [r7, #80]	; 0x50
	PinPair *led3 = new PinPair(O_SEG3_GPIO_Port, O_SEG3_Pin);
 80005ce:	2008      	movs	r0, #8
 80005d0:	f002 f8f0 	bl	80027b4 <_Znwj>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461c      	mov	r4, r3
 80005d8:	2208      	movs	r2, #8
 80005da:	496b      	ldr	r1, [pc, #428]	; (8000788 <main+0x27c>)
 80005dc:	4620      	mov	r0, r4
 80005de:	f000 fa37 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80005e2:	64fc      	str	r4, [r7, #76]	; 0x4c
	PinPair *led4 = new PinPair(O_SEG4_GPIO_Port, O_SEG4_Pin);
 80005e4:	2008      	movs	r0, #8
 80005e6:	f002 f8e5 	bl	80027b4 <_Znwj>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461c      	mov	r4, r3
 80005ee:	2210      	movs	r2, #16
 80005f0:	4965      	ldr	r1, [pc, #404]	; (8000788 <main+0x27c>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	f000 fa2c 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 80005f8:	64bc      	str	r4, [r7, #72]	; 0x48
	PinPair *led5 = new PinPair(O_SEG5_GPIO_Port, O_SEG5_Pin);
 80005fa:	2008      	movs	r0, #8
 80005fc:	f002 f8da 	bl	80027b4 <_Znwj>
 8000600:	4603      	mov	r3, r0
 8000602:	461c      	mov	r4, r3
 8000604:	2220      	movs	r2, #32
 8000606:	4960      	ldr	r1, [pc, #384]	; (8000788 <main+0x27c>)
 8000608:	4620      	mov	r0, r4
 800060a:	f000 fa21 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 800060e:	647c      	str	r4, [r7, #68]	; 0x44
	PinPair *led6 = new PinPair(O_SEG6_GPIO_Port, O_SEG6_Pin);
 8000610:	2008      	movs	r0, #8
 8000612:	f002 f8cf 	bl	80027b4 <_Znwj>
 8000616:	4603      	mov	r3, r0
 8000618:	461c      	mov	r4, r3
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	495a      	ldr	r1, [pc, #360]	; (8000788 <main+0x27c>)
 800061e:	4620      	mov	r0, r4
 8000620:	f000 fa16 	bl	8000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>
 8000624:	643c      	str	r4, [r7, #64]	; 0x40
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000626:	f000 f97b 	bl	8000920 <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 800062a:	f000 f91d 	bl	8000868 <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 800062e:	4857      	ldr	r0, [pc, #348]	; (800078c <main+0x280>)
 8000630:	f001 fd2c 	bl	800208c <HAL_TIM_Base_Start_IT>

	SegmentLed *hourLeft = new SegmentLed(hourLeftSignal, led0, led1, led2,
			led3, led4, led5, led6);
 8000634:	2020      	movs	r0, #32
 8000636:	f002 f8bd 	bl	80027b4 <_Znwj>
 800063a:	4603      	mov	r3, r0
 800063c:	461c      	mov	r4, r3
 800063e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000640:	9304      	str	r3, [sp, #16]
 8000642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000644:	9303      	str	r3, [sp, #12]
 8000646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000658:	4620      	mov	r0, r4
 800065a:	f000 fa48 	bl	8000aee <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>
 800065e:	63fc      	str	r4, [r7, #60]	; 0x3c
	SegmentLed *hourRight = new SegmentLed(hourRightSignal, led0, led1, led2,
			led3, led4, led5, led6);
 8000660:	2020      	movs	r0, #32
 8000662:	f002 f8a7 	bl	80027b4 <_Znwj>
 8000666:	4603      	mov	r3, r0
 8000668:	461c      	mov	r4, r3
 800066a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800066c:	9304      	str	r3, [sp, #16]
 800066e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000670:	9303      	str	r3, [sp, #12]
 8000672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000682:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000684:	4620      	mov	r0, r4
 8000686:	f000 fa32 	bl	8000aee <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>
 800068a:	63bc      	str	r4, [r7, #56]	; 0x38
	SegmentLed *minuteLeft = new SegmentLed(minuteLeftSignal, led0, led1, led2,
			led3, led4, led5, led6);
 800068c:	2020      	movs	r0, #32
 800068e:	f002 f891 	bl	80027b4 <_Znwj>
 8000692:	4603      	mov	r3, r0
 8000694:	461c      	mov	r4, r3
 8000696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000698:	9304      	str	r3, [sp, #16]
 800069a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800069c:	9303      	str	r3, [sp, #12]
 800069e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80006b0:	4620      	mov	r0, r4
 80006b2:	f000 fa1c 	bl	8000aee <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>
 80006b6:	637c      	str	r4, [r7, #52]	; 0x34
	SegmentLed *minuteRight = new SegmentLed(minuteRightSignal, led0, led1,
			led2, led3, led4, led5, led6);
 80006b8:	2020      	movs	r0, #32
 80006ba:	f002 f87b 	bl	80027b4 <_Znwj>
 80006be:	4603      	mov	r3, r0
 80006c0:	461c      	mov	r4, r3
 80006c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c4:	9304      	str	r3, [sp, #16]
 80006c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006c8:	9303      	str	r3, [sp, #12]
 80006ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80006dc:	4620      	mov	r0, r4
 80006de:	f000 fa06 	bl	8000aee <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>
 80006e2:	633c      	str	r4, [r7, #48]	; 0x30

	LabThreeService *service = new LabThreeService(timer, hourLeft, hourRight,
			minuteLeft, minuteRight);
 80006e4:	2018      	movs	r0, #24
 80006e6:	f002 f865 	bl	80027b4 <_Znwj>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461c      	mov	r4, r3
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <main+0x284>)
 80006f0:	6819      	ldr	r1, [r3, #0]
 80006f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006fe:	4620      	mov	r0, r4
 8000700:	f7ff fdce 	bl	80002a0 <_ZN15LabThreeServiceC1EP5TimerP10SegmentLedS3_S3_S3_>
 8000704:	62fc      	str	r4, [r7, #44]	; 0x2c

	SeperatorLedService *seperatorService = new SeperatorLedService(
			secondaryTimer, seperator);
 8000706:	200c      	movs	r0, #12
 8000708:	f002 f854 	bl	80027b4 <_Znwj>
 800070c:	4603      	mov	r3, r0
 800070e:	461c      	mov	r4, r3
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <main+0x288>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000716:	4619      	mov	r1, r3
 8000718:	4620      	mov	r0, r4
 800071a:	f000 fbbf 	bl	8000e9c <_ZN19SeperatorLedServiceC1EP5TimerP7PinPair>
 800071e:	62bc      	str	r4, [r7, #40]	; 0x28

	ClockService *clockService = new ClockService(clockTimer);
 8000720:	2008      	movs	r0, #8
 8000722:	f002 f847 	bl	80027b4 <_Znwj>
 8000726:	4603      	mov	r3, r0
 8000728:	461c      	mov	r4, r3
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <main+0x28c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	4620      	mov	r0, r4
 8000732:	f7ff fd1b 	bl	800016c <_ZN12ClockServiceC1EP5Timer>
 8000736:	627c      	str	r4, [r7, #36]	; 0x24

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int status = INIT;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]

	int seperatorStatus = INIT;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]

	int clockStatus = INIT;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
	int clock = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

	int led_buffer[4] = { 1, 9, 5, 5 };
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <main+0x290>)
 800074a:	1d3c      	adds	r4, r7, #4
 800074c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	while (1) {
		/* USER CODE END WHILE */
		clockService->run(clockStatus, clock, led_buffer);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	f107 0214 	add.w	r2, r7, #20
 8000758:	f107 0118 	add.w	r1, r7, #24
 800075c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075e:	f7ff fd25 	bl	80001ac <_ZN12ClockService3runERiS0_RA4_i>

		service->run(status, led_buffer);
 8000762:	1d3a      	adds	r2, r7, #4
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4619      	mov	r1, r3
 800076a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800076c:	f7ff fdc6 	bl	80002fc <_ZN15LabThreeService3runERiRA4_i>

		seperatorService->run(seperatorStatus);
 8000770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f107 021c 	add.w	r2, r7, #28
 800077a:	4611      	mov	r1, r2
 800077c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800077e:	4798      	blx	r3
		clockService->run(clockStatus, clock, led_buffer);
 8000780:	e7e7      	b.n	8000752 <main+0x246>
 8000782:	bf00      	nop
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00
 800078c:	20000090 	.word	0x20000090
 8000790:	200000d8 	.word	0x200000d8
 8000794:	200000dc 	.word	0x200000dc
 8000798:	200000e0 	.word	0x200000e0
 800079c:	08002a98 	.word	0x08002a98

080007a0 <HAL_TIM_PeriodElapsedCallback>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	clockTimer->run();
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fccf 	bl	8001150 <_ZN5Timer3runEv>
	timer->run();
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fcca 	bl	8001150 <_ZN5Timer3runEv>
	secondaryTimer->run();
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fcc5 	bl	8001150 <_ZN5Timer3runEv>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000e0 	.word	0x200000e0
 80007d4:	200000d8 	.word	0x200000d8
 80007d8:	200000dc 	.word	0x200000dc

080007dc <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b090      	sub	sp, #64	; 0x40
 80007e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f84a 	bl	8002884 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f802 	bl	800181c <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <_Z18SystemClock_Configv+0x50>
		Error_Handler();
 8000828:	f000 f8ce 	bl	80009c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fa6b 	bl	8001d20 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf14      	ite	ne
 8000850:	2301      	movne	r3, #1
 8000852:	2300      	moveq	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <_Z18SystemClock_Configv+0x82>
		Error_Handler();
 800085a:	f000 f8b5 	bl	80009c8 <Error_Handler>
	}
}
 800085e:	bf00      	nop
 8000860:	3740      	adds	r7, #64	; 0x40
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 800088e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000892:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 800089c:	2209      	movs	r2, #9
 800089e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 80008ae:	f001 fb9d 	bl	8001fec <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <_ZL12MX_TIM2_Initv+0x5e>
		Error_Handler();
 80008c2:	f000 f881 	bl	80009c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 80008d4:	f001 fd2e 	bl	8002334 <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <_ZL12MX_TIM2_Initv+0x84>
		Error_Handler();
 80008e8:	f000 f86e 	bl	80009c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <_ZL12MX_TIM2_Initv+0xb4>)
 80008fa:	f001 fef1 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <_ZL12MX_TIM2_Initv+0xaa>
		Error_Handler();
 800090e:	f000 f85b 	bl	80009c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000090 	.word	0x20000090

08000920 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <_ZL12MX_GPIO_Initv+0x9c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <_ZL12MX_GPIO_Initv+0x9c>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <_ZL12MX_GPIO_Initv+0x9c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <_ZL12MX_GPIO_Initv+0x9c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <_ZL12MX_GPIO_Initv+0x9c>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <_ZL12MX_GPIO_Initv+0x9c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800096a:	4815      	ldr	r0, [pc, #84]	; (80009c0 <_ZL12MX_GPIO_Initv+0xa0>)
 800096c:	f000 ff3e 	bl	80017ec <HAL_GPIO_WritePin>
	O_DOT_Pin | O_LED_Pin | O_EN0_Pin | O_EN1_Pin | O_EN2_Pin | O_EN3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000970:	2200      	movs	r2, #0
 8000972:	217f      	movs	r1, #127	; 0x7f
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <_ZL12MX_GPIO_Initv+0xa4>)
 8000976:	f000 ff39 	bl	80017ec <HAL_GPIO_WritePin>
			O_SEG0_Pin | O_SEG1_Pin | O_SEG2_Pin | O_SEG3_Pin | O_SEG4_Pin
					| O_SEG5_Pin | O_SEG6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : O_DOT_Pin O_LED_Pin O_EN0_Pin O_EN1_Pin
	 O_EN2_Pin O_EN3_Pin */
	GPIO_InitStruct.Pin = O_DOT_Pin | O_LED_Pin | O_EN0_Pin | O_EN1_Pin
 800097a:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800097e:	60bb      	str	r3, [r7, #8]
			| O_EN2_Pin | O_EN3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2302      	movs	r3, #2
 800098a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4619      	mov	r1, r3
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <_ZL12MX_GPIO_Initv+0xa0>)
 8000994:	f000 fdae 	bl	80014f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : O_SEG0_Pin O_SEG1_Pin O_SEG2_Pin O_SEG3_Pin
	 O_SEG4_Pin O_SEG5_Pin O_SEG6_Pin */
	GPIO_InitStruct.Pin = O_SEG0_Pin | O_SEG1_Pin | O_SEG2_Pin | O_SEG3_Pin
 8000998:	237f      	movs	r3, #127	; 0x7f
 800099a:	60bb      	str	r3, [r7, #8]
			| O_SEG4_Pin | O_SEG5_Pin | O_SEG6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <_ZL12MX_GPIO_Initv+0xa4>)
 80009b0:	f000 fda0 	bl	80014f4 <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d122      	bne.n	8000a2a <_Z41__static_initialization_and_destruction_0ii+0x56>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d11d      	bne.n	8000a2a <_Z41__static_initialization_and_destruction_0ii+0x56>
Timer *timer = new Timer();
 80009ee:	2008      	movs	r0, #8
 80009f0:	f001 fee0 	bl	80027b4 <_Znwj>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461c      	mov	r4, r3
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 fb99 	bl	8001130 <_ZN5TimerC1Ev>
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a00:	601c      	str	r4, [r3, #0]
Timer *secondaryTimer = new Timer();
 8000a02:	2008      	movs	r0, #8
 8000a04:	f001 fed6 	bl	80027b4 <_Znwj>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f000 fb8f 	bl	8001130 <_ZN5TimerC1Ev>
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000a14:	601c      	str	r4, [r3, #0]
Timer *clockTimer = new Timer();
 8000a16:	2008      	movs	r0, #8
 8000a18:	f001 fecc 	bl	80027b4 <_Znwj>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461c      	mov	r4, r3
 8000a20:	4620      	mov	r0, r4
 8000a22:	f000 fb85 	bl	8001130 <_ZN5TimerC1Ev>
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000a28:	601c      	str	r4, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000d8 	.word	0x200000d8
 8000a38:	200000dc 	.word	0x200000dc
 8000a3c:	200000e0 	.word	0x200000e0

08000a40 <_GLOBAL__sub_I_htim2>:
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ffc3 	bl	80009d4 <_Z41__static_initialization_and_destruction_0ii>
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN7PinPairC1EP12GPIO_TypeDeft>:
#include <pin_pair.h>

PinPair::PinPair(GPIO_TypeDef *port, uint16_t pin) {
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	80fb      	strh	r3, [r7, #6]
	this->pin = pin;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	809a      	strh	r2, [r3, #4]
	this->port = port;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	601a      	str	r2, [r3, #0]
	this->isActive = false;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	719a      	strb	r2, [r3, #6]
}
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <_ZN7PinPair3setEv>:

uint16_t PinPair::getPin() {
	return this->pin;
}

void PinPair::set() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if (this->port != nullptr) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00a      	beq.n	8000aa2 <_ZN7PinPair3setEv+0x26>
		HAL_GPIO_WritePin(this->port, this->pin, GPIO_PinState::GPIO_PIN_RESET);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	889b      	ldrh	r3, [r3, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	4619      	mov	r1, r3
 8000a98:	f000 fea8 	bl	80017ec <HAL_GPIO_WritePin>
		this->isActive = true;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	719a      	strb	r2, [r3, #6]
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_ZN7PinPair5resetEv>:

void PinPair::reset() {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	if (this->port != nullptr) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00a      	beq.n	8000ad0 <_ZN7PinPair5resetEv+0x26>
		HAL_GPIO_WritePin(this->port, this->pin, GPIO_PinState::GPIO_PIN_SET);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	889b      	ldrh	r3, [r3, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f000 fe91 	bl	80017ec <HAL_GPIO_WritePin>
		this->isActive = false;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	719a      	strb	r2, [r3, #6]
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_ZN7PinPair4isOnEv>:

bool PinPair::isOn() {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	return this->isActive;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	799b      	ldrb	r3, [r3, #6]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <_ZN10SegmentLedC1EP7PinPairS1_S1_S1_S1_S1_S1_S1_>:
#include "segment_led.h"

SegmentLed::SegmentLed(PinPair *state, PinPair *led0, PinPair *led1,
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	603b      	str	r3, [r7, #0]
		PinPair *led2, PinPair *led3, PinPair *led4, PinPair *led5,
		PinPair *led6) {
	this->state = state;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	601a      	str	r2, [r3, #0]
	this->led0 = led0;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	605a      	str	r2, [r3, #4]
	this->led1 = led1;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	609a      	str	r2, [r3, #8]
	this->led2 = led2;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	60da      	str	r2, [r3, #12]
	this->led3 = led3;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	611a      	str	r2, [r3, #16]
	this->led4 = led4;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	615a      	str	r2, [r3, #20]
	this->led5 = led5;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b24:	619a      	str	r2, [r3, #24]
	this->led6 = led6;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b2a:	61da      	str	r2, [r3, #28]
}
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <_ZN10SegmentLed6updateEi>:

void SegmentLed::update(int index) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	if (this->state->isOn()) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ffc6 	bl	8000ad8 <_ZN7PinPair4isOnEv>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8185 	beq.w	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		switch (index) {
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b09      	cmp	r3, #9
 8000b58:	f200 8180 	bhi.w	8000e5c <_ZN10SegmentLed6updateEi+0x324>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <_ZN10SegmentLed6updateEi+0x2c>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b8d 	.word	0x08000b8d
 8000b68:	08000bd5 	.word	0x08000bd5
 8000b6c:	08000c1d 	.word	0x08000c1d
 8000b70:	08000c65 	.word	0x08000c65
 8000b74:	08000cad 	.word	0x08000cad
 8000b78:	08000cf5 	.word	0x08000cf5
 8000b7c:	08000d3d 	.word	0x08000d3d
 8000b80:	08000d85 	.word	0x08000d85
 8000b84:	08000dcd 	.word	0x08000dcd
 8000b88:	08000e15 	.word	0x08000e15
		case 0:
			this->led0->set();
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff73 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->set();
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff6e 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff69 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->set();
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff64 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->set();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led5->set();
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff5a 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led6->reset();
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff6c 	bl	8000aaa <_ZN7PinPair5resetEv>
			break;
 8000bd2:	e144      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 1:
			this->led0->reset();
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff66 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led1->set();
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff4a 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff45 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->reset();
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff57 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led4->reset();
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff52 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led5->reset();
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff4d 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led6->reset();
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff48 	bl	8000aaa <_ZN7PinPair5resetEv>
			break;
 8000c1a:	e120      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 2:
			this->led0->set();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff2b 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->set();
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff26 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->reset();
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff38 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led3->set();
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff1c 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->set();
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff17 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led5->reset();
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff29 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led6->set();
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff0d 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000c62:	e0fc      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 3:
			this->led0->set();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff07 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->set();
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff02 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fefd 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->set();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fef8 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->reset();
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff0a 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led5->reset();
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff05 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led6->set();
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fee9 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000caa:	e0d8      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 4:
			this->led0->reset();
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fefa 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led1->set();
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fede 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fed9 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->reset();
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff feeb 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led4->reset();
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fee6 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led5->set();
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff feca 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led6->set();
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fec5 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000cf2:	e0b4      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 5:
			this->led0->set();
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff febf 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->reset();
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fed1 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led2->set();
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff feb5 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->set();
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff feb0 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->reset();
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fec2 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led5->set();
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fea6 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led6->set();
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fea1 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000d3a:	e090      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 6:
			this->led0->set();
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fe9b 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->reset();
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fead 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led2->set();
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe91 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->set();
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe8c 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->set();
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe87 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led5->set();
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe82 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led6->set();
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe7d 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000d82:	e06c      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 7:
			this->led0->set();
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fe77 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->set();
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fe72 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe6d 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->reset();
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fe7f 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led4->reset();
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe7a 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led5->reset();
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe75 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led6->reset();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe70 	bl	8000aaa <_ZN7PinPair5resetEv>
			break;
 8000dca:	e048      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 8:
			this->led0->set();
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fe53 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->set();
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe4e 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe49 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->set();
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe44 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->set();
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe3f 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led5->set();
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe3a 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led6->set();
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fe35 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000e12:	e024      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		case 9:
			this->led0->set();
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe2f 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led1->set();
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe2a 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led2->set();
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe25 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led3->set();
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fe20 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led4->reset();
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe32 	bl	8000aaa <_ZN7PinPair5resetEv>
			this->led5->set();
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe16 	bl	8000a7c <_ZN7PinPair3setEv>
			this->led6->set();
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe11 	bl	8000a7c <_ZN7PinPair3setEv>
			break;
 8000e5a:	e000      	b.n	8000e5e <_ZN10SegmentLed6updateEi+0x326>
		default:
			break;
 8000e5c:	bf00      	nop
		}
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop

08000e68 <_ZN10SegmentLed6turnOnEv>:
	this->led4->reset();
	this->led5->reset();
	this->led6->reset();
}

void SegmentLed::turnOn() {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	this->state->set();
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fe01 	bl	8000a7c <_ZN7PinPair3setEv>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZN10SegmentLed7turnOffEv>:

void SegmentLed::turnOff() {
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	this->state->reset();
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe0b 	bl	8000aaa <_ZN7PinPair5resetEv>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN19SeperatorLedServiceC1EP5TimerP7PinPair>:
 *  Created on: Oct 9, 2022
 *      Author: Nguyen Tran
 */
#include "seperator_led_service.h"

SeperatorLedService::SeperatorLedService(Timer *timer, PinPair *led) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f94e 	bl	800014c <_ZN7ServiceC1Ev>
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <_ZN19SeperatorLedServiceC1EP5TimerP7PinPair+0x30>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]
	this->timer = timer;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	605a      	str	r2, [r3, #4]
	this->led = led;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
}
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08002ae4 	.word	0x08002ae4

08000ed0 <_ZN19SeperatorLedService3runERi>:

void SeperatorLedService::run(int &status) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	switch (status) {
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d02e      	beq.n	8000f40 <_ZN19SeperatorLedService3runERi+0x70>
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	dc44      	bgt.n	8000f70 <_ZN19SeperatorLedService3runERi+0xa0>
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d002      	beq.n	8000ef0 <_ZN19SeperatorLedService3runERi+0x20>
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d010      	beq.n	8000f10 <_ZN19SeperatorLedService3runERi+0x40>
			status = SEPERATOR_ON;
			timer->setTimer(1000);
		}
		break;
	default:
		break;
 8000eee:	e03f      	b.n	8000f70 <_ZN19SeperatorLedService3runERi+0xa0>
		led->set();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fdc1 	bl	8000a7c <_ZN7PinPair3setEv>
		timer->setTimer(1000);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f948 	bl	8001198 <_ZN5Timer8setTimerEi>
		status = SEPERATOR_OFF;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	601a      	str	r2, [r3, #0]
		break;
 8000f0e:	e034      	b.n	8000f7a <_ZN19SeperatorLedService3runERi+0xaa>
		if (timer->hasSignal()) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f934 	bl	8001182 <_ZN5Timer9hasSignalEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d029      	beq.n	8000f74 <_ZN19SeperatorLedService3runERi+0xa4>
			led->set();
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fda9 	bl	8000a7c <_ZN7PinPair3setEv>
			status = SEPERATOR_OFF;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	601a      	str	r2, [r3, #0]
			timer->setTimer(1000);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f92d 	bl	8001198 <_ZN5Timer8setTimerEi>
		break;
 8000f3e:	e019      	b.n	8000f74 <_ZN19SeperatorLedService3runERi+0xa4>
		if (timer->hasSignal()) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f91c 	bl	8001182 <_ZN5Timer9hasSignalEv>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <_ZN19SeperatorLedService3runERi+0xa8>
			led->reset();
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fda8 	bl	8000aaa <_ZN7PinPair5resetEv>
			status = SEPERATOR_ON;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	601a      	str	r2, [r3, #0]
			timer->setTimer(1000);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f915 	bl	8001198 <_ZN5Timer8setTimerEi>
		break;
 8000f6e:	e003      	b.n	8000f78 <_ZN19SeperatorLedService3runERi+0xa8>
		break;
 8000f70:	bf00      	nop
 8000f72:	e002      	b.n	8000f7a <_ZN19SeperatorLedService3runERi+0xaa>
		break;
 8000f74:	bf00      	nop
 8000f76:	e000      	b.n	8000f7a <_ZN19SeperatorLedService3runERi+0xaa>
		break;
 8000f78:	bf00      	nop
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_MspInit+0x40>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_MspInit+0x40>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_MspInit+0x40>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_MspInit+0x40>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_MspInit+0x40>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_MspInit+0x40>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd8:	d113      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_TIM_Base_MspInit+0x44>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_TIM_Base_MspInit+0x44>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_TIM_Base_MspInit+0x44>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f000 fa45 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ffc:	201c      	movs	r0, #28
 8000ffe:	f000 fa5e 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001056:	f000 f923 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM2_IRQHandler+0x10>)
 8001066:	f001 f85d 	bl	8002124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000090 	.word	0x20000090

08001074 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return 1;
 8001078:	2301      	movs	r3, #1
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <_kill>:

int _kill(int pid, int sig) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800108c:	f001 fbc8 	bl	8002820 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	2216      	movs	r2, #22
 8001094:	601a      	str	r2, [r3, #0]
	return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_exit>:

void _exit(int status) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010aa:	f04f 31ff 	mov.w	r1, #4294967295
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffe7 	bl	8001082 <_kill>
	while (1) {
 80010b4:	e7fe      	b.n	80010b4 <_exit+0x12>
	...

080010b8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
		errno = ENOMEM;
 80010e8:	f001 fb9a 	bl	8002820 <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20002800 	.word	0x20002800
 8001118:	00000400 	.word	0x00000400
 800111c:	200000e4 	.word	0x200000e4
 8001120:	20000100 	.word	0x20000100

08001124 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <_ZN5TimerC1Ev>:
#include "timer.h"

Timer::Timer() {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	this->counter = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
	this->signal = false;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
}
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <_ZN5Timer3runEv>:

void Timer::run() {
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if (this->counter > 0) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd0b      	ble.n	8001178 <_ZN5Timer3runEv+0x28>
		this->counter -= 1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
		if (this->counter == 0) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <_ZN5Timer3runEv+0x28>
			this->signal = true;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <_ZN5Timer9hasSignalEv>:

bool Timer::hasSignal() {
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	return this->signal;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	791b      	ldrb	r3, [r3, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <_ZN5Timer8setTimerEi>:

void Timer::setTimer(int duration) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	this->signal = false;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	711a      	strb	r2, [r3, #4]
	this->counter = duration / TICK;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <_ZN5Timer8setTimerEi+0x2c>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	1092      	asrs	r2, r2, #2
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad2      	subs	r2, r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	66666667 	.word	0x66666667

080011c8 <Reset_Handler>:
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopFillZerobss+0x1a>)
 80011ce:	2300      	movs	r3, #0
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:
 80011d2:	58d4      	ldr	r4, [r2, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:
 80011d8:	18c4      	adds	r4, r0, r3
 80011da:	428c      	cmp	r4, r1
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x1e>)
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopFillZerobss+0x22>)
 80011e2:	2300      	movs	r3, #0
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:
 80011ea:	42a2      	cmp	r2, r4
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>
 80011ee:	f7ff ff99 	bl	8001124 <SystemInit>
 80011f2:	f001 fb1b 	bl	800282c <__libc_init_array>
 80011f6:	f7ff f989 	bl	800050c <main>
 80011fa:	4770      	bx	lr
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000074 	.word	0x20000074
 8001204:	08002b04 	.word	0x08002b04
 8001208:	20000074 	.word	0x20000074
 800120c:	20000100 	.word	0x20000100

08001210 <ADC1_2_IRQHandler>:
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x28>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x28>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f923 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	200f      	movs	r0, #15
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fea8 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f93b 	bl	80014da <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f903 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x1c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x20>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <HAL_IncTick+0x20>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000008 	.word	0x20000008
 80012c0:	200000e8 	.word	0x200000e8

080012c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <HAL_GetTick+0x10>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	200000e8 	.word	0x200000e8

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4906      	ldr	r1, [pc, #24]	; (8001370 <__NVIC_EnableIRQ+0x34>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff90 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff2d 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff42 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff90 	bl	80013c8 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff35 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e161      	b.n	80017cc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001508:	2201      	movs	r2, #1
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 8150 	bne.w	80017c6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a97      	ldr	r2, [pc, #604]	; (8001788 <HAL_GPIO_Init+0x294>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d05e      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001530:	4a95      	ldr	r2, [pc, #596]	; (8001788 <HAL_GPIO_Init+0x294>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d875      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001536:	4a95      	ldr	r2, [pc, #596]	; (800178c <HAL_GPIO_Init+0x298>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d058      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 800153c:	4a93      	ldr	r2, [pc, #588]	; (800178c <HAL_GPIO_Init+0x298>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d86f      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001542:	4a93      	ldr	r2, [pc, #588]	; (8001790 <HAL_GPIO_Init+0x29c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d052      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001548:	4a91      	ldr	r2, [pc, #580]	; (8001790 <HAL_GPIO_Init+0x29c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d869      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800154e:	4a91      	ldr	r2, [pc, #580]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d04c      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001554:	4a8f      	ldr	r2, [pc, #572]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d863      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800155a:	4a8f      	ldr	r2, [pc, #572]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d046      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001560:	4a8d      	ldr	r2, [pc, #564]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d85d      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d82a      	bhi.n	80015c0 <HAL_GPIO_Init+0xcc>
 800156a:	2b12      	cmp	r3, #18
 800156c:	d859      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <HAL_GPIO_Init+0x80>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015c9 	.word	0x080015c9
 800157c:	080015db 	.word	0x080015db
 8001580:	0800161d 	.word	0x0800161d
 8001584:	08001623 	.word	0x08001623
 8001588:	08001623 	.word	0x08001623
 800158c:	08001623 	.word	0x08001623
 8001590:	08001623 	.word	0x08001623
 8001594:	08001623 	.word	0x08001623
 8001598:	08001623 	.word	0x08001623
 800159c:	08001623 	.word	0x08001623
 80015a0:	08001623 	.word	0x08001623
 80015a4:	08001623 	.word	0x08001623
 80015a8:	08001623 	.word	0x08001623
 80015ac:	08001623 	.word	0x08001623
 80015b0:	08001623 	.word	0x08001623
 80015b4:	08001623 	.word	0x08001623
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015e5 	.word	0x080015e5
 80015c0:	4a76      	ldr	r2, [pc, #472]	; (800179c <HAL_GPIO_Init+0x2a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c6:	e02c      	b.n	8001622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e029      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e024      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e01f      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	330c      	adds	r3, #12
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e01a      	b.n	8001624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e013      	b.n	8001624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	611a      	str	r2, [r3, #16]
          break;
 800160e:	e009      	b.n	8001624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001610:	2308      	movs	r3, #8
 8001612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	615a      	str	r2, [r3, #20]
          break;
 800161a:	e003      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x130>
          break;
 8001622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d801      	bhi.n	800162e <HAL_GPIO_Init+0x13a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_Init+0x13e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d802      	bhi.n	8001640 <HAL_GPIO_Init+0x14c>
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x152>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	3b08      	subs	r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	210f      	movs	r1, #15
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a9 	beq.w	80017c6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001674:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <HAL_GPIO_Init+0x2b4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1e0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1dc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d4:	2300      	movs	r3, #0
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e6:	492f      	ldr	r1, [pc, #188]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	492b      	ldr	r1, [pc, #172]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4927      	ldr	r1, [pc, #156]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001718:	4013      	ands	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4921      	ldr	r1, [pc, #132]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491d      	ldr	r1, [pc, #116]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001740:	4013      	ands	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4917      	ldr	r1, [pc, #92]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4913      	ldr	r1, [pc, #76]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001768:	4013      	ands	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01f      	beq.n	80017b8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	490d      	ldr	r1, [pc, #52]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
 8001784:	e01f      	b.n	80017c6 <HAL_GPIO_Init+0x2d2>
 8001786:	bf00      	nop
 8001788:	10320000 	.word	0x10320000
 800178c:	10310000 	.word	0x10310000
 8001790:	10220000 	.word	0x10220000
 8001794:	10210000 	.word	0x10210000
 8001798:	10120000 	.word	0x10120000
 800179c:	10110000 	.word	0x10110000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	43db      	mvns	r3, r3
 80017c0:	4909      	ldr	r1, [pc, #36]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f ae96 	bne.w	8001508 <HAL_GPIO_Init+0x14>
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	372c      	adds	r7, #44	; 0x2c
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e272      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8087 	beq.w	800194a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00c      	beq.n	8001862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001848:	4b8f      	ldr	r3, [pc, #572]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d112      	bne.n	800187a <HAL_RCC_OscConfig+0x5e>
 8001854:	4b8c      	ldr	r3, [pc, #560]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d10b      	bne.n	800187a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001862:	4b89      	ldr	r3, [pc, #548]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d06c      	beq.n	8001948 <HAL_RCC_OscConfig+0x12c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d168      	bne.n	8001948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e24c      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x76>
 8001884:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a7f      	ldr	r2, [pc, #508]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0xd4>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x98>
 800189a:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xd4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0xbc>
 80018be:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a71      	ldr	r2, [pc, #452]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6e      	ldr	r2, [pc, #440]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xd4>
 80018d8:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6a      	ldr	r2, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a67      	ldr	r2, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fce4 	bl	80012c4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fce0 	bl	80012c4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e200      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xe4>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fcd0 	bl	80012c4 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fccc 	bl	80012c4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1ec      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x10c>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001956:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b08      	cmp	r3, #8
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x18c>
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x176>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e1c0      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4939      	ldr	r1, [pc, #228]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	e03a      	b.n	8001a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fc85 	bl	80012c4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fc81 	bl	80012c4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1a1      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4927      	ldr	r1, [pc, #156]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fc64 	bl	80012c4 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff fc60 	bl	80012c4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e180      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d03a      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d019      	beq.n	8001a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_RCC_OscConfig+0x274>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7ff fc44 	bl	80012c4 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fc40 	bl	80012c4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e160      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 faa6 	bl	8001fb0 <RCC_Delay>
 8001a64:	e01c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_RCC_OscConfig+0x274>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fc2a 	bl	80012c4 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a72:	e00f      	b.n	8001a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fc26 	bl	80012c4 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d908      	bls.n	8001a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e146      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	42420000 	.word	0x42420000
 8001a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b92      	ldr	r3, [pc, #584]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e9      	bne.n	8001a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a6 	beq.w	8001bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b8b      	ldr	r3, [pc, #556]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a87      	ldr	r2, [pc, #540]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b85      	ldr	r3, [pc, #532]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b82      	ldr	r3, [pc, #520]	; (8001ce4 <HAL_RCC_OscConfig+0x4c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x4c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7e      	ldr	r2, [pc, #504]	; (8001ce4 <HAL_RCC_OscConfig+0x4c8>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fbe7 	bl	80012c4 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afa:	f7ff fbe3 	bl	80012c4 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e103      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b75      	ldr	r3, [pc, #468]	; (8001ce4 <HAL_RCC_OscConfig+0x4c8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x312>
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	e02d      	b.n	8001b8a <HAL_RCC_OscConfig+0x36e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x334>
 8001b36:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	e01c      	b.n	8001b8a <HAL_RCC_OscConfig+0x36e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d10c      	bne.n	8001b72 <HAL_RCC_OscConfig+0x356>
 8001b58:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a60      	ldr	r2, [pc, #384]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e00b      	b.n	8001b8a <HAL_RCC_OscConfig+0x36e>
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a5a      	ldr	r2, [pc, #360]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a57      	ldr	r2, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d015      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb97 	bl	80012c4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb93 	bl	80012c4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0b1      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	4b4b      	ldr	r3, [pc, #300]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ee      	beq.n	8001b9a <HAL_RCC_OscConfig+0x37e>
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fb81 	bl	80012c4 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff fb7d 	bl	80012c4 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e09b      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a3b      	ldr	r2, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c04:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d061      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d146      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x4cc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb51 	bl	80012c4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fb4d 	bl	80012c4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e06d      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4921      	ldr	r1, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a19      	ldr	r1, [r3, #32]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	430b      	orrs	r3, r1
 8001c72:	491b      	ldr	r1, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb21 	bl	80012c4 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fb1d 	bl	80012c4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e03d      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x46a>
 8001ca4:	e035      	b.n	8001d12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_OscConfig+0x4cc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fb0a 	bl	80012c4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff fb06 	bl	80012c4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e026      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x498>
 8001cd2:	e01e      	b.n	8001d12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e019      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_OscConfig+0x500>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0d0      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b6a      	ldr	r3, [pc, #424]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4965      	ldr	r1, [pc, #404]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d040      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e073      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06b      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4936      	ldr	r1, [pc, #216]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff fa58 	bl	80012c4 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7ff fa54 	bl	80012c4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e053      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d210      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4922      	ldr	r1, [pc, #136]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f821 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1cc>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f9b6 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08002ae8 	.word	0x08002ae8
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	b490      	push	{r4, r7}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001efc:	1d3c      	adds	r4, r7, #4
 8001efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f04:	f240 2301 	movw	r3, #513	; 0x201
 8001f08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d002      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x40>
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x46>
 8001f32:	e02b      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f36:	623b      	str	r3, [r7, #32]
      break;
 8001f38:	e02b      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	0c9b      	lsrs	r3, r3, #18
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3328      	adds	r3, #40	; 0x28
 8001f44:	443b      	add	r3, r7
 8001f46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0c5b      	lsrs	r3, r3, #17
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	3328      	adds	r3, #40	; 0x28
 8001f62:	443b      	add	r3, r7
 8001f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6e:	fb03 f202 	mul.w	r2, r3, r2
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e004      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	623b      	str	r3, [r7, #32]
      break;
 8001f8a:	e002      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f8e:	623b      	str	r3, [r7, #32]
      break;
 8001f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f92:	6a3b      	ldr	r3, [r7, #32]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc90      	pop	{r4, r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	08002aa8 	.word	0x08002aa8
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	003d0900 	.word	0x003d0900

08001fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <RCC_Delay+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <RCC_Delay+0x38>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fcc:	bf00      	nop
  }
  while (Delay --);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <RCC_Delay+0x1c>
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e041      	b.n	8002082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe ffd8 	bl	8000fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 fa6a 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e035      	b.n	8002110 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_TIM_Base_Start_IT+0x90>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x4e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d004      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x4e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_TIM_Base_Start_IT+0x94>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d111      	bne.n	80020fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d010      	beq.n	800210e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	e007      	b.n	800210e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b02      	cmp	r3, #2
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0202 	mvn.w	r2, #2
 8002150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f9b1 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f9a4 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f9b3 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0204 	mvn.w	r2, #4
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f987 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f97a 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f989 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0208 	mvn.w	r2, #8
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2204      	movs	r2, #4
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f95d 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f950 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f95f 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b10      	cmp	r3, #16
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b10      	cmp	r3, #16
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0210 	mvn.w	r2, #16
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2208      	movs	r2, #8
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f933 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f926 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f935 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fa7c 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa67 	bl	80027a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8f9 	bl	80024f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b20      	cmp	r3, #32
 800230c:	d10e      	bne.n	800232c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b20      	cmp	r3, #32
 800231a:	d107      	bne.n	800232c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0220 	mvn.w	r2, #32
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fa32 	bl	8002790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_TIM_ConfigClockSource+0x18>
 8002348:	2302      	movs	r3, #2
 800234a:	e0b3      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x180>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800236a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002372:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d03e      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0xd0>
 8002386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238a:	f200 8087 	bhi.w	800249c <HAL_TIM_ConfigClockSource+0x168>
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	f000 8085 	beq.w	80024a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d87f      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 800239c:	2b70      	cmp	r3, #112	; 0x70
 800239e:	d01a      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xa2>
 80023a0:	2b70      	cmp	r3, #112	; 0x70
 80023a2:	d87b      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b60      	cmp	r3, #96	; 0x60
 80023a6:	d050      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x116>
 80023a8:	2b60      	cmp	r3, #96	; 0x60
 80023aa:	d877      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b50      	cmp	r3, #80	; 0x50
 80023ae:	d03c      	beq.n	800242a <HAL_TIM_ConfigClockSource+0xf6>
 80023b0:	2b50      	cmp	r3, #80	; 0x50
 80023b2:	d873      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d058      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x136>
 80023b8:	2b40      	cmp	r3, #64	; 0x40
 80023ba:	d86f      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023bc:	2b30      	cmp	r3, #48	; 0x30
 80023be:	d064      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
 80023c0:	2b30      	cmp	r3, #48	; 0x30
 80023c2:	d86b      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d060      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d867      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d05c      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d05a      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023d4:	e062      	b.n	800249c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f000 f95c 	bl	80026a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	609a      	str	r2, [r3, #8]
      break;
 8002402:	e04e      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6899      	ldr	r1, [r3, #8]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f000 f945 	bl	80026a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002426:	609a      	str	r2, [r3, #8]
      break;
 8002428:	e03b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 f8bc 	bl	80025b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2150      	movs	r1, #80	; 0x50
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f913 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002448:	e02b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8da 	bl	8002610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2160      	movs	r1, #96	; 0x60
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f903 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002468:	e01b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	461a      	mov	r2, r3
 8002478:	f000 f89c 	bl	80025b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2140      	movs	r1, #64	; 0x40
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8f3 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002488:	e00b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f000 f8ea 	bl	800266e <TIM_ITRx_SetConfig>
        break;
 800249a:	e002      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800249c:	bf00      	nop
 800249e:	e000      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_Base_SetConfig+0xac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <TIM_Base_SetConfig+0xac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	615a      	str	r2, [r3, #20]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400

080025b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 030a 	bic.w	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	621a      	str	r2, [r3, #32]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f023 0210 	bic.w	r2, r3, #16
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800263a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	031b      	lsls	r3, r3, #12
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800264c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	f043 0307 	orr.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b087      	sub	sp, #28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	609a      	str	r2, [r3, #8]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e041      	b.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d004      	beq.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10c      	bne.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4313      	orrs	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400

08002790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <_Znwj>:
 80027b4:	2801      	cmp	r0, #1
 80027b6:	bf38      	it	cc
 80027b8:	2001      	movcc	r0, #1
 80027ba:	b510      	push	{r4, lr}
 80027bc:	4604      	mov	r4, r0
 80027be:	4620      	mov	r0, r4
 80027c0:	f000 f858 	bl	8002874 <malloc>
 80027c4:	b930      	cbnz	r0, 80027d4 <_Znwj+0x20>
 80027c6:	f000 f81b 	bl	8002800 <_ZSt15get_new_handlerv>
 80027ca:	b908      	cbnz	r0, 80027d0 <_Znwj+0x1c>
 80027cc:	f000 f820 	bl	8002810 <abort>
 80027d0:	4780      	blx	r0
 80027d2:	e7f4      	b.n	80027be <_Znwj+0xa>
 80027d4:	bd10      	pop	{r4, pc}

080027d6 <__cxa_pure_virtual>:
 80027d6:	b508      	push	{r3, lr}
 80027d8:	f000 f80c 	bl	80027f4 <_ZSt9terminatev>

080027dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80027dc:	b508      	push	{r3, lr}
 80027de:	4780      	blx	r0
 80027e0:	f000 f816 	bl	8002810 <abort>

080027e4 <_ZSt13get_terminatev>:
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <_ZSt13get_terminatev+0xc>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f3bf 8f5b 	dmb	ish
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	2000000c 	.word	0x2000000c

080027f4 <_ZSt9terminatev>:
 80027f4:	b508      	push	{r3, lr}
 80027f6:	f7ff fff5 	bl	80027e4 <_ZSt13get_terminatev>
 80027fa:	f7ff ffef 	bl	80027dc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08002800 <_ZSt15get_new_handlerv>:
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <_ZSt15get_new_handlerv+0xc>)
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	f3bf 8f5b 	dmb	ish
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	200000ec 	.word	0x200000ec

08002810 <abort>:
 8002810:	2006      	movs	r0, #6
 8002812:	b508      	push	{r3, lr}
 8002814:	f000 f90a 	bl	8002a2c <raise>
 8002818:	2001      	movs	r0, #1
 800281a:	f7fe fc42 	bl	80010a2 <_exit>
	...

08002820 <__errno>:
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <__errno+0x8>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000010 	.word	0x20000010

0800282c <__libc_init_array>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	2600      	movs	r6, #0
 8002830:	4d0c      	ldr	r5, [pc, #48]	; (8002864 <__libc_init_array+0x38>)
 8002832:	4c0d      	ldr	r4, [pc, #52]	; (8002868 <__libc_init_array+0x3c>)
 8002834:	1b64      	subs	r4, r4, r5
 8002836:	10a4      	asrs	r4, r4, #2
 8002838:	42a6      	cmp	r6, r4
 800283a:	d109      	bne.n	8002850 <__libc_init_array+0x24>
 800283c:	f000 f920 	bl	8002a80 <_init>
 8002840:	2600      	movs	r6, #0
 8002842:	4d0a      	ldr	r5, [pc, #40]	; (800286c <__libc_init_array+0x40>)
 8002844:	4c0a      	ldr	r4, [pc, #40]	; (8002870 <__libc_init_array+0x44>)
 8002846:	1b64      	subs	r4, r4, r5
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	42a6      	cmp	r6, r4
 800284c:	d105      	bne.n	800285a <__libc_init_array+0x2e>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	f855 3b04 	ldr.w	r3, [r5], #4
 8002854:	4798      	blx	r3
 8002856:	3601      	adds	r6, #1
 8002858:	e7ee      	b.n	8002838 <__libc_init_array+0xc>
 800285a:	f855 3b04 	ldr.w	r3, [r5], #4
 800285e:	4798      	blx	r3
 8002860:	3601      	adds	r6, #1
 8002862:	e7f2      	b.n	800284a <__libc_init_array+0x1e>
 8002864:	08002af8 	.word	0x08002af8
 8002868:	08002af8 	.word	0x08002af8
 800286c:	08002af8 	.word	0x08002af8
 8002870:	08002b00 	.word	0x08002b00

08002874 <malloc>:
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <malloc+0xc>)
 8002876:	4601      	mov	r1, r0
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	f000 b82b 	b.w	80028d4 <_malloc_r>
 800287e:	bf00      	nop
 8002880:	20000010 	.word	0x20000010

08002884 <memset>:
 8002884:	4603      	mov	r3, r0
 8002886:	4402      	add	r2, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <sbrk_aligned>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4e0e      	ldr	r6, [pc, #56]	; (80028d0 <sbrk_aligned+0x3c>)
 8002898:	460c      	mov	r4, r1
 800289a:	6831      	ldr	r1, [r6, #0]
 800289c:	4605      	mov	r5, r0
 800289e:	b911      	cbnz	r1, 80028a6 <sbrk_aligned+0x12>
 80028a0:	f000 f88c 	bl	80029bc <_sbrk_r>
 80028a4:	6030      	str	r0, [r6, #0]
 80028a6:	4621      	mov	r1, r4
 80028a8:	4628      	mov	r0, r5
 80028aa:	f000 f887 	bl	80029bc <_sbrk_r>
 80028ae:	1c43      	adds	r3, r0, #1
 80028b0:	d00a      	beq.n	80028c8 <sbrk_aligned+0x34>
 80028b2:	1cc4      	adds	r4, r0, #3
 80028b4:	f024 0403 	bic.w	r4, r4, #3
 80028b8:	42a0      	cmp	r0, r4
 80028ba:	d007      	beq.n	80028cc <sbrk_aligned+0x38>
 80028bc:	1a21      	subs	r1, r4, r0
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 f87c 	bl	80029bc <_sbrk_r>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d101      	bne.n	80028cc <sbrk_aligned+0x38>
 80028c8:	f04f 34ff 	mov.w	r4, #4294967295
 80028cc:	4620      	mov	r0, r4
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	200000f4 	.word	0x200000f4

080028d4 <_malloc_r>:
 80028d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d8:	1ccd      	adds	r5, r1, #3
 80028da:	f025 0503 	bic.w	r5, r5, #3
 80028de:	3508      	adds	r5, #8
 80028e0:	2d0c      	cmp	r5, #12
 80028e2:	bf38      	it	cc
 80028e4:	250c      	movcc	r5, #12
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	4607      	mov	r7, r0
 80028ea:	db01      	blt.n	80028f0 <_malloc_r+0x1c>
 80028ec:	42a9      	cmp	r1, r5
 80028ee:	d905      	bls.n	80028fc <_malloc_r+0x28>
 80028f0:	230c      	movs	r3, #12
 80028f2:	2600      	movs	r6, #0
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4630      	mov	r0, r6
 80028f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028fc:	4e2e      	ldr	r6, [pc, #184]	; (80029b8 <_malloc_r+0xe4>)
 80028fe:	f000 f8b1 	bl	8002a64 <__malloc_lock>
 8002902:	6833      	ldr	r3, [r6, #0]
 8002904:	461c      	mov	r4, r3
 8002906:	bb34      	cbnz	r4, 8002956 <_malloc_r+0x82>
 8002908:	4629      	mov	r1, r5
 800290a:	4638      	mov	r0, r7
 800290c:	f7ff ffc2 	bl	8002894 <sbrk_aligned>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	4604      	mov	r4, r0
 8002914:	d14d      	bne.n	80029b2 <_malloc_r+0xde>
 8002916:	6834      	ldr	r4, [r6, #0]
 8002918:	4626      	mov	r6, r4
 800291a:	2e00      	cmp	r6, #0
 800291c:	d140      	bne.n	80029a0 <_malloc_r+0xcc>
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	4631      	mov	r1, r6
 8002922:	4638      	mov	r0, r7
 8002924:	eb04 0803 	add.w	r8, r4, r3
 8002928:	f000 f848 	bl	80029bc <_sbrk_r>
 800292c:	4580      	cmp	r8, r0
 800292e:	d13a      	bne.n	80029a6 <_malloc_r+0xd2>
 8002930:	6821      	ldr	r1, [r4, #0]
 8002932:	3503      	adds	r5, #3
 8002934:	1a6d      	subs	r5, r5, r1
 8002936:	f025 0503 	bic.w	r5, r5, #3
 800293a:	3508      	adds	r5, #8
 800293c:	2d0c      	cmp	r5, #12
 800293e:	bf38      	it	cc
 8002940:	250c      	movcc	r5, #12
 8002942:	4638      	mov	r0, r7
 8002944:	4629      	mov	r1, r5
 8002946:	f7ff ffa5 	bl	8002894 <sbrk_aligned>
 800294a:	3001      	adds	r0, #1
 800294c:	d02b      	beq.n	80029a6 <_malloc_r+0xd2>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	442b      	add	r3, r5
 8002952:	6023      	str	r3, [r4, #0]
 8002954:	e00e      	b.n	8002974 <_malloc_r+0xa0>
 8002956:	6822      	ldr	r2, [r4, #0]
 8002958:	1b52      	subs	r2, r2, r5
 800295a:	d41e      	bmi.n	800299a <_malloc_r+0xc6>
 800295c:	2a0b      	cmp	r2, #11
 800295e:	d916      	bls.n	800298e <_malloc_r+0xba>
 8002960:	1961      	adds	r1, r4, r5
 8002962:	42a3      	cmp	r3, r4
 8002964:	6025      	str	r5, [r4, #0]
 8002966:	bf18      	it	ne
 8002968:	6059      	strne	r1, [r3, #4]
 800296a:	6863      	ldr	r3, [r4, #4]
 800296c:	bf08      	it	eq
 800296e:	6031      	streq	r1, [r6, #0]
 8002970:	5162      	str	r2, [r4, r5]
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	4638      	mov	r0, r7
 8002976:	f104 060b 	add.w	r6, r4, #11
 800297a:	f000 f879 	bl	8002a70 <__malloc_unlock>
 800297e:	f026 0607 	bic.w	r6, r6, #7
 8002982:	1d23      	adds	r3, r4, #4
 8002984:	1af2      	subs	r2, r6, r3
 8002986:	d0b6      	beq.n	80028f6 <_malloc_r+0x22>
 8002988:	1b9b      	subs	r3, r3, r6
 800298a:	50a3      	str	r3, [r4, r2]
 800298c:	e7b3      	b.n	80028f6 <_malloc_r+0x22>
 800298e:	6862      	ldr	r2, [r4, #4]
 8002990:	42a3      	cmp	r3, r4
 8002992:	bf0c      	ite	eq
 8002994:	6032      	streq	r2, [r6, #0]
 8002996:	605a      	strne	r2, [r3, #4]
 8002998:	e7ec      	b.n	8002974 <_malloc_r+0xa0>
 800299a:	4623      	mov	r3, r4
 800299c:	6864      	ldr	r4, [r4, #4]
 800299e:	e7b2      	b.n	8002906 <_malloc_r+0x32>
 80029a0:	4634      	mov	r4, r6
 80029a2:	6876      	ldr	r6, [r6, #4]
 80029a4:	e7b9      	b.n	800291a <_malloc_r+0x46>
 80029a6:	230c      	movs	r3, #12
 80029a8:	4638      	mov	r0, r7
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	f000 f860 	bl	8002a70 <__malloc_unlock>
 80029b0:	e7a1      	b.n	80028f6 <_malloc_r+0x22>
 80029b2:	6025      	str	r5, [r4, #0]
 80029b4:	e7de      	b.n	8002974 <_malloc_r+0xa0>
 80029b6:	bf00      	nop
 80029b8:	200000f0 	.word	0x200000f0

080029bc <_sbrk_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	2300      	movs	r3, #0
 80029c0:	4d05      	ldr	r5, [pc, #20]	; (80029d8 <_sbrk_r+0x1c>)
 80029c2:	4604      	mov	r4, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	f7fe fb76 	bl	80010b8 <_sbrk>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_sbrk_r+0x1a>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_sbrk_r+0x1a>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	200000f8 	.word	0x200000f8

080029dc <_raise_r>:
 80029dc:	291f      	cmp	r1, #31
 80029de:	b538      	push	{r3, r4, r5, lr}
 80029e0:	4604      	mov	r4, r0
 80029e2:	460d      	mov	r5, r1
 80029e4:	d904      	bls.n	80029f0 <_raise_r+0x14>
 80029e6:	2316      	movs	r3, #22
 80029e8:	6003      	str	r3, [r0, #0]
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80029f2:	b112      	cbz	r2, 80029fa <_raise_r+0x1e>
 80029f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80029f8:	b94b      	cbnz	r3, 8002a0e <_raise_r+0x32>
 80029fa:	4620      	mov	r0, r4
 80029fc:	f000 f830 	bl	8002a60 <_getpid_r>
 8002a00:	462a      	mov	r2, r5
 8002a02:	4601      	mov	r1, r0
 8002a04:	4620      	mov	r0, r4
 8002a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a0a:	f000 b817 	b.w	8002a3c <_kill_r>
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00a      	beq.n	8002a28 <_raise_r+0x4c>
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	d103      	bne.n	8002a1e <_raise_r+0x42>
 8002a16:	2316      	movs	r3, #22
 8002a18:	6003      	str	r3, [r0, #0]
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	e7e7      	b.n	80029ee <_raise_r+0x12>
 8002a1e:	2400      	movs	r4, #0
 8002a20:	4628      	mov	r0, r5
 8002a22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002a26:	4798      	blx	r3
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e7e0      	b.n	80029ee <_raise_r+0x12>

08002a2c <raise>:
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <raise+0xc>)
 8002a2e:	4601      	mov	r1, r0
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f7ff bfd3 	b.w	80029dc <_raise_r>
 8002a36:	bf00      	nop
 8002a38:	20000010 	.word	0x20000010

08002a3c <_kill_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	2300      	movs	r3, #0
 8002a40:	4d06      	ldr	r5, [pc, #24]	; (8002a5c <_kill_r+0x20>)
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	602b      	str	r3, [r5, #0]
 8002a4a:	f7fe fb1a 	bl	8001082 <_kill>
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	d102      	bne.n	8002a58 <_kill_r+0x1c>
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	b103      	cbz	r3, 8002a58 <_kill_r+0x1c>
 8002a56:	6023      	str	r3, [r4, #0]
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200000f8 	.word	0x200000f8

08002a60 <_getpid_r>:
 8002a60:	f7fe bb08 	b.w	8001074 <_getpid>

08002a64 <__malloc_lock>:
 8002a64:	4801      	ldr	r0, [pc, #4]	; (8002a6c <__malloc_lock+0x8>)
 8002a66:	f000 b809 	b.w	8002a7c <__retarget_lock_acquire_recursive>
 8002a6a:	bf00      	nop
 8002a6c:	200000fc 	.word	0x200000fc

08002a70 <__malloc_unlock>:
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <__malloc_unlock+0x8>)
 8002a72:	f000 b804 	b.w	8002a7e <__retarget_lock_release_recursive>
 8002a76:	bf00      	nop
 8002a78:	200000fc 	.word	0x200000fc

08002a7c <__retarget_lock_acquire_recursive>:
 8002a7c:	4770      	bx	lr

08002a7e <__retarget_lock_release_recursive>:
 8002a7e:	4770      	bx	lr

08002a80 <_init>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr

08002a8c <_fini>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	bf00      	nop
 8002a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a92:	bc08      	pop	{r3}
 8002a94:	469e      	mov	lr, r3
 8002a96:	4770      	bx	lr
