
TrafficLightProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb4  08002eb4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb4  08002eb4  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb4  08002eb4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200000a4  08002f68  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08002f68  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbc6  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5b  00000000  00000000  0002bc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a55f  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de62  00000000  00000000  0004a4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a753  00000000  00000000  00058359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ac  00000000  00000000  000e2afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e40 	.word	0x08002e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08002e40 	.word	0x08002e40

0800014c <_ZN4ILedC1Ev>:
 */

#ifndef INC_MODEL_LED_H_
#define INC_MODEL_LED_H_

class ILed {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <_ZN4ILedC1Ev+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	08002e90 	.word	0x08002e90

0800016c <_ZN3LedC1EP6Output>:
 *      Author: Nguyen Tran
 */

#include <component/led.h>

Led::Led(Output* pin)
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	6039      	str	r1, [r7, #0]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	4618      	mov	r0, r3
 800017a:	f7ff ffe7 	bl	800014c <_ZN4ILedC1Ev>
 800017e:	4a08      	ldr	r2, [pc, #32]	; (80001a0 <_ZN3LedC1EP6Output+0x34>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	721a      	strb	r2, [r3, #8]
{
    m_Pin = pin;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	683a      	ldr	r2, [r7, #0]
 8000194:	605a      	str	r2, [r3, #4]
}
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	08002e80 	.word	0x08002e80

080001a4 <_ZN3Led2OnEv>:

/*
 * Controls
 */
void Led::On()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    m_Pin->Reset();
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 ff4d 	bl	8001050 <_ZN6Output5ResetEv>
    m_IsOn = true;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2201      	movs	r2, #1
 80001ba:	721a      	strb	r2, [r3, #8]
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <_ZN3Led3OffEv>:

void Led::Off()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
    m_Pin->Set();
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 ff2a 	bl	800102a <_ZN6Output3SetEv>
    m_IsOn = false;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2200      	movs	r2, #0
 80001da:	721a      	strb	r2, [r3, #8]
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <_ZN3Led6ToggleEv>:

void Led::Toggle()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    m_Pin->Toggle();
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 ff40 	bl	8001076 <_ZN6Output6ToggleEv>
    m_IsOn = !m_IsOn;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	7a1b      	ldrb	r3, [r3, #8]
 80001fa:	f083 0301 	eor.w	r3, r3, #1
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	721a      	strb	r2, [r3, #8]
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <_ZN10SegmentLedC1EPP3Led>:
 *      Author: Nguyen Tran
 */

#include "component/segment_led.h"

SegmentLed::SegmentLed(Led* led[7])
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2200      	movs	r2, #0
 800021a:	61da      	str	r2, [r3, #28]
{
    for (int i = 0; i < 7; i += 1) {
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2b06      	cmp	r3, #6
 8000224:	dc0c      	bgt.n	8000240 <_ZN10SegmentLedC1EPP3Led+0x34>
        m_Led[i] = led[i];
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	4413      	add	r3, r2
 800022e:	6819      	ldr	r1, [r3, #0]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 7; i += 1) {
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3301      	adds	r3, #1
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	e7ef      	b.n	8000220 <_ZN10SegmentLedC1EPP3Led+0x14>
    }
}
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4618      	mov	r0, r3
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <_ZN10SegmentLed7DisplayEi>:
        m_Led[i]->Off();
    }
}

void SegmentLed::Display(int number)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]

    switch (number) {
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2b09      	cmp	r3, #9
 800025a:	f200 8266 	bhi.w	800072a <_ZN10SegmentLed7DisplayEi+0x4de>
 800025e:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <_ZN10SegmentLed7DisplayEi+0x18>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	0800028d 	.word	0x0800028d
 8000268:	08000301 	.word	0x08000301
 800026c:	0800037d 	.word	0x0800037d
 8000270:	080003f3 	.word	0x080003f3
 8000274:	08000469 	.word	0x08000469
 8000278:	080004e1 	.word	0x080004e1
 800027c:	08000557 	.word	0x08000557
 8000280:	080005cb 	.word	0x080005cb
 8000284:	08000645 	.word	0x08000645
 8000288:	080006b7 	.word	0x080006b7
    case 0:
        m_Led[0]->On();
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4610      	mov	r0, r2
 800029a:	4798      	blx	r3
        m_Led[1]->On();
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685a      	ldr	r2, [r3, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4610      	mov	r0, r2
 80002aa:	4798      	blx	r3
        m_Led[2]->On();
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4610      	mov	r0, r2
 80002ba:	4798      	blx	r3
        m_Led[3]->On();
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68da      	ldr	r2, [r3, #12]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4610      	mov	r0, r2
 80002ca:	4798      	blx	r3
        m_Led[4]->On();
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	691a      	ldr	r2, [r3, #16]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4610      	mov	r0, r2
 80002da:	4798      	blx	r3
        m_Led[5]->On();
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4610      	mov	r0, r2
 80002ea:	4798      	blx	r3
        m_Led[6]->Off();
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	699a      	ldr	r2, [r3, #24]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3304      	adds	r3, #4
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4610      	mov	r0, r2
 80002fc:	4798      	blx	r3
        break;
 80002fe:	e215      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 1:
        m_Led[0]->Off();
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3304      	adds	r3, #4
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4610      	mov	r0, r2
 8000310:	4798      	blx	r3
        m_Led[1]->On();
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4610      	mov	r0, r2
 8000320:	4798      	blx	r3
        m_Led[2]->On();
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4610      	mov	r0, r2
 8000330:	4798      	blx	r3
        m_Led[3]->Off();
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3304      	adds	r3, #4
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4610      	mov	r0, r2
 8000342:	4798      	blx	r3
        m_Led[4]->Off();
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3304      	adds	r3, #4
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4610      	mov	r0, r2
 8000354:	4798      	blx	r3
        m_Led[5]->Off();
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4610      	mov	r0, r2
 8000366:	4798      	blx	r3
        m_Led[6]->Off();
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	699a      	ldr	r2, [r3, #24]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3304      	adds	r3, #4
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4610      	mov	r0, r2
 8000378:	4798      	blx	r3
        break;
 800037a:	e1d7      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 2:
        m_Led[0]->On();
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4610      	mov	r0, r2
 800038a:	4798      	blx	r3
        m_Led[1]->On();
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4610      	mov	r0, r2
 800039a:	4798      	blx	r3
        m_Led[2]->Off();
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3304      	adds	r3, #4
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4610      	mov	r0, r2
 80003ac:	4798      	blx	r3
        m_Led[3]->On();
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	68da      	ldr	r2, [r3, #12]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4610      	mov	r0, r2
 80003bc:	4798      	blx	r3
        m_Led[4]->On();
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	691a      	ldr	r2, [r3, #16]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4610      	mov	r0, r2
 80003cc:	4798      	blx	r3
        m_Led[5]->Off();
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	695a      	ldr	r2, [r3, #20]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3304      	adds	r3, #4
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4610      	mov	r0, r2
 80003de:	4798      	blx	r3
        m_Led[6]->On();
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4610      	mov	r0, r2
 80003ee:	4798      	blx	r3
        break;
 80003f0:	e19c      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 3:
        m_Led[0]->On();
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4610      	mov	r0, r2
 8000400:	4798      	blx	r3
        m_Led[1]->On();
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4610      	mov	r0, r2
 8000410:	4798      	blx	r3
        m_Led[2]->On();
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	689a      	ldr	r2, [r3, #8]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4610      	mov	r0, r2
 8000420:	4798      	blx	r3
        m_Led[3]->On();
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	68da      	ldr	r2, [r3, #12]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4610      	mov	r0, r2
 8000430:	4798      	blx	r3
        m_Led[4]->Off();
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	691a      	ldr	r2, [r3, #16]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	691b      	ldr	r3, [r3, #16]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3304      	adds	r3, #4
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4610      	mov	r0, r2
 8000442:	4798      	blx	r3
        m_Led[5]->Off();
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3304      	adds	r3, #4
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4610      	mov	r0, r2
 8000454:	4798      	blx	r3
        m_Led[6]->On();
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4610      	mov	r0, r2
 8000464:	4798      	blx	r3
        break;
 8000466:	e161      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 4:
        m_Led[0]->Off();
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3304      	adds	r3, #4
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4610      	mov	r0, r2
 8000478:	4798      	blx	r3
        m_Led[1]->On();
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4610      	mov	r0, r2
 8000488:	4798      	blx	r3
        m_Led[2]->On();
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4610      	mov	r0, r2
 8000498:	4798      	blx	r3
        m_Led[3]->Off();
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	68da      	ldr	r2, [r3, #12]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	3304      	adds	r3, #4
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4610      	mov	r0, r2
 80004aa:	4798      	blx	r3
        m_Led[4]->Off();
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	691a      	ldr	r2, [r3, #16]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	691b      	ldr	r3, [r3, #16]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3304      	adds	r3, #4
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4610      	mov	r0, r2
 80004bc:	4798      	blx	r3
        m_Led[5]->On();
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4610      	mov	r0, r2
 80004cc:	4798      	blx	r3
        m_Led[6]->On();
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4610      	mov	r0, r2
 80004dc:	4798      	blx	r3
        break;
 80004de:	e125      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 5:
        m_Led[0]->On();
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4610      	mov	r0, r2
 80004ee:	4798      	blx	r3
        m_Led[1]->Off();
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3304      	adds	r3, #4
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4610      	mov	r0, r2
 8000500:	4798      	blx	r3
        m_Led[2]->On();
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4610      	mov	r0, r2
 8000510:	4798      	blx	r3
        m_Led[3]->On();
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	68da      	ldr	r2, [r3, #12]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4610      	mov	r0, r2
 8000520:	4798      	blx	r3
        m_Led[4]->Off();
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	691a      	ldr	r2, [r3, #16]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	691b      	ldr	r3, [r3, #16]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3304      	adds	r3, #4
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4610      	mov	r0, r2
 8000532:	4798      	blx	r3
        m_Led[5]->On();
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4610      	mov	r0, r2
 8000542:	4798      	blx	r3
        m_Led[6]->On();
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4610      	mov	r0, r2
 8000552:	4798      	blx	r3
        break;
 8000554:	e0ea      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 6:
        m_Led[0]->On();
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4610      	mov	r0, r2
 8000564:	4798      	blx	r3
        m_Led[1]->Off();
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3304      	adds	r3, #4
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4610      	mov	r0, r2
 8000576:	4798      	blx	r3
        m_Led[2]->On();
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689a      	ldr	r2, [r3, #8]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4610      	mov	r0, r2
 8000586:	4798      	blx	r3
        m_Led[3]->On();
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68da      	ldr	r2, [r3, #12]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4610      	mov	r0, r2
 8000596:	4798      	blx	r3
        m_Led[4]->On();
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	691a      	ldr	r2, [r3, #16]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4610      	mov	r0, r2
 80005a6:	4798      	blx	r3
        m_Led[5]->On();
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4610      	mov	r0, r2
 80005b6:	4798      	blx	r3
        m_Led[6]->On();
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4610      	mov	r0, r2
 80005c6:	4798      	blx	r3
        break;
 80005c8:	e0b0      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 7:
        m_Led[0]->On();
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4610      	mov	r0, r2
 80005d8:	4798      	blx	r3
        m_Led[1]->On();
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685a      	ldr	r2, [r3, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4610      	mov	r0, r2
 80005e8:	4798      	blx	r3
        m_Led[2]->On();
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4610      	mov	r0, r2
 80005f8:	4798      	blx	r3
        m_Led[3]->Off();
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68da      	ldr	r2, [r3, #12]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3304      	adds	r3, #4
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4610      	mov	r0, r2
 800060a:	4798      	blx	r3
        m_Led[4]->Off();
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	691a      	ldr	r2, [r3, #16]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3304      	adds	r3, #4
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4610      	mov	r0, r2
 800061c:	4798      	blx	r3
        m_Led[5]->Off();
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4610      	mov	r0, r2
 800062e:	4798      	blx	r3
        m_Led[6]->Off();
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3304      	adds	r3, #4
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4610      	mov	r0, r2
 8000640:	4798      	blx	r3
        break;
 8000642:	e073      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 8:
        m_Led[0]->On();
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4610      	mov	r0, r2
 8000652:	4798      	blx	r3
        m_Led[1]->On();
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4610      	mov	r0, r2
 8000662:	4798      	blx	r3
        m_Led[2]->On();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4610      	mov	r0, r2
 8000672:	4798      	blx	r3
        m_Led[3]->On();
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68da      	ldr	r2, [r3, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4610      	mov	r0, r2
 8000682:	4798      	blx	r3
        m_Led[4]->On();
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691a      	ldr	r2, [r3, #16]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4610      	mov	r0, r2
 8000692:	4798      	blx	r3
        m_Led[5]->On();
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4610      	mov	r0, r2
 80006a2:	4798      	blx	r3
        m_Led[6]->On();
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4610      	mov	r0, r2
 80006b2:	4798      	blx	r3
        break;
 80006b4:	e03a      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    case 9:
        m_Led[0]->On();
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4610      	mov	r0, r2
 80006c4:	4798      	blx	r3
        m_Led[1]->On();
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4610      	mov	r0, r2
 80006d4:	4798      	blx	r3
        m_Led[2]->On();
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4610      	mov	r0, r2
 80006e4:	4798      	blx	r3
        m_Led[3]->On();
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4610      	mov	r0, r2
 80006f4:	4798      	blx	r3
        m_Led[4]->Off();
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	691a      	ldr	r2, [r3, #16]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3304      	adds	r3, #4
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4610      	mov	r0, r2
 8000706:	4798      	blx	r3
        m_Led[5]->On();
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4610      	mov	r0, r2
 8000716:	4798      	blx	r3
        m_Led[6]->On();
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	699a      	ldr	r2, [r3, #24]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4610      	mov	r0, r2
 8000726:	4798      	blx	r3
        break;
 8000728:	e000      	b.n	800072c <_ZN10SegmentLed7DisplayEi+0x4e0>
    default:
        break;
 800072a:	bf00      	nop
    }
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZN6SwitchC1EP5Input>:
 *      Author: Nguyen Tran
 */

#include "component/switch.h"

Switch::Switch(Input* pin) { m_Pin = pin; }
 8000734:	b490      	push	{r4, r7}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <_ZN6SwitchC1EP5Input+0x44>)
 8000742:	461c      	mov	r4, r3
 8000744:	4613      	mov	r3, r2
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	741a      	strb	r2, [r3, #16]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	745a      	strb	r2, [r3, #17]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000764:	619a      	str	r2, [r3, #24]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bc90      	pop	{r4, r7}
 8000776:	4770      	bx	lr
 8000778:	08002e58 	.word	0x08002e58

0800077c <_ZN6Switch6ListenEv>:

/*
 * Listener
 */
void Switch::Listen()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    m_KeyReg[2] = m_KeyReg[1];
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
    m_KeyReg[1] = m_KeyReg[0];
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	605a      	str	r2, [r3, #4]
    m_KeyReg[0] = m_Pin->Read();
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fc20 	bl	8000fde <_ZN5Input4ReadEv>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]

    if ((m_KeyReg[0] == m_KeyReg[1]) && (m_KeyReg[1] == m_KeyReg[2])) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d12e      	bne.n	8000810 <_ZN6Switch6ListenEv+0x94>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d128      	bne.n	8000810 <_ZN6Switch6ListenEv+0x94>
        if (m_KeyReg[2] != m_KeyReg[3]) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d012      	beq.n	80007f0 <_ZN6Switch6ListenEv+0x74>
            m_KeyReg[3] = m_KeyReg[2];
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60da      	str	r2, [r3, #12]

            if (m_KeyReg[3] == PRESSED) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d106      	bne.n	80007e8 <_ZN6Switch6ListenEv+0x6c>
                c_Timeout = BUTTON_TIMEOUT / TICK;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2232      	movs	r2, #50	; 0x32
 80007de:	619a      	str	r2, [r3, #24]
                m_Flag = true;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	741a      	strb	r2, [r3, #16]
                    m_FlagLong = true;
                }
            }
        }
    }
}
 80007e6:	e013      	b.n	8000810 <_ZN6Switch6ListenEv+0x94>
                m_FlagLong = false;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	745a      	strb	r2, [r3, #17]
}
 80007ee:	e00f      	b.n	8000810 <_ZN6Switch6ListenEv+0x94>
            if (m_KeyReg[3] == PRESSED) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10b      	bne.n	8000810 <_ZN6Switch6ListenEv+0x94>
                c_Timeout -= 1;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	619a      	str	r2, [r3, #24]
                if (c_Timeout == 0) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <_ZN6Switch6ListenEv+0x94>
                    m_FlagLong = true;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2201      	movs	r2, #1
 800080e:	745a      	strb	r2, [r3, #17]
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_ZN6Switch9IsPressedEv>:

/*
 * Flag check
 */
bool Switch::IsPressed()
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    if (m_Flag) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c1b      	ldrb	r3, [r3, #16]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d004      	beq.n	8000832 <_ZN6Switch9IsPressedEv+0x1a>
        m_Flag = false;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	741a      	strb	r2, [r3, #16]
        return true;
 800082e:	2301      	movs	r3, #1
 8000830:	e000      	b.n	8000834 <_ZN6Switch9IsPressedEv+0x1c>
    }
    return false;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
	...

08000840 <_Z41__static_initialization_and_destruction_0ii>:

/*
 * Main controller
 * Controls the whole program
 */
Controller g_Controller;
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	f040 80a8 	bne.w	80009a2 <_Z41__static_initialization_and_destruction_0ii+0x162>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000858:	4293      	cmp	r3, r2
 800085a:	f040 80a2 	bne.w	80009a2 <_Z41__static_initialization_and_destruction_0ii+0x162>
Output g_OutputD1Red(D1_RED_GPIO_Port, D1_RED_Pin);
 800085e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000862:	4952      	ldr	r1, [pc, #328]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000864:	4852      	ldr	r0, [pc, #328]	; (80009b0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8000866:	f000 fbcb 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_OutputD1Yel(D1_YEL_GPIO_Port, D1_YEL_Pin);
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	494f      	ldr	r1, [pc, #316]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8000872:	f000 fbc5 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_OutputD1Green(D1_GRN_GPIO_Port, D1_GRN_Pin);
 8000876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087a:	494c      	ldr	r1, [pc, #304]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800087c:	484e      	ldr	r0, [pc, #312]	; (80009b8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 800087e:	f000 fbbf 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_OutputD2Red(D2_RED_GPIO_Port, D2_RED_Pin);
 8000882:	2208      	movs	r2, #8
 8000884:	494d      	ldr	r1, [pc, #308]	; (80009bc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8000886:	484e      	ldr	r0, [pc, #312]	; (80009c0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8000888:	f000 fbba 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_OutputD2Yel(D2_YEL_GPIO_Port, D2_YEL_Pin);
 800088c:	2208      	movs	r2, #8
 800088e:	4947      	ldr	r1, [pc, #284]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000890:	484c      	ldr	r0, [pc, #304]	; (80009c4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8000892:	f000 fbb5 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_OutputD2Green(D2_GRN_GPIO_Port, D2_GRN_Pin);
 8000896:	2201      	movs	r2, #1
 8000898:	4944      	ldr	r1, [pc, #272]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800089a:	484b      	ldr	r0, [pc, #300]	; (80009c8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800089c:	f000 fbb0 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegA(SEG_A_GPIO_Port, SEG_A_Pin);
 80008a0:	2202      	movs	r2, #2
 80008a2:	494a      	ldr	r1, [pc, #296]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80008a4:	484a      	ldr	r0, [pc, #296]	; (80009d0 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 80008a6:	f000 fbab 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegB(SEG_B_GPIO_Port, SEG_B_Pin);
 80008aa:	2204      	movs	r2, #4
 80008ac:	4947      	ldr	r1, [pc, #284]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80008ae:	4849      	ldr	r0, [pc, #292]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 80008b0:	f000 fba6 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegC(SEG_C_GPIO_Port, SEG_C_Pin);
 80008b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b8:	4944      	ldr	r1, [pc, #272]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80008ba:	4847      	ldr	r0, [pc, #284]	; (80009d8 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 80008bc:	f000 fba0 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegD(SEG_D_GPIO_Port, SEG_D_Pin);
 80008c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008c4:	493d      	ldr	r1, [pc, #244]	; (80009bc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80008c8:	f000 fb9a 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegE(SEG_E_GPIO_Port, SEG_E_Pin);
 80008cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008d0:	493a      	ldr	r1, [pc, #232]	; (80009bc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80008d2:	4843      	ldr	r0, [pc, #268]	; (80009e0 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 80008d4:	f000 fb94 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegF(SEG_F_GPIO_Port, SEG_F_Pin);
 80008d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008dc:	493b      	ldr	r1, [pc, #236]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80008de:	4841      	ldr	r0, [pc, #260]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80008e0:	f000 fb8e 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Output g_SegG(SEG_G_GPIO_Port, SEG_G_Pin);
 80008e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e8:	4938      	ldr	r1, [pc, #224]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80008ea:	483f      	ldr	r0, [pc, #252]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 80008ec:	f000 fb88 	bl	8001000 <_ZN6OutputC1EP12GPIO_TypeDeft>
Led g_LedD1Green(&g_OutputD1Green);
 80008f0:	4931      	ldr	r1, [pc, #196]	; (80009b8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80008f2:	483e      	ldr	r0, [pc, #248]	; (80009ec <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 80008f4:	f7ff fc3a 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedD1Red(&g_OutputD1Red);
 80008f8:	492d      	ldr	r1, [pc, #180]	; (80009b0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80008fa:	483d      	ldr	r0, [pc, #244]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 80008fc:	f7ff fc36 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedD1Yel(&g_OutputD1Yel);
 8000900:	492c      	ldr	r1, [pc, #176]	; (80009b4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8000902:	483c      	ldr	r0, [pc, #240]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8000904:	f7ff fc32 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedD2Green(&g_OutputD2Green);
 8000908:	492f      	ldr	r1, [pc, #188]	; (80009c8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800090a:	483b      	ldr	r0, [pc, #236]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800090c:	f7ff fc2e 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedD2Red(&g_OutputD2Red);
 8000910:	492b      	ldr	r1, [pc, #172]	; (80009c0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8000912:	483a      	ldr	r0, [pc, #232]	; (80009fc <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8000914:	f7ff fc2a 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedD2Yel(&g_OutputD2Yel);
 8000918:	492a      	ldr	r1, [pc, #168]	; (80009c4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800091a:	4839      	ldr	r0, [pc, #228]	; (8000a00 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800091c:	f7ff fc26 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegA(&g_SegA);
 8000920:	492b      	ldr	r1, [pc, #172]	; (80009d0 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8000922:	4838      	ldr	r0, [pc, #224]	; (8000a04 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8000924:	f7ff fc22 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegB(&g_SegB);
 8000928:	492a      	ldr	r1, [pc, #168]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 800092a:	4837      	ldr	r0, [pc, #220]	; (8000a08 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800092c:	f7ff fc1e 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegC(&g_SegC);
 8000930:	4929      	ldr	r1, [pc, #164]	; (80009d8 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8000932:	4836      	ldr	r0, [pc, #216]	; (8000a0c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8000934:	f7ff fc1a 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegD(&g_SegD);
 8000938:	4928      	ldr	r1, [pc, #160]	; (80009dc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 800093a:	4835      	ldr	r0, [pc, #212]	; (8000a10 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800093c:	f7ff fc16 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegE(&g_SegE);
 8000940:	4927      	ldr	r1, [pc, #156]	; (80009e0 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8000942:	4834      	ldr	r0, [pc, #208]	; (8000a14 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8000944:	f7ff fc12 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegF(&g_SegF);
 8000948:	4926      	ldr	r1, [pc, #152]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 800094c:	f7ff fc0e 	bl	800016c <_ZN3LedC1EP6Output>
Led g_LedSegG(&g_SegG);
 8000950:	4925      	ldr	r1, [pc, #148]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8000952:	4832      	ldr	r0, [pc, #200]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8000954:	f7ff fc0a 	bl	800016c <_ZN3LedC1EP6Output>
Input g_ButtonSelectInput(BUT_SEL_GPIO_Port, BUT_SEL_Pin);
 8000958:	2210      	movs	r2, #16
 800095a:	4914      	ldr	r1, [pc, #80]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800095c:	4830      	ldr	r0, [pc, #192]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 800095e:	f000 fb28 	bl	8000fb2 <_ZN5InputC1EP12GPIO_TypeDeft>
Input g_ButtonIncrementInput(BUT_INC_GPIO_Port, BUT_INC_Pin);
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4911      	ldr	r1, [pc, #68]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000966:	482f      	ldr	r0, [pc, #188]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8000968:	f000 fb23 	bl	8000fb2 <_ZN5InputC1EP12GPIO_TypeDeft>
Input g_ButtonConfirmInput(BUT_CONF_GPIO_Port, BUT_CONF_Pin);
 800096c:	2220      	movs	r2, #32
 800096e:	490f      	ldr	r1, [pc, #60]	; (80009ac <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000970:	482d      	ldr	r0, [pc, #180]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8000972:	f000 fb1e 	bl	8000fb2 <_ZN5InputC1EP12GPIO_TypeDeft>
Switch g_ButtonSelect(&g_ButtonSelectInput);
 8000976:	492a      	ldr	r1, [pc, #168]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8000978:	482c      	ldr	r0, [pc, #176]	; (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800097a:	f7ff fedb 	bl	8000734 <_ZN6SwitchC1EP5Input>
Switch g_ButtonIncrement(&g_ButtonIncrementInput);
 800097e:	4929      	ldr	r1, [pc, #164]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8000980:	482b      	ldr	r0, [pc, #172]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8000982:	f7ff fed7 	bl	8000734 <_ZN6SwitchC1EP5Input>
Switch g_ButtonConfirm(&g_ButtonConfirmInput);
 8000986:	4928      	ldr	r1, [pc, #160]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8000988:	482a      	ldr	r0, [pc, #168]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800098a:	f7ff fed3 	bl	8000734 <_ZN6SwitchC1EP5Input>
SegmentLed g_SegCounter(args_SegmentLeds);
 800098e:	492a      	ldr	r1, [pc, #168]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8000990:	482a      	ldr	r0, [pc, #168]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8000992:	f7ff fc3b 	bl	800020c <_ZN10SegmentLedC1EPP3Led>
Timer g_TimerGlobal;
 8000996:	482a      	ldr	r0, [pc, #168]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8000998:	f000 fa91 	bl	8000ebe <_ZN5TimerC1Ev>
Timer g_TimerSecond;
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800099e:	f000 fa8e 	bl	8000ebe <_ZN5TimerC1Ev>
Controller g_Controller;
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40011000 	.word	0x40011000
 80009b0:	200000c0 	.word	0x200000c0
 80009b4:	200000c8 	.word	0x200000c8
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	40010800 	.word	0x40010800
 80009c0:	200000d8 	.word	0x200000d8
 80009c4:	200000e0 	.word	0x200000e0
 80009c8:	200000e8 	.word	0x200000e8
 80009cc:	40010c00 	.word	0x40010c00
 80009d0:	200000f0 	.word	0x200000f0
 80009d4:	200000f8 	.word	0x200000f8
 80009d8:	20000100 	.word	0x20000100
 80009dc:	20000108 	.word	0x20000108
 80009e0:	20000110 	.word	0x20000110
 80009e4:	20000118 	.word	0x20000118
 80009e8:	20000120 	.word	0x20000120
 80009ec:	20000128 	.word	0x20000128
 80009f0:	20000134 	.word	0x20000134
 80009f4:	20000140 	.word	0x20000140
 80009f8:	2000014c 	.word	0x2000014c
 80009fc:	20000158 	.word	0x20000158
 8000a00:	20000164 	.word	0x20000164
 8000a04:	20000170 	.word	0x20000170
 8000a08:	2000017c 	.word	0x2000017c
 8000a0c:	20000188 	.word	0x20000188
 8000a10:	20000194 	.word	0x20000194
 8000a14:	200001a0 	.word	0x200001a0
 8000a18:	200001ac 	.word	0x200001ac
 8000a1c:	200001b8 	.word	0x200001b8
 8000a20:	200001c4 	.word	0x200001c4
 8000a24:	200001cc 	.word	0x200001cc
 8000a28:	200001d4 	.word	0x200001d4
 8000a2c:	200001dc 	.word	0x200001dc
 8000a30:	200001f8 	.word	0x200001f8
 8000a34:	20000214 	.word	0x20000214
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000230 	.word	0x20000230
 8000a40:	20000250 	.word	0x20000250
 8000a44:	2000025c 	.word	0x2000025c

08000a48 <_GLOBAL__sub_I_g_OutputD1Red>:
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fef5 	bl	8000840 <_Z41__static_initialization_and_destruction_0ii>
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000a5c:	f000 fe40 	bl	80016e0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000a60:	f000 f832 	bl	8000ac8 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000a64:	f000 f8d6 	bl	8000c14 <_ZL12MX_GPIO_Initv>
    MX_TIM2_Init();
 8000a68:	f000 f878 	bl	8000b5c <_ZL12MX_TIM2_Initv>
    HAL_TIM_Base_Start_IT(&htim2);
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <main+0x24>)
 8000a6e:	f001 fdab 	bl	80025c8 <HAL_TIM_Base_Start_IT>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        g_Controller.Run();
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <main+0x28>)
 8000a74:	f000 fb4c 	bl	8001110 <_ZN10Controller3RunEv>
 8000a78:	e7fb      	b.n	8000a72 <main+0x1a>
 8000a7a:	bf00      	nop
 8000a7c:	20000268 	.word	0x20000268
 8000a80:	2000001c 	.word	0x2000001c

08000a84 <HAL_TIM_PeriodElapsedCallback>:
    /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    /* Timers */
    g_TimerGlobal.Breath();
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a8e:	f000 fa75 	bl	8000f7c <_ZN5Timer6BreathEv>
    g_TimerSecond.Breath();
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a94:	f000 fa72 	bl	8000f7c <_ZN5Timer6BreathEv>

    /* Buttons */
    g_ButtonSelect.Listen();
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a9a:	f7ff fe6f 	bl	800077c <_ZN6Switch6ListenEv>
    g_ButtonIncrement.Listen();
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000aa0:	f7ff fe6c 	bl	800077c <_ZN6Switch6ListenEv>
    g_ButtonConfirm.Listen();
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000aa6:	f7ff fe69 	bl	800077c <_ZN6Switch6ListenEv>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000250 	.word	0x20000250
 8000ab8:	2000025c 	.word	0x2000025c
 8000abc:	200001dc 	.word	0x200001dc
 8000ac0:	200001f8 	.word	0x200001f8
 8000ac4:	20000214 	.word	0x20000214

08000ac8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b090      	sub	sp, #64	; 0x40
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	2228      	movs	r2, #40	; 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 f966 	bl	8002da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af2:	2310      	movs	r3, #16
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f926 	bl	8001d58 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <_Z18SystemClock_Configv+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f91a 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fb8e 	bl	800225c <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f900 	bl	8000d54 <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3740      	adds	r7, #64	; 0x40
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b90:	2209      	movs	r2, #9
 8000b92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ba2:	f001 fcc1 	bl	8002528 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000bb6:	f000 f8cd 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bc8:	f001 fe58 	bl	800287c <HAL_TIM_ConfigClockSource>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf14      	ite	ne
 8000bd2:	2301      	movne	r3, #1
 8000bd4:	2300      	moveq	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000bdc:	f000 f8ba 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bee:	f002 f825 	bl	8002c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000c02:	f000 f8a7 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000268 	.word	0x20000268

08000c14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0310 	and.w	r3, r3, #16
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c40:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a3e      	ldr	r2, [pc, #248]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c46:	f043 0320 	orr.w	r3, r3, #32
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a38      	ldr	r2, [pc, #224]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <_ZL12MX_GPIO_Initv+0x12c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D2_GRN_Pin|D2_YEL_Pin|D1_GRN_Pin|D1_YEL_Pin
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f640 6109 	movw	r1, #3593	; 0xe09
 8000c8e:	482d      	ldr	r0, [pc, #180]	; (8000d44 <_ZL12MX_GPIO_Initv+0x130>)
 8000c90:	f001 f831 	bl	8001cf6 <HAL_GPIO_WritePin>
                          |D1_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D2_RED_Pin|SEG_D_Pin|SEG_E_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f641 0108 	movw	r1, #6152	; 0x1808
 8000c9a:	482b      	ldr	r0, [pc, #172]	; (8000d48 <_ZL12MX_GPIO_Initv+0x134>)
 8000c9c:	f001 f82b 	bl	8001cf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_G_Pin
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f64a 0106 	movw	r1, #43014	; 0xa806
 8000ca6:	4829      	ldr	r0, [pc, #164]	; (8000d4c <_ZL12MX_GPIO_Initv+0x138>)
 8000ca8:	f001 f825 	bl	8001cf6 <HAL_GPIO_WritePin>
                          |SEG_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <_ZL12MX_GPIO_Initv+0x13c>)
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4820      	ldr	r0, [pc, #128]	; (8000d44 <_ZL12MX_GPIO_Initv+0x130>)
 8000cc2:	f000 fe7d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_GRN_Pin D2_YEL_Pin D1_GRN_Pin D1_YEL_Pin
                           D1_RED_Pin */
  GPIO_InitStruct.Pin = D2_GRN_Pin|D2_YEL_Pin|D1_GRN_Pin|D1_YEL_Pin
 8000cc6:	f640 6309 	movw	r3, #3593	; 0xe09
 8000cca:	613b      	str	r3, [r7, #16]
                          |D1_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <_ZL12MX_GPIO_Initv+0x130>)
 8000ce0:	f000 fe6e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_RED_Pin SEG_D_Pin SEG_E_Pin */
  GPIO_InitStruct.Pin = D2_RED_Pin|SEG_D_Pin|SEG_E_Pin;
 8000ce4:	f641 0308 	movw	r3, #6152	; 0x1808
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4812      	ldr	r0, [pc, #72]	; (8000d48 <_ZL12MX_GPIO_Initv+0x134>)
 8000cfe:	f000 fe5f 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_SEL_Pin BUT_CONF_Pin BUT_INC_Pin */
  GPIO_InitStruct.Pin = BUT_SEL_Pin|BUT_CONF_Pin|BUT_INC_Pin;
 8000d02:	2370      	movs	r3, #112	; 0x70
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <_ZL12MX_GPIO_Initv+0x130>)
 8000d16:	f000 fe53 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_G_Pin
                           SEG_F_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_G_Pin
 8000d1a:	f64a 0306 	movw	r3, #43014	; 0xa806
 8000d1e:	613b      	str	r3, [r7, #16]
                          |SEG_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <_ZL12MX_GPIO_Initv+0x138>)
 8000d34:	f000 fe44 	bl	80019c0 <HAL_GPIO_Init>

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40011000 	.word	0x40011000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	10110000 	.word	0x10110000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_MspInit+0x60>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_MspInit+0x60>)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d113      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_TIM_Base_MspInit+0x44>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_TIM_Base_MspInit+0x44>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0x44>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	201c      	movs	r0, #28
 8000df4:	f000 fdad 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df8:	201c      	movs	r0, #28
 8000dfa:	f000 fdc6 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e52:	f000 fc8b 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM2_IRQHandler+0x10>)
 8000e62:	f001 fc03 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000268 	.word	0x20000268

08000e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <_kill>:

int _kill(int pid, int sig)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e88:	f001 ff64 	bl	8002d54 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2216      	movs	r2, #22
 8000e90:	601a      	str	r2, [r3, #0]
  return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_exit>:

void _exit (int status)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ea6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffe7 	bl	8000e7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eb0:	e7fe      	b.n	8000eb0 <_exit+0x12>

08000eb2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <_ZN5TimerC1Ev>:
 *      Author: Nguyen Tran
 */

#include "helper/timer.h"

Timer::Timer() { }
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <_ZN5Timer9HasSignalEv>:

/*
 * Flag check
 */
bool Timer::HasSignal()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    if (m_Signal) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <_ZN5Timer9HasSignalEv+0x1a>
        m_Signal = false;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
        return true;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <_ZN5Timer9HasSignalEv+0x1c>
    }
    return false;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <_ZN5Timer5StartEv>:

/*
 * Controls
 */
void Timer::Start() { 
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
    m_Remaining = m_Duration;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <_ZN5Timer5ResetEv>:
void Timer::Reset() { 
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    Start();
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffec 	bl	8000f0a <_ZN5Timer5StartEv>
    m_Signal = false;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZN5Timer3SetEi>:

void Timer::Set(int duration)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    m_Duration = duration / TICK;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <_ZN5Timer3SetEi+0x38>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	1092      	asrs	r2, r2, #2
 8000f54:	17db      	asrs	r3, r3, #31
 8000f56:	1ad2      	subs	r2, r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
    if (m_Remaining > m_Duration) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dd02      	ble.n	8000f6e <_ZN5Timer3SetEi+0x2e>
        Reset();
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffdb 	bl	8000f24 <_ZN5Timer5ResetEv>
    }
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	66666667 	.word	0x66666667

08000f7c <_ZN5Timer6BreathEv>:

void Timer::Breath()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    if (m_Remaining > 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd0e      	ble.n	8000faa <_ZN5Timer6BreathEv+0x2e>
        m_Remaining -= 1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	1e5a      	subs	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	609a      	str	r2, [r3, #8]
        if (m_Remaining == 0) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <_ZN5Timer6BreathEv+0x2e>
            m_Signal = true;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
            Start();
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffb0 	bl	8000f0a <_ZN5Timer5StartEv>
        }
    }
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZN5InputC1EP12GPIO_TypeDeft>:

Input::Input()
{
}

Input::Input(GPIO_TypeDef* port, uint16_t pin)
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f86e 	bl	80010a4 <_ZN3PinC1Ev>
{
    m_Port = port;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	601a      	str	r2, [r3, #0]
    m_Pin = pin;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	809a      	strh	r2, [r3, #4]
}
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_ZN5Input4ReadEv>:

GPIO_PinState Input::Read()
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(m_Port, m_Pin);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	889b      	ldrh	r3, [r3, #4]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f000 fe69 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZN6OutputC1EP12GPIO_TypeDeft>:
Output::Output()
    : Pin()
{
}

Output::Output(GPIO_TypeDef* port, uint16_t pin)
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	4613      	mov	r3, r2
 800100c:	80fb      	strh	r3, [r7, #6]
    : Pin(port, pin)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f84f 	bl	80010b8 <_ZN3PinC1EP12GPIO_TypeDeft>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	719a      	strb	r2, [r3, #6]
{
}
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZN6Output3SetEv>:

/*
 * Primitype control
 */
void Output::Set()
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_Port, m_Pin, GPIO_PinState::GPIO_PIN_SET);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	f000 fe5a 	bl	8001cf6 <HAL_GPIO_WritePin>
    m_IsSet = true;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	719a      	strb	r2, [r3, #6]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN6Output5ResetEv>:

void Output::Reset()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_Port, m_Pin, GPIO_PinState::GPIO_PIN_RESET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	f000 fe47 	bl	8001cf6 <HAL_GPIO_WritePin>
    m_IsSet = false;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	719a      	strb	r2, [r3, #6]
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZN6Output6ToggleEv>:

void Output::Toggle()
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(m_Port, m_Pin);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f000 fe4c 	bl	8001d26 <HAL_GPIO_TogglePin>
    m_IsSet = !m_IsSet;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	799b      	ldrb	r3, [r3, #6]
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	719a      	strb	r2, [r3, #6]
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZN3PinC1Ev>:
 *      Author: Nguyen Tran
 */

#include "model/pin.h"

Pin::Pin() { }
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <_ZN3PinC1EP12GPIO_TypeDeft>:

Pin::Pin(GPIO_TypeDef* port, uint16_t pin)
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]
{
    m_Port = port;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	601a      	str	r2, [r3, #0]
    m_Pin = pin;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	809a      	strh	r2, [r3, #4]
}
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <_ZN10Controller8GetStateEv>:
#include "service/controller.h"

/*
 * State helpers
 */
State Controller::GetState() { return this->STATE; }
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <_ZN10Controller8SetStateE5State>:

void Controller::SetState(State to) { this->STATE = to; }
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
	...

08001110 <_ZN10Controller3RunEv>:

int G_GRN_COUNTDOWN = 4000;
int L_GRN_COUNTDOWN = G_GRN_COUNTDOWN;

void Controller::Run()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    switch (GetState()) {
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffe0 	bl	80010de <_ZN10Controller8GetStateEv>
 800111e:	4603      	mov	r3, r0
 8001120:	2b06      	cmp	r3, #6
 8001122:	f200 8253 	bhi.w	80015cc <_ZN10Controller3RunEv+0x4bc>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <_ZN10Controller3RunEv+0x1c>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	08001149 	.word	0x08001149
 8001130:	080011a1 	.word	0x080011a1
 8001134:	080012d9 	.word	0x080012d9
 8001138:	0800123d 	.word	0x0800123d
 800113c:	08001375 	.word	0x08001375
 8001140:	08001525 	.word	0x08001525
 8001144:	0800147d 	.word	0x0800147d
    case State::INIT:
        g_LedD1Red.Off();
 8001148:	489f      	ldr	r0, [pc, #636]	; (80013c8 <_ZN10Controller3RunEv+0x2b8>)
 800114a:	f7ff f83b 	bl	80001c4 <_ZN3Led3OffEv>
        g_LedD1Green.Off();
 800114e:	489f      	ldr	r0, [pc, #636]	; (80013cc <_ZN10Controller3RunEv+0x2bc>)
 8001150:	f7ff f838 	bl	80001c4 <_ZN3Led3OffEv>
        g_LedD1Yel.Off();
 8001154:	489e      	ldr	r0, [pc, #632]	; (80013d0 <_ZN10Controller3RunEv+0x2c0>)
 8001156:	f7ff f835 	bl	80001c4 <_ZN3Led3OffEv>

        g_LedD2Green.Off();
 800115a:	489e      	ldr	r0, [pc, #632]	; (80013d4 <_ZN10Controller3RunEv+0x2c4>)
 800115c:	f7ff f832 	bl	80001c4 <_ZN3Led3OffEv>
        g_LedD2Red.Off();
 8001160:	489d      	ldr	r0, [pc, #628]	; (80013d8 <_ZN10Controller3RunEv+0x2c8>)
 8001162:	f7ff f82f 	bl	80001c4 <_ZN3Led3OffEv>
        g_LedD2Yel.Off();
 8001166:	489d      	ldr	r0, [pc, #628]	; (80013dc <_ZN10Controller3RunEv+0x2cc>)
 8001168:	f7ff f82c 	bl	80001c4 <_ZN3Led3OffEv>

        g_TimerSecond.Set(1000);
 800116c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001170:	489b      	ldr	r0, [pc, #620]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 8001172:	f7ff fee5 	bl	8000f40 <_ZN5Timer3SetEi>
        g_TimerGlobal.Set(G_RED_COUNTDOWN);
 8001176:	4b9b      	ldr	r3, [pc, #620]	; (80013e4 <_ZN10Controller3RunEv+0x2d4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	489a      	ldr	r0, [pc, #616]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 800117e:	f7ff fedf 	bl	8000f40 <_ZN5Timer3SetEi>
        L_RED_COUNTDOWN = G_RED_COUNTDOWN;
 8001182:	4b98      	ldr	r3, [pc, #608]	; (80013e4 <_ZN10Controller3RunEv+0x2d4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a99      	ldr	r2, [pc, #612]	; (80013ec <_ZN10Controller3RunEv+0x2dc>)
 8001188:	6013      	str	r3, [r2, #0]

        g_TimerSecond.Start();
 800118a:	4895      	ldr	r0, [pc, #596]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800118c:	f7ff febd 	bl	8000f0a <_ZN5Timer5StartEv>
        g_TimerGlobal.Start();
 8001190:	4895      	ldr	r0, [pc, #596]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 8001192:	f7ff feba 	bl	8000f0a <_ZN5Timer5StartEv>

        SetState(State::RED);
 8001196:	2101      	movs	r1, #1
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffab 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        break;
 800119e:	e222      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
    case State::RED:
        g_LedD1Red.On();
 80011a0:	4889      	ldr	r0, [pc, #548]	; (80013c8 <_ZN10Controller3RunEv+0x2b8>)
 80011a2:	f7fe ffff 	bl	80001a4 <_ZN3Led2OnEv>
        g_LedD2Red.On();
 80011a6:	488c      	ldr	r0, [pc, #560]	; (80013d8 <_ZN10Controller3RunEv+0x2c8>)
 80011a8:	f7fe fffc 	bl	80001a4 <_ZN3Led2OnEv>

        g_SegCounter.Display(L_RED_COUNTDOWN / 1000);
 80011ac:	4b8f      	ldr	r3, [pc, #572]	; (80013ec <_ZN10Controller3RunEv+0x2dc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a8f      	ldr	r2, [pc, #572]	; (80013f0 <_ZN10Controller3RunEv+0x2e0>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1192      	asrs	r2, r2, #6
 80011b8:	17db      	asrs	r3, r3, #31
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	488d      	ldr	r0, [pc, #564]	; (80013f4 <_ZN10Controller3RunEv+0x2e4>)
 80011c0:	f7ff f844 	bl	800024c <_ZN10SegmentLed7DisplayEi>

        if (g_ButtonSelect.IsPressed()) {
 80011c4:	488c      	ldr	r0, [pc, #560]	; (80013f8 <_ZN10Controller3RunEv+0x2e8>)
 80011c6:	f7ff fb27 	bl	8000818 <_ZN6Switch9IsPressedEv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <_ZN10Controller3RunEv+0xd0>
            g_TimerSecond.Reset();
 80011d0:	4883      	ldr	r0, [pc, #524]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 80011d2:	f7ff fea7 	bl	8000f24 <_ZN5Timer5ResetEv>
            SetState(State::CHANGE_RED);
 80011d6:	2104      	movs	r1, #4
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff8b 	bl	80010f4 <_ZN10Controller8SetStateE5State>
            return;
 80011de:	e202      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        }

        if (g_TimerSecond.HasSignal()) {
 80011e0:	487f      	ldr	r0, [pc, #508]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 80011e2:	f7ff fe7f 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <_ZN10Controller3RunEv+0xe8>
            L_RED_COUNTDOWN -= 1000;
 80011ec:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <_ZN10Controller3RunEv+0x2dc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80011f4:	4a7d      	ldr	r2, [pc, #500]	; (80013ec <_ZN10Controller3RunEv+0x2dc>)
 80011f6:	6013      	str	r3, [r2, #0]
        }

        if (g_TimerGlobal.HasSignal()) {
 80011f8:	487b      	ldr	r0, [pc, #492]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 80011fa:	f7ff fe73 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 81e5 	beq.w	80015d0 <_ZN10Controller3RunEv+0x4c0>
            g_TimerGlobal.Set(G_GRN_COUNTDOWN);
 8001206:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <_ZN10Controller3RunEv+0x2ec>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4876      	ldr	r0, [pc, #472]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 800120e:	f7ff fe97 	bl	8000f40 <_ZN5Timer3SetEi>
            L_GRN_COUNTDOWN = G_GRN_COUNTDOWN;
 8001212:	4b7a      	ldr	r3, [pc, #488]	; (80013fc <_ZN10Controller3RunEv+0x2ec>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7a      	ldr	r2, [pc, #488]	; (8001400 <_ZN10Controller3RunEv+0x2f0>)
 8001218:	6013      	str	r3, [r2, #0]

            g_TimerGlobal.Reset();
 800121a:	4873      	ldr	r0, [pc, #460]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 800121c:	f7ff fe82 	bl	8000f24 <_ZN5Timer5ResetEv>
            g_TimerSecond.Reset();
 8001220:	486f      	ldr	r0, [pc, #444]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 8001222:	f7ff fe7f 	bl	8000f24 <_ZN5Timer5ResetEv>

            g_LedD1Red.Off();
 8001226:	4868      	ldr	r0, [pc, #416]	; (80013c8 <_ZN10Controller3RunEv+0x2b8>)
 8001228:	f7fe ffcc 	bl	80001c4 <_ZN3Led3OffEv>
            g_LedD2Red.Off();
 800122c:	486a      	ldr	r0, [pc, #424]	; (80013d8 <_ZN10Controller3RunEv+0x2c8>)
 800122e:	f7fe ffc9 	bl	80001c4 <_ZN3Led3OffEv>

            SetState(State::GREEN);
 8001232:	2102      	movs	r1, #2
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff5d 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        }
        break;
 800123a:	e1c9      	b.n	80015d0 <_ZN10Controller3RunEv+0x4c0>
    case State::YELLOW:
        g_LedD1Yel.On();
 800123c:	4864      	ldr	r0, [pc, #400]	; (80013d0 <_ZN10Controller3RunEv+0x2c0>)
 800123e:	f7fe ffb1 	bl	80001a4 <_ZN3Led2OnEv>
        g_LedD2Yel.On();
 8001242:	4866      	ldr	r0, [pc, #408]	; (80013dc <_ZN10Controller3RunEv+0x2cc>)
 8001244:	f7fe ffae 	bl	80001a4 <_ZN3Led2OnEv>

        g_SegCounter.Display(L_YEL_COUNTDOWN / 1000);
 8001248:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <_ZN10Controller3RunEv+0x2f4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a68      	ldr	r2, [pc, #416]	; (80013f0 <_ZN10Controller3RunEv+0x2e0>)
 800124e:	fb82 1203 	smull	r1, r2, r2, r3
 8001252:	1192      	asrs	r2, r2, #6
 8001254:	17db      	asrs	r3, r3, #31
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4619      	mov	r1, r3
 800125a:	4866      	ldr	r0, [pc, #408]	; (80013f4 <_ZN10Controller3RunEv+0x2e4>)
 800125c:	f7fe fff6 	bl	800024c <_ZN10SegmentLed7DisplayEi>

        if (g_ButtonSelect.IsPressed()) {
 8001260:	4865      	ldr	r0, [pc, #404]	; (80013f8 <_ZN10Controller3RunEv+0x2e8>)
 8001262:	f7ff fad9 	bl	8000818 <_ZN6Switch9IsPressedEv>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d007      	beq.n	800127c <_ZN10Controller3RunEv+0x16c>
            g_TimerSecond.Reset();
 800126c:	485c      	ldr	r0, [pc, #368]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800126e:	f7ff fe59 	bl	8000f24 <_ZN5Timer5ResetEv>
            SetState(State::CHANGE_YELLOW);
 8001272:	2106      	movs	r1, #6
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff3d 	bl	80010f4 <_ZN10Controller8SetStateE5State>
            return;
 800127a:	e1b4      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        }

        if (g_TimerSecond.HasSignal()) {
 800127c:	4858      	ldr	r0, [pc, #352]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800127e:	f7ff fe31 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <_ZN10Controller3RunEv+0x184>
            L_YEL_COUNTDOWN -= 1000;
 8001288:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <_ZN10Controller3RunEv+0x2f4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001290:	4a5c      	ldr	r2, [pc, #368]	; (8001404 <_ZN10Controller3RunEv+0x2f4>)
 8001292:	6013      	str	r3, [r2, #0]
        }

        if (g_TimerGlobal.HasSignal()) {
 8001294:	4854      	ldr	r0, [pc, #336]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 8001296:	f7ff fe25 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8199 	beq.w	80015d4 <_ZN10Controller3RunEv+0x4c4>
            g_TimerGlobal.Set(G_RED_COUNTDOWN);
 80012a2:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <_ZN10Controller3RunEv+0x2d4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	484f      	ldr	r0, [pc, #316]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 80012aa:	f7ff fe49 	bl	8000f40 <_ZN5Timer3SetEi>
            L_RED_COUNTDOWN = G_RED_COUNTDOWN;
 80012ae:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <_ZN10Controller3RunEv+0x2d4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <_ZN10Controller3RunEv+0x2dc>)
 80012b4:	6013      	str	r3, [r2, #0]

            g_TimerGlobal.Reset();
 80012b6:	484c      	ldr	r0, [pc, #304]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 80012b8:	f7ff fe34 	bl	8000f24 <_ZN5Timer5ResetEv>
            g_TimerSecond.Reset();
 80012bc:	4848      	ldr	r0, [pc, #288]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 80012be:	f7ff fe31 	bl	8000f24 <_ZN5Timer5ResetEv>

            g_LedD1Yel.Off();
 80012c2:	4843      	ldr	r0, [pc, #268]	; (80013d0 <_ZN10Controller3RunEv+0x2c0>)
 80012c4:	f7fe ff7e 	bl	80001c4 <_ZN3Led3OffEv>
            g_LedD2Yel.Off();
 80012c8:	4844      	ldr	r0, [pc, #272]	; (80013dc <_ZN10Controller3RunEv+0x2cc>)
 80012ca:	f7fe ff7b 	bl	80001c4 <_ZN3Led3OffEv>

            SetState(State::RED);
 80012ce:	2101      	movs	r1, #1
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff0f 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        }
        break;
 80012d6:	e17d      	b.n	80015d4 <_ZN10Controller3RunEv+0x4c4>
    case State::GREEN:
        g_LedD1Green.On();
 80012d8:	483c      	ldr	r0, [pc, #240]	; (80013cc <_ZN10Controller3RunEv+0x2bc>)
 80012da:	f7fe ff63 	bl	80001a4 <_ZN3Led2OnEv>
        g_LedD2Green.On();
 80012de:	483d      	ldr	r0, [pc, #244]	; (80013d4 <_ZN10Controller3RunEv+0x2c4>)
 80012e0:	f7fe ff60 	bl	80001a4 <_ZN3Led2OnEv>

        g_SegCounter.Display(L_GRN_COUNTDOWN / 1000);
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <_ZN10Controller3RunEv+0x2f0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a41      	ldr	r2, [pc, #260]	; (80013f0 <_ZN10Controller3RunEv+0x2e0>)
 80012ea:	fb82 1203 	smull	r1, r2, r2, r3
 80012ee:	1192      	asrs	r2, r2, #6
 80012f0:	17db      	asrs	r3, r3, #31
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	483f      	ldr	r0, [pc, #252]	; (80013f4 <_ZN10Controller3RunEv+0x2e4>)
 80012f8:	f7fe ffa8 	bl	800024c <_ZN10SegmentLed7DisplayEi>

        if (g_ButtonSelect.IsPressed()) {
 80012fc:	483e      	ldr	r0, [pc, #248]	; (80013f8 <_ZN10Controller3RunEv+0x2e8>)
 80012fe:	f7ff fa8b 	bl	8000818 <_ZN6Switch9IsPressedEv>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <_ZN10Controller3RunEv+0x208>
            g_TimerSecond.Reset();
 8001308:	4835      	ldr	r0, [pc, #212]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800130a:	f7ff fe0b 	bl	8000f24 <_ZN5Timer5ResetEv>
            SetState(State::CHANGE_GREEN);
 800130e:	2105      	movs	r1, #5
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff feef 	bl	80010f4 <_ZN10Controller8SetStateE5State>
            return;
 8001316:	e166      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        }

        if (g_TimerSecond.HasSignal()) {
 8001318:	4831      	ldr	r0, [pc, #196]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800131a:	f7ff fde3 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <_ZN10Controller3RunEv+0x220>
            L_GRN_COUNTDOWN -= 1000;
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <_ZN10Controller3RunEv+0x2f0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800132c:	4a34      	ldr	r2, [pc, #208]	; (8001400 <_ZN10Controller3RunEv+0x2f0>)
 800132e:	6013      	str	r3, [r2, #0]
        }

        if (g_TimerGlobal.HasSignal()) {
 8001330:	482d      	ldr	r0, [pc, #180]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 8001332:	f7ff fdd7 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 814d 	beq.w	80015d8 <_ZN10Controller3RunEv+0x4c8>
            g_TimerGlobal.Set(G_YEL_COUNTDOWN);
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <_ZN10Controller3RunEv+0x2f8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	4828      	ldr	r0, [pc, #160]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 8001346:	f7ff fdfb 	bl	8000f40 <_ZN5Timer3SetEi>
            L_YEL_COUNTDOWN = G_YEL_COUNTDOWN;
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <_ZN10Controller3RunEv+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <_ZN10Controller3RunEv+0x2f4>)
 8001350:	6013      	str	r3, [r2, #0]

            g_TimerGlobal.Reset();
 8001352:	4825      	ldr	r0, [pc, #148]	; (80013e8 <_ZN10Controller3RunEv+0x2d8>)
 8001354:	f7ff fde6 	bl	8000f24 <_ZN5Timer5ResetEv>
            g_TimerSecond.Reset();
 8001358:	4821      	ldr	r0, [pc, #132]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800135a:	f7ff fde3 	bl	8000f24 <_ZN5Timer5ResetEv>

            g_LedD1Green.Off();
 800135e:	481b      	ldr	r0, [pc, #108]	; (80013cc <_ZN10Controller3RunEv+0x2bc>)
 8001360:	f7fe ff30 	bl	80001c4 <_ZN3Led3OffEv>
            g_LedD2Green.Off();
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <_ZN10Controller3RunEv+0x2c4>)
 8001366:	f7fe ff2d 	bl	80001c4 <_ZN3Led3OffEv>

            SetState(State::YELLOW);
 800136a:	2103      	movs	r1, #3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fec1 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        }
        break;
 8001372:	e131      	b.n	80015d8 <_ZN10Controller3RunEv+0x4c8>
    case State::CHANGE_RED:
        g_SegCounter.Display(G_RED_COUNTDOWN / 1000);
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <_ZN10Controller3RunEv+0x2d4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <_ZN10Controller3RunEv+0x2e0>)
 800137a:	fb82 1203 	smull	r1, r2, r2, r3
 800137e:	1192      	asrs	r2, r2, #6
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4619      	mov	r1, r3
 8001386:	481b      	ldr	r0, [pc, #108]	; (80013f4 <_ZN10Controller3RunEv+0x2e4>)
 8001388:	f7fe ff60 	bl	800024c <_ZN10SegmentLed7DisplayEi>

        if (g_TimerSecond.HasSignal()) {
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <_ZN10Controller3RunEv+0x2d0>)
 800138e:	f7ff fda9 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <_ZN10Controller3RunEv+0x294>
            g_LedD1Red.Toggle();
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <_ZN10Controller3RunEv+0x2b8>)
 800139a:	f7fe ff23 	bl	80001e4 <_ZN3Led6ToggleEv>
            g_LedD2Red.Toggle();
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <_ZN10Controller3RunEv+0x2c8>)
 80013a0:	f7fe ff20 	bl	80001e4 <_ZN3Led6ToggleEv>
        }

        if (g_ButtonSelect.IsPressed()) {
 80013a4:	4814      	ldr	r0, [pc, #80]	; (80013f8 <_ZN10Controller3RunEv+0x2e8>)
 80013a6:	f7ff fa37 	bl	8000818 <_ZN6Switch9IsPressedEv>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02d      	beq.n	800140c <_ZN10Controller3RunEv+0x2fc>
            g_LedD1Red.Off();
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <_ZN10Controller3RunEv+0x2b8>)
 80013b2:	f7fe ff07 	bl	80001c4 <_ZN3Led3OffEv>
            g_LedD2Red.Off();
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <_ZN10Controller3RunEv+0x2c8>)
 80013b8:	f7fe ff04 	bl	80001c4 <_ZN3Led3OffEv>

            SetState(State::CHANGE_GREEN);
 80013bc:	2105      	movs	r1, #5
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe98 	bl	80010f4 <_ZN10Controller8SetStateE5State>
            return;
 80013c4:	e10f      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
 80013c6:	bf00      	nop
 80013c8:	20000134 	.word	0x20000134
 80013cc:	20000128 	.word	0x20000128
 80013d0:	20000140 	.word	0x20000140
 80013d4:	2000014c 	.word	0x2000014c
 80013d8:	20000158 	.word	0x20000158
 80013dc:	20000164 	.word	0x20000164
 80013e0:	2000025c 	.word	0x2000025c
 80013e4:	20000028 	.word	0x20000028
 80013e8:	20000250 	.word	0x20000250
 80013ec:	200002b0 	.word	0x200002b0
 80013f0:	10624dd3 	.word	0x10624dd3
 80013f4:	20000230 	.word	0x20000230
 80013f8:	200001dc 	.word	0x200001dc
 80013fc:	20000030 	.word	0x20000030
 8001400:	200002b8 	.word	0x200002b8
 8001404:	200002b4 	.word	0x200002b4
 8001408:	2000002c 	.word	0x2000002c
        }

        if (g_ButtonIncrement.IsPressed()) {
 800140c:	4877      	ldr	r0, [pc, #476]	; (80015ec <_ZN10Controller3RunEv+0x4dc>)
 800140e:	f7ff fa03 	bl	8000818 <_ZN6Switch9IsPressedEv>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01b      	beq.n	8001450 <_ZN10Controller3RunEv+0x340>
            G_RED_COUNTDOWN += 1000;
 8001418:	4b75      	ldr	r3, [pc, #468]	; (80015f0 <_ZN10Controller3RunEv+0x4e0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001420:	4a73      	ldr	r2, [pc, #460]	; (80015f0 <_ZN10Controller3RunEv+0x4e0>)
 8001422:	6013      	str	r3, [r2, #0]
            if (G_RED_COUNTDOWN > 9000) {
 8001424:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <_ZN10Controller3RunEv+0x4e0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f242 3228 	movw	r2, #9000	; 0x2328
 800142c:	4293      	cmp	r3, r2
 800142e:	dd03      	ble.n	8001438 <_ZN10Controller3RunEv+0x328>
                G_RED_COUNTDOWN = 1000;
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <_ZN10Controller3RunEv+0x4e0>)
 8001432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001436:	601a      	str	r2, [r3, #0]
            }
            g_SegCounter.Display(G_RED_COUNTDOWN / 1000);
 8001438:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <_ZN10Controller3RunEv+0x4e0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6d      	ldr	r2, [pc, #436]	; (80015f4 <_ZN10Controller3RunEv+0x4e4>)
 800143e:	fb82 1203 	smull	r1, r2, r2, r3
 8001442:	1192      	asrs	r2, r2, #6
 8001444:	17db      	asrs	r3, r3, #31
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4619      	mov	r1, r3
 800144a:	486b      	ldr	r0, [pc, #428]	; (80015f8 <_ZN10Controller3RunEv+0x4e8>)
 800144c:	f7fe fefe 	bl	800024c <_ZN10SegmentLed7DisplayEi>
        }

        if (g_ButtonConfirm.IsPressed()) {
 8001450:	486a      	ldr	r0, [pc, #424]	; (80015fc <_ZN10Controller3RunEv+0x4ec>)
 8001452:	f7ff f9e1 	bl	8000818 <_ZN6Switch9IsPressedEv>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80bf 	beq.w	80015dc <_ZN10Controller3RunEv+0x4cc>
            g_TimerGlobal.Reset();
 800145e:	4868      	ldr	r0, [pc, #416]	; (8001600 <_ZN10Controller3RunEv+0x4f0>)
 8001460:	f7ff fd60 	bl	8000f24 <_ZN5Timer5ResetEv>
            g_TimerSecond.Reset();
 8001464:	4867      	ldr	r0, [pc, #412]	; (8001604 <_ZN10Controller3RunEv+0x4f4>)
 8001466:	f7ff fd5d 	bl	8000f24 <_ZN5Timer5ResetEv>

            L_RED_COUNTDOWN = G_RED_COUNTDOWN;
 800146a:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <_ZN10Controller3RunEv+0x4e0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a66      	ldr	r2, [pc, #408]	; (8001608 <_ZN10Controller3RunEv+0x4f8>)
 8001470:	6013      	str	r3, [r2, #0]
            SetState(State::RED);
 8001472:	2101      	movs	r1, #1
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fe3d 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        }
        break;
 800147a:	e0af      	b.n	80015dc <_ZN10Controller3RunEv+0x4cc>
    case State::CHANGE_YELLOW:
        g_SegCounter.Display(G_YEL_COUNTDOWN / 1000);
 800147c:	4b63      	ldr	r3, [pc, #396]	; (800160c <_ZN10Controller3RunEv+0x4fc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <_ZN10Controller3RunEv+0x4e4>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1192      	asrs	r2, r2, #6
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4619      	mov	r1, r3
 800148e:	485a      	ldr	r0, [pc, #360]	; (80015f8 <_ZN10Controller3RunEv+0x4e8>)
 8001490:	f7fe fedc 	bl	800024c <_ZN10SegmentLed7DisplayEi>

        if (g_TimerSecond.HasSignal()) {
 8001494:	485b      	ldr	r0, [pc, #364]	; (8001604 <_ZN10Controller3RunEv+0x4f4>)
 8001496:	f7ff fd25 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <_ZN10Controller3RunEv+0x39c>
            g_LedD1Yel.Toggle();
 80014a0:	485b      	ldr	r0, [pc, #364]	; (8001610 <_ZN10Controller3RunEv+0x500>)
 80014a2:	f7fe fe9f 	bl	80001e4 <_ZN3Led6ToggleEv>
            g_LedD2Yel.Toggle();
 80014a6:	485b      	ldr	r0, [pc, #364]	; (8001614 <_ZN10Controller3RunEv+0x504>)
 80014a8:	f7fe fe9c 	bl	80001e4 <_ZN3Led6ToggleEv>
        }

        if (g_ButtonSelect.IsPressed()) {
 80014ac:	485a      	ldr	r0, [pc, #360]	; (8001618 <_ZN10Controller3RunEv+0x508>)
 80014ae:	f7ff f9b3 	bl	8000818 <_ZN6Switch9IsPressedEv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00a      	beq.n	80014ce <_ZN10Controller3RunEv+0x3be>
            g_LedD1Yel.Off();
 80014b8:	4855      	ldr	r0, [pc, #340]	; (8001610 <_ZN10Controller3RunEv+0x500>)
 80014ba:	f7fe fe83 	bl	80001c4 <_ZN3Led3OffEv>
            g_LedD2Yel.Off();
 80014be:	4855      	ldr	r0, [pc, #340]	; (8001614 <_ZN10Controller3RunEv+0x504>)
 80014c0:	f7fe fe80 	bl	80001c4 <_ZN3Led3OffEv>
            SetState(State::CHANGE_RED);
 80014c4:	2104      	movs	r1, #4
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe14 	bl	80010f4 <_ZN10Controller8SetStateE5State>
            return;
 80014cc:	e08b      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        }

        if (g_ButtonIncrement.IsPressed()) {
 80014ce:	4847      	ldr	r0, [pc, #284]	; (80015ec <_ZN10Controller3RunEv+0x4dc>)
 80014d0:	f7ff f9a2 	bl	8000818 <_ZN6Switch9IsPressedEv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00f      	beq.n	80014fa <_ZN10Controller3RunEv+0x3ea>
            G_YEL_COUNTDOWN += 1000;
 80014da:	4b4c      	ldr	r3, [pc, #304]	; (800160c <_ZN10Controller3RunEv+0x4fc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80014e2:	4a4a      	ldr	r2, [pc, #296]	; (800160c <_ZN10Controller3RunEv+0x4fc>)
 80014e4:	6013      	str	r3, [r2, #0]
            if (G_YEL_COUNTDOWN > 9000) {
 80014e6:	4b49      	ldr	r3, [pc, #292]	; (800160c <_ZN10Controller3RunEv+0x4fc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f242 3228 	movw	r2, #9000	; 0x2328
 80014ee:	4293      	cmp	r3, r2
 80014f0:	dd03      	ble.n	80014fa <_ZN10Controller3RunEv+0x3ea>
                G_YEL_COUNTDOWN = 1000;
 80014f2:	4b46      	ldr	r3, [pc, #280]	; (800160c <_ZN10Controller3RunEv+0x4fc>)
 80014f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f8:	601a      	str	r2, [r3, #0]
            }
        }

        if (g_ButtonConfirm.IsPressed()) {
 80014fa:	4840      	ldr	r0, [pc, #256]	; (80015fc <_ZN10Controller3RunEv+0x4ec>)
 80014fc:	f7ff f98c 	bl	8000818 <_ZN6Switch9IsPressedEv>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d06c      	beq.n	80015e0 <_ZN10Controller3RunEv+0x4d0>
            g_TimerGlobal.Reset();
 8001506:	483e      	ldr	r0, [pc, #248]	; (8001600 <_ZN10Controller3RunEv+0x4f0>)
 8001508:	f7ff fd0c 	bl	8000f24 <_ZN5Timer5ResetEv>
            g_TimerSecond.Reset();
 800150c:	483d      	ldr	r0, [pc, #244]	; (8001604 <_ZN10Controller3RunEv+0x4f4>)
 800150e:	f7ff fd09 	bl	8000f24 <_ZN5Timer5ResetEv>

            L_YEL_COUNTDOWN = G_YEL_COUNTDOWN;
 8001512:	4b3e      	ldr	r3, [pc, #248]	; (800160c <_ZN10Controller3RunEv+0x4fc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a41      	ldr	r2, [pc, #260]	; (800161c <_ZN10Controller3RunEv+0x50c>)
 8001518:	6013      	str	r3, [r2, #0]


            SetState(State::YELLOW);
 800151a:	2103      	movs	r1, #3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fde9 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        }
        break;
 8001522:	e05d      	b.n	80015e0 <_ZN10Controller3RunEv+0x4d0>
    case State::CHANGE_GREEN:
        g_SegCounter.Display(G_GRN_COUNTDOWN / 1000);
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <_ZN10Controller3RunEv+0x510>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <_ZN10Controller3RunEv+0x4e4>)
 800152a:	fb82 1203 	smull	r1, r2, r2, r3
 800152e:	1192      	asrs	r2, r2, #6
 8001530:	17db      	asrs	r3, r3, #31
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	4619      	mov	r1, r3
 8001536:	4830      	ldr	r0, [pc, #192]	; (80015f8 <_ZN10Controller3RunEv+0x4e8>)
 8001538:	f7fe fe88 	bl	800024c <_ZN10SegmentLed7DisplayEi>

        if (g_TimerSecond.HasSignal()) {
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <_ZN10Controller3RunEv+0x4f4>)
 800153e:	f7ff fcd1 	bl	8000ee4 <_ZN5Timer9HasSignalEv>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <_ZN10Controller3RunEv+0x444>
            g_LedD1Green.Toggle();
 8001548:	4836      	ldr	r0, [pc, #216]	; (8001624 <_ZN10Controller3RunEv+0x514>)
 800154a:	f7fe fe4b 	bl	80001e4 <_ZN3Led6ToggleEv>
            g_LedD2Green.Toggle();
 800154e:	4836      	ldr	r0, [pc, #216]	; (8001628 <_ZN10Controller3RunEv+0x518>)
 8001550:	f7fe fe48 	bl	80001e4 <_ZN3Led6ToggleEv>
        }

        if (g_ButtonSelect.IsPressed()) {
 8001554:	4830      	ldr	r0, [pc, #192]	; (8001618 <_ZN10Controller3RunEv+0x508>)
 8001556:	f7ff f95f 	bl	8000818 <_ZN6Switch9IsPressedEv>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <_ZN10Controller3RunEv+0x466>
            g_LedD1Green.Off();
 8001560:	4830      	ldr	r0, [pc, #192]	; (8001624 <_ZN10Controller3RunEv+0x514>)
 8001562:	f7fe fe2f 	bl	80001c4 <_ZN3Led3OffEv>
            g_LedD2Green.Off();
 8001566:	4830      	ldr	r0, [pc, #192]	; (8001628 <_ZN10Controller3RunEv+0x518>)
 8001568:	f7fe fe2c 	bl	80001c4 <_ZN3Led3OffEv>

            SetState(State::CHANGE_YELLOW);
 800156c:	2106      	movs	r1, #6
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fdc0 	bl	80010f4 <_ZN10Controller8SetStateE5State>
            return;
 8001574:	e037      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        }

        if (g_ButtonIncrement.IsPressed()) {
 8001576:	481d      	ldr	r0, [pc, #116]	; (80015ec <_ZN10Controller3RunEv+0x4dc>)
 8001578:	f7ff f94e 	bl	8000818 <_ZN6Switch9IsPressedEv>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00f      	beq.n	80015a2 <_ZN10Controller3RunEv+0x492>
            G_GRN_COUNTDOWN += 1000;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <_ZN10Controller3RunEv+0x510>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800158a:	4a25      	ldr	r2, [pc, #148]	; (8001620 <_ZN10Controller3RunEv+0x510>)
 800158c:	6013      	str	r3, [r2, #0]
            if (G_GRN_COUNTDOWN > 9000) {
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <_ZN10Controller3RunEv+0x510>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f242 3228 	movw	r2, #9000	; 0x2328
 8001596:	4293      	cmp	r3, r2
 8001598:	dd03      	ble.n	80015a2 <_ZN10Controller3RunEv+0x492>
                G_GRN_COUNTDOWN = 1000;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <_ZN10Controller3RunEv+0x510>)
 800159c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a0:	601a      	str	r2, [r3, #0]
            }
        }

        if (g_ButtonConfirm.IsPressed()) {
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <_ZN10Controller3RunEv+0x4ec>)
 80015a4:	f7ff f938 	bl	8000818 <_ZN6Switch9IsPressedEv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01a      	beq.n	80015e4 <_ZN10Controller3RunEv+0x4d4>
            g_TimerGlobal.Reset();
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <_ZN10Controller3RunEv+0x4f0>)
 80015b0:	f7ff fcb8 	bl	8000f24 <_ZN5Timer5ResetEv>
            g_TimerSecond.Reset();
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <_ZN10Controller3RunEv+0x4f4>)
 80015b6:	f7ff fcb5 	bl	8000f24 <_ZN5Timer5ResetEv>

            L_GRN_COUNTDOWN = G_GRN_COUNTDOWN;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <_ZN10Controller3RunEv+0x510>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <_ZN10Controller3RunEv+0x51c>)
 80015c0:	6013      	str	r3, [r2, #0]
            SetState(State::GREEN);
 80015c2:	2102      	movs	r1, #2
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fd95 	bl	80010f4 <_ZN10Controller8SetStateE5State>
        }
        break;
 80015ca:	e00b      	b.n	80015e4 <_ZN10Controller3RunEv+0x4d4>
    default:
        break;
 80015cc:	bf00      	nop
 80015ce:	e00a      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        break;
 80015d0:	bf00      	nop
 80015d2:	e008      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        break;
 80015d4:	bf00      	nop
 80015d6:	e006      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        break;
 80015d8:	bf00      	nop
 80015da:	e004      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        break;
 80015dc:	bf00      	nop
 80015de:	e002      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        break;
 80015e0:	bf00      	nop
 80015e2:	e000      	b.n	80015e6 <_ZN10Controller3RunEv+0x4d6>
        break;
 80015e4:	bf00      	nop
    }
}
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200001f8 	.word	0x200001f8
 80015f0:	20000028 	.word	0x20000028
 80015f4:	10624dd3 	.word	0x10624dd3
 80015f8:	20000230 	.word	0x20000230
 80015fc:	20000214 	.word	0x20000214
 8001600:	20000250 	.word	0x20000250
 8001604:	2000025c 	.word	0x2000025c
 8001608:	200002b0 	.word	0x200002b0
 800160c:	2000002c 	.word	0x2000002c
 8001610:	20000140 	.word	0x20000140
 8001614:	20000164 	.word	0x20000164
 8001618:	200001dc 	.word	0x200001dc
 800161c:	200002b4 	.word	0x200002b4
 8001620:	20000030 	.word	0x20000030
 8001624:	20000128 	.word	0x20000128
 8001628:	2000014c 	.word	0x2000014c
 800162c:	200002b8 	.word	0x200002b8

08001630 <_Z41__static_initialization_and_destruction_0ii>:
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001646:	4293      	cmp	r3, r2
 8001648:	d10b      	bne.n	8001662 <_Z41__static_initialization_and_destruction_0ii+0x32>
int L_RED_COUNTDOWN = G_RED_COUNTDOWN;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001650:	6013      	str	r3, [r2, #0]
int L_YEL_COUNTDOWN = G_YEL_COUNTDOWN;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001658:	6013      	str	r3, [r2, #0]
int L_GRN_COUNTDOWN = G_GRN_COUNTDOWN;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000028 	.word	0x20000028
 8001670:	200002b0 	.word	0x200002b0
 8001674:	2000002c 	.word	0x2000002c
 8001678:	200002b4 	.word	0x200002b4
 800167c:	20000030 	.word	0x20000030
 8001680:	200002b8 	.word	0x200002b8

08001684 <_GLOBAL__sub_I__ZN10Controller8GetStateEv>:
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
 8001688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ffcf 	bl	8001630 <_Z41__static_initialization_and_destruction_0ii>
 8001692:	bd80      	pop	{r7, pc}

08001694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ba:	f7ff fbfa 	bl	8000eb2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f001 fb4f 	bl	8002d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff f9c9 	bl	8000a58 <main>
  bx lr
 80016c6:	4770      	bx	lr
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016d0:	08002ec4 	.word	0x08002ec4
  ldr r2, =_sbss
 80016d4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016d8:	200002c4 	.word	0x200002c4

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x28>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f923 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f808 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fb30 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f93b 	bl	80019a6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001748:	f000 f903 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000024 	.word	0x20000024
 8001764:	20000038 	.word	0x20000038
 8001768:	20000034 	.word	0x20000034

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x1c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_IncTick+0x20>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_IncTick+0x20>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000038 	.word	0x20000038
 800178c:	200002bc 	.word	0x200002bc

08001790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_GetTick+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	200002bc 	.word	0x200002bc

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e169      	b.n	8001ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8158 	bne.w	8001ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a9a      	ldr	r2, [pc, #616]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d05e      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 80019fc:	4a98      	ldr	r2, [pc, #608]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d875      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a02:	4a98      	ldr	r2, [pc, #608]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d058      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a08:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d86f      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a0e:	4a96      	ldr	r2, [pc, #600]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d052      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a14:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d869      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d04c      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a20:	4a92      	ldr	r2, [pc, #584]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d863      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a26:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d046      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a2c:	4a90      	ldr	r2, [pc, #576]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d85d      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d82a      	bhi.n	8001a8c <HAL_GPIO_Init+0xcc>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d859      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_GPIO_Init+0x80>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001aa7 	.word	0x08001aa7
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001aef 	.word	0x08001aef
 8001a54:	08001aef 	.word	0x08001aef
 8001a58:	08001aef 	.word	0x08001aef
 8001a5c:	08001aef 	.word	0x08001aef
 8001a60:	08001aef 	.word	0x08001aef
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001aef 	.word	0x08001aef
 8001a6c:	08001aef 	.word	0x08001aef
 8001a70:	08001aef 	.word	0x08001aef
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001aef 	.word	0x08001aef
 8001a7c:	08001aef 	.word	0x08001aef
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001ab1 	.word	0x08001ab1
 8001a8c:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <HAL_GPIO_Init+0x2b4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e029      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e024      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01f      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e01a      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e013      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e009      	b.n	8001af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          break;
 8001aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d801      	bhi.n	8001afa <HAL_GPIO_Init+0x13a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_Init+0x13e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d802      	bhi.n	8001b0c <HAL_GPIO_Init+0x14c>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x152>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	210f      	movs	r1, #15
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80b1 	beq.w	8001ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a40      	ldr	r2, [pc, #256]	; (8001c80 <HAL_GPIO_Init+0x2c0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1ec>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3f      	ldr	r2, [pc, #252]	; (8001c84 <HAL_GPIO_Init+0x2c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3e      	ldr	r2, [pc, #248]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3d      	ldr	r2, [pc, #244]	; (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1e0>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001bac:	2300      	movs	r3, #0
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbe:	492f      	ldr	r1, [pc, #188]	; (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	492c      	ldr	r1, [pc, #176]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4928      	ldr	r1, [pc, #160]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	491e      	ldr	r1, [pc, #120]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4918      	ldr	r1, [pc, #96]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4914      	ldr	r1, [pc, #80]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
 8001c5c:	e021      	b.n	8001ca2 <HAL_GPIO_Init+0x2e2>
 8001c5e:	bf00      	nop
 8001c60:	10320000 	.word	0x10320000
 8001c64:	10310000 	.word	0x10310000
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	10210000 	.word	0x10210000
 8001c70:	10120000 	.word	0x10120000
 8001c74:	10110000 	.word	0x10110000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40010800 	.word	0x40010800
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40011400 	.word	0x40011400
 8001c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4909      	ldr	r1, [pc, #36]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae8e 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	372c      	adds	r7, #44	; 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
 8001d02:	4613      	mov	r3, r2
 8001d04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	041a      	lsls	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	041a      	lsls	r2, r3, #16
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	400b      	ands	r3, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e272      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8087 	beq.w	8001e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d00c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d84:	4b8f      	ldr	r3, [pc, #572]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d112      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
 8001d90:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d10b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9e:	4b89      	ldr	r3, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x12c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d168      	bne.n	8001e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e24c      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x76>
 8001dc0:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a7f      	ldr	r2, [pc, #508]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e02e      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a77      	ldr	r2, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xbc>
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a71      	ldr	r2, [pc, #452]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001e14:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a67      	ldr	r2, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fcac 	bl	8001790 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fca8 	bl	8001790 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e200      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe4>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fc98 	bl	8001790 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fc94 	bl	8001790 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1ec      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x10c>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d063      	beq.n	8001f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e9e:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d11c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x18c>
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d116      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x176>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e1c0      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4939      	ldr	r1, [pc, #228]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	e03a      	b.n	8001f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x270>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fc4d 	bl	8001790 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fc49 	bl	8001790 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1a1      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_RCC_OscConfig+0x270>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fc2c 	bl	8001790 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc28 	bl	8001790 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e180      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03a      	beq.n	8001fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d019      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_RCC_OscConfig+0x274>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fc0c 	bl	8001790 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fc08 	bl	8001790 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e160      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f000 faa6 	bl	80024ec <RCC_Delay>
 8001fa0:	e01c      	b.n	8001fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fbf2 	bl	8001790 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fbee 	bl	8001790 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d908      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e146      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	42420000 	.word	0x42420000
 8001fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b92      	ldr	r3, [pc, #584]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e9      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a6 	beq.w	8002136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b8b      	ldr	r3, [pc, #556]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a87      	ldr	r2, [pc, #540]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b7f      	ldr	r3, [pc, #508]	; (8002220 <HAL_RCC_OscConfig+0x4c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a7e      	ldr	r2, [pc, #504]	; (8002220 <HAL_RCC_OscConfig+0x4c8>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7ff fbaf 	bl	8001790 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7ff fbab 	bl	8001790 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e103      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b75      	ldr	r3, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x4c8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x312>
 800205c:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	e02d      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x334>
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a69      	ldr	r2, [pc, #420]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a66      	ldr	r2, [pc, #408]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	e01c      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0x356>
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a60      	ldr	r2, [pc, #384]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6213      	str	r3, [r2, #32]
 80020a0:	4b5e      	ldr	r3, [pc, #376]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a5d      	ldr	r2, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e00b      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a5a      	ldr	r2, [pc, #360]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	4b58      	ldr	r3, [pc, #352]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a57      	ldr	r2, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d015      	beq.n	80020fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb5f 	bl	8001790 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff fb5b 	bl	8001790 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0b1      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ee      	beq.n	80020d6 <HAL_RCC_OscConfig+0x37e>
 80020f8:	e014      	b.n	8002124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fb49 	bl	8001790 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff fb45 	bl	8001790 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e09b      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ee      	bne.n	8002102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b3c      	ldr	r3, [pc, #240]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a3b      	ldr	r2, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d061      	beq.n	8002210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d146      	bne.n	80021e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff fb19 	bl	8001790 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fb15 	bl	8001790 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e06d      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4921      	ldr	r1, [pc, #132]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a19      	ldr	r1, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	430b      	orrs	r3, r1
 80021ae:	491b      	ldr	r1, [pc, #108]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff fae9 	bl	8001790 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff fae5 	bl	8001790 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e03d      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46a>
 80021e0:	e035      	b.n	800224e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fad2 	bl	8001790 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff face 	bl	8001790 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e026      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x498>
 800220e:	e01e      	b.n	800224e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e019      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x500>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d0      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4965      	ldr	r1, [pc, #404]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b59      	ldr	r3, [pc, #356]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a58      	ldr	r2, [pc, #352]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a52      	ldr	r2, [pc, #328]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b50      	ldr	r3, [pc, #320]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	494d      	ldr	r1, [pc, #308]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d040      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e07f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e073      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06b      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4936      	ldr	r1, [pc, #216]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7ff fa20 	bl	8001790 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7ff fa1c 	bl	8001790 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e053      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d210      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	4922      	ldr	r1, [pc, #136]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e032      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4916      	ldr	r1, [pc, #88]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ea:	f000 f821 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	490a      	ldr	r1, [pc, #40]	; (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	5ccb      	ldrb	r3, [r1, r3]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1cc>)
 8002404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_ClockConfig+0x1d0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f97e 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40022000 	.word	0x40022000
 8002420:	40021000 	.word	0x40021000
 8002424:	08002e98 	.word	0x08002e98
 8002428:	20000024 	.word	0x20000024
 800242c:	20000034 	.word	0x20000034

08002430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b490      	push	{r4, r7}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_GetSysClockFreq+0xac>)
 8002438:	1d3c      	adds	r4, r7, #4
 800243a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002440:	f240 2301 	movw	r3, #513	; 0x201
 8002444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d002      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x40>
 800246a:	2b08      	cmp	r3, #8
 800246c:	d003      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x46>
 800246e:	e02b      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002472:	623b      	str	r3, [r7, #32]
      break;
 8002474:	e02b      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	0c9b      	lsrs	r3, r3, #18
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3328      	adds	r3, #40	; 0x28
 8002480:	443b      	add	r3, r7
 8002482:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002486:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	0c5b      	lsrs	r3, r3, #17
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	3328      	adds	r3, #40	; 0x28
 800249e:	443b      	add	r3, r7
 80024a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024aa:	fb03 f202 	mul.w	r2, r3, r2
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
 80024b6:	e004      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	623b      	str	r3, [r7, #32]
      break;
 80024c6:	e002      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ca:	623b      	str	r3, [r7, #32]
      break;
 80024cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc90      	pop	{r4, r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	08002e68 	.word	0x08002e68
 80024e0:	40021000 	.word	0x40021000
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	003d0900 	.word	0x003d0900

080024ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <RCC_Delay+0x34>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <RCC_Delay+0x38>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0a5b      	lsrs	r3, r3, #9
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002508:	bf00      	nop
  }
  while (Delay --);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e5a      	subs	r2, r3, #1
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f9      	bne.n	8002508 <RCC_Delay+0x1c>
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000024 	.word	0x20000024
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e041      	b.n	80025be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fc38 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 fa70 	bl	8002a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e03a      	b.n	8002656 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_TIM_Base_Start_IT+0x98>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x58>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260a:	d009      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x58>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a14      	ldr	r2, [pc, #80]	; (8002664 <HAL_TIM_Base_Start_IT+0x9c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x58>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_TIM_Base_Start_IT+0xa0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d111      	bne.n	8002644 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b06      	cmp	r3, #6
 8002630:	d010      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	e007      	b.n	8002654 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f9b1 	bl	8002a16 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f9a4 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f9b3 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0204 	mvn.w	r2, #4
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f987 	bl	8002a16 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f97a 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f989 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b08      	cmp	r3, #8
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b08      	cmp	r3, #8
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0208 	mvn.w	r2, #8
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f95d 	bl	8002a16 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f950 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f95f 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0210 	mvn.w	r2, #16
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2208      	movs	r2, #8
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f933 	bl	8002a16 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f926 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f935 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0201 	mvn.w	r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f94a 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa77 	bl	8002d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8f9 	bl	8002a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0220 	mvn.w	r2, #32
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa42 	bl	8002cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_TIM_ConfigClockSource+0x18>
 8002890:	2302      	movs	r3, #2
 8002892:	e0b3      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x180>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028cc:	d03e      	beq.n	800294c <HAL_TIM_ConfigClockSource+0xd0>
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d2:	f200 8087 	bhi.w	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	f000 8085 	beq.w	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e2:	d87f      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 80028e4:	2b70      	cmp	r3, #112	; 0x70
 80028e6:	d01a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xa2>
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d87b      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 80028ec:	2b60      	cmp	r3, #96	; 0x60
 80028ee:	d050      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x116>
 80028f0:	2b60      	cmp	r3, #96	; 0x60
 80028f2:	d877      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 80028f4:	2b50      	cmp	r3, #80	; 0x50
 80028f6:	d03c      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0xf6>
 80028f8:	2b50      	cmp	r3, #80	; 0x50
 80028fa:	d873      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d058      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x136>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d86f      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 8002904:	2b30      	cmp	r3, #48	; 0x30
 8002906:	d064      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x156>
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d86b      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 800290c:	2b20      	cmp	r3, #32
 800290e:	d060      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x156>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d867      	bhi.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05c      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x156>
 8002918:	2b10      	cmp	r3, #16
 800291a:	d05a      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800291c:	e062      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f000 f966 	bl	8002bfe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002940:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	609a      	str	r2, [r3, #8]
      break;
 800294a:	e04e      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f000 f94f 	bl	8002bfe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800296e:	609a      	str	r2, [r3, #8]
      break;
 8002970:	e03b      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	461a      	mov	r2, r3
 8002980:	f000 f8c6 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2150      	movs	r1, #80	; 0x50
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f91d 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 8002990:	e02b      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 f8e4 	bl	8002b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2160      	movs	r1, #96	; 0x60
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f90d 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 80029b0:	e01b      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f000 f8a6 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2140      	movs	r1, #64	; 0x40
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f8fd 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 80029d0:	e00b      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f000 f8f4 	bl	8002bca <TIM_ITRx_SetConfig>
        break;
 80029e2:	e002      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <TIM_Base_SetConfig+0xb8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <TIM_Base_SetConfig+0x30>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6a:	d007      	beq.n	8002a7c <TIM_Base_SetConfig+0x30>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <TIM_Base_SetConfig+0xbc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_Base_SetConfig+0x30>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <TIM_Base_SetConfig+0xc0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d108      	bne.n	8002a8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <TIM_Base_SetConfig+0xb8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00b      	beq.n	8002aae <TIM_Base_SetConfig+0x62>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x62>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <TIM_Base_SetConfig+0xbc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x62>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <TIM_Base_SetConfig+0xc0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <TIM_Base_SetConfig+0xb8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800

08002b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0201 	bic.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 030a 	bic.w	r3, r3, #10
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 0210 	bic.w	r2, r3, #16
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f043 0307 	orr.w	r3, r3, #7
 8002bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	021a      	lsls	r2, r3, #8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e046      	b.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca0:	d009      	beq.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800

08002cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <__cxa_pure_virtual>:
 8002d1c:	b508      	push	{r3, lr}
 8002d1e:	f000 f80d 	bl	8002d3c <_ZSt9terminatev>

08002d22 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8002d22:	b508      	push	{r3, lr}
 8002d24:	4780      	blx	r0
 8002d26:	f000 f80e 	bl	8002d46 <abort>
	...

08002d2c <_ZSt13get_terminatev>:
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <_ZSt13get_terminatev+0xc>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f3bf 8f5b 	dmb	ish
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000003c 	.word	0x2000003c

08002d3c <_ZSt9terminatev>:
 8002d3c:	b508      	push	{r3, lr}
 8002d3e:	f7ff fff5 	bl	8002d2c <_ZSt13get_terminatev>
 8002d42:	f7ff ffee 	bl	8002d22 <_ZN10__cxxabiv111__terminateEPFvvE>

08002d46 <abort>:
 8002d46:	2006      	movs	r0, #6
 8002d48:	b508      	push	{r3, lr}
 8002d4a:	f000 f85d 	bl	8002e08 <raise>
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7fe f8a5 	bl	8000e9e <_exit>

08002d54 <__errno>:
 8002d54:	4b01      	ldr	r3, [pc, #4]	; (8002d5c <__errno+0x8>)
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000040 	.word	0x20000040

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	2600      	movs	r6, #0
 8002d64:	4d0c      	ldr	r5, [pc, #48]	; (8002d98 <__libc_init_array+0x38>)
 8002d66:	4c0d      	ldr	r4, [pc, #52]	; (8002d9c <__libc_init_array+0x3c>)
 8002d68:	1b64      	subs	r4, r4, r5
 8002d6a:	10a4      	asrs	r4, r4, #2
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	f000 f866 	bl	8002e40 <_init>
 8002d74:	2600      	movs	r6, #0
 8002d76:	4d0a      	ldr	r5, [pc, #40]	; (8002da0 <__libc_init_array+0x40>)
 8002d78:	4c0a      	ldr	r4, [pc, #40]	; (8002da4 <__libc_init_array+0x44>)
 8002d7a:	1b64      	subs	r4, r4, r5
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08002eb4 	.word	0x08002eb4
 8002d9c:	08002eb4 	.word	0x08002eb4
 8002da0:	08002eb4 	.word	0x08002eb4
 8002da4:	08002ec0 	.word	0x08002ec0

08002da8 <memset>:
 8002da8:	4603      	mov	r3, r0
 8002daa:	4402      	add	r2, r0
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d100      	bne.n	8002db2 <memset+0xa>
 8002db0:	4770      	bx	lr
 8002db2:	f803 1b01 	strb.w	r1, [r3], #1
 8002db6:	e7f9      	b.n	8002dac <memset+0x4>

08002db8 <_raise_r>:
 8002db8:	291f      	cmp	r1, #31
 8002dba:	b538      	push	{r3, r4, r5, lr}
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	460d      	mov	r5, r1
 8002dc0:	d904      	bls.n	8002dcc <_raise_r+0x14>
 8002dc2:	2316      	movs	r3, #22
 8002dc4:	6003      	str	r3, [r0, #0]
 8002dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dca:	bd38      	pop	{r3, r4, r5, pc}
 8002dcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002dce:	b112      	cbz	r2, 8002dd6 <_raise_r+0x1e>
 8002dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002dd4:	b94b      	cbnz	r3, 8002dea <_raise_r+0x32>
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 f830 	bl	8002e3c <_getpid_r>
 8002ddc:	462a      	mov	r2, r5
 8002dde:	4601      	mov	r1, r0
 8002de0:	4620      	mov	r0, r4
 8002de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002de6:	f000 b817 	b.w	8002e18 <_kill_r>
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d00a      	beq.n	8002e04 <_raise_r+0x4c>
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	d103      	bne.n	8002dfa <_raise_r+0x42>
 8002df2:	2316      	movs	r3, #22
 8002df4:	6003      	str	r3, [r0, #0]
 8002df6:	2001      	movs	r0, #1
 8002df8:	e7e7      	b.n	8002dca <_raise_r+0x12>
 8002dfa:	2400      	movs	r4, #0
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002e02:	4798      	blx	r3
 8002e04:	2000      	movs	r0, #0
 8002e06:	e7e0      	b.n	8002dca <_raise_r+0x12>

08002e08 <raise>:
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <raise+0xc>)
 8002e0a:	4601      	mov	r1, r0
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	f7ff bfd3 	b.w	8002db8 <_raise_r>
 8002e12:	bf00      	nop
 8002e14:	20000040 	.word	0x20000040

08002e18 <_kill_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	4d06      	ldr	r5, [pc, #24]	; (8002e38 <_kill_r+0x20>)
 8002e1e:	4604      	mov	r4, r0
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	602b      	str	r3, [r5, #0]
 8002e26:	f7fe f82a 	bl	8000e7e <_kill>
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	d102      	bne.n	8002e34 <_kill_r+0x1c>
 8002e2e:	682b      	ldr	r3, [r5, #0]
 8002e30:	b103      	cbz	r3, 8002e34 <_kill_r+0x1c>
 8002e32:	6023      	str	r3, [r4, #0]
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
 8002e36:	bf00      	nop
 8002e38:	200002c0 	.word	0x200002c0

08002e3c <_getpid_r>:
 8002e3c:	f7fe b818 	b.w	8000e70 <_getpid>

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
